package org.ismail.nasaeemopmangment;

import android.content.Context;
import android.content.Intent;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.Bundle;
import android.util.Log;
import android.view.KeyEvent;
import android.view.View;
import android.widget.CompoundButton;
import android.widget.EditText;
import android.widget.Switch;
import android.widget.TableRow;
import android.widget.TextView;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;

import com.google.android.material.floatingactionbutton.ExtendedFloatingActionButton;
import com.google.android.material.floatingactionbutton.FloatingActionButton;
import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.ValueEventListener;

public class MainActivity2 extends AppCompatActivity {
    public boolean isAppRunning = true;

    public void setIsAppRunning(boolean v){
        isAppRunning = v;
    }

    public boolean isAppRunning(){
        return isAppRunning;
    }
    FloatingActionButton add_task, edit_task;
    ExtendedFloatingActionButton fab;
    TextView ta_add, ta_edit;
TextView name1,point1,target1,team1,location1,Section1,
    name2,point2,target2,team2,location2,Section2,
    name3,point3,target3,team3,location3,Section3,  name4,point4,target4,team4,location4,Section4,date1, date2,date3,date4,    name5,	point5,	target5,	team5,	location5,	Section5,	date5,	name6,	point6,	target6,	team6,	location6,	Section6,	date6,	name7,	point7,	target7,	team7,	location7,	Section7,	date7,	name8,	point8,	target8,	team8,	location8,	Section8,	date8,	name9,	point9,	target9,	team9,	location9,	Section9,	date9,	name10,	point10,	target10,	team10,	location10,	Section10,	date10,	name11,	point11,	target11,	team11,	location11,	Section11,	date11,	name12,	point12,	target12,	team12,	location12,	Section12,	date12,	name13,	point13,	target13,	team13,	location13,	Section13,	date13,	name14,	point14,	target14,	team14,	location14,	Section14,	date14,	name15,	point15,	target15,	team15,	location15,	Section15,	date15,	name16,	point16,	target16,	team16,	location16,	Section16,	date16,	name17,	point17,	target17,	team17,	location17,	Section17,	date17,	name18,	point18,	target18,	team18,	location18,	Section18,	date18,	name19,	point19,	target19,	team19,	location19,	Section19,	date19,	name20,	point20,	target20,	team20,	location20,	Section20,	date20,	name21,	point21,	target21,	team21,	location21,	Section21,	date21,	name22,	point22,	target22,	team22,	location22,	Section22,	date22,	name23,	point23,	target23,	team23,	location23,	Section23,	date23,	name24,	point24,	target24,	team24,	location24,	Section24,	date24,	name25,	point25,	target25,	team25,	location25,	Section25,	date25,	name26,	point26,	target26,	team26,	location26,	Section26,	date26,	name27,	point27,	target27,	team27,	location27,	Section27,	date27,	name28,	point28,	target28,	team28,	location28,	Section28,	date28,	name29,	point29,	target29,	team29,	location29,	Section29,	date29,	name30,	point30,	target30,	team30,	location30,	Section30,	date30,	name31,	point31,	target31,	team31,	location31,	Section31,	date31,	name32,	point32,	target32,	team32,	location32,	Section32,	date32,	name33,	point33,	target33,	team33,	location33,	Section33,	date33,	name34,	point34,	target34,	team34,	location34,	Section34,	date34,	name35,	point35,	target35,	team35,	location35,	Section35,	date35,	name36,	point36,	target36,	team36,	location36,	Section36,	date36,	name37,	point37,	target37,	team37,	location37,	Section37,	date37,	name38,	point38,	target38,	team38,	location38,	Section38,	date38,	name39,	point39,	target39,	team39,	location39,	Section39,	date39,	name40,	point40,	target40,	team40,	location40,	Section40,	date40,	name41,	point41,	target41,	team41,	location41,	Section41,	date41,	name42,	point42,	target42,	team42,	location42,	Section42,	date42,	name43,	point43,	target43,	team43,	location43,	Section43,	date43,	name44,	point44,	target44,	team44,	location44,	Section44,	date44,	name45,	point45,	target45,	team45,	location45,	Section45,	date45,	name46,	point46,	target46,	team46,	location46,	Section46,	date46,	name47,	point47,	target47,	team47,	location47,	Section47,	date47,	name48,	point48,	target48,	team48,	location48,	Section48,	date48,	name49,	point49,	target49,	team49,	location49,	Section49,	date49,	name50,	point50,	target50,	team50,	location50,	Section50,	date50,	name51,	point51,	target51,	team51,	location51,	Section51,	date51,	name52,	point52,	target52,	team52,	location52,	Section52,	date52,	name53,	point53,	target53,	team53,	location53,	Section53,	date53,	name54,	point54,	target54,	team54,	location54,	Section54,	date54,	name55,	point55,	target55,	team55,	location55,	Section55,	date55,	name56,	point56,	target56,	team56,	location56,	Section56,	date56,	name57,	point57,	target57,	team57,	location57,	Section57,	date57,	name58,	point58,	target58,	team58,	location58,	Section58,	date58,	name59,	point59,	target59,	team59,	location59,	Section59,	date59,	name60,	point60,	target60,	team60,	location60,	Section60,	date60,	name61,	point61,	target61,	team61,	location61,	Section61,	date61,	name62,	point62,	target62,	team62,	location62,	Section62,	date62,	name63,	point63,	target63,	team63,	location63,	Section63,	date63,	name64,	point64,	target64,	team64,	location64,	Section64,	date64,	name65,	point65,	target65,	team65,	location65,	Section65,	date65,	name66,	point66,	target66,	team66,	location66,	Section66,	date66,	name67,	point67,	target67,	team67,	location67,	Section67,	date67,	name68,	point68,	target68,	team68,	location68,	Section68,	date68,	name69,	point69,	target69,	team69,	location69,	Section69,	date69,	name70,	point70,	target70,	team70,	location70,	Section70,	date70,	name71,	point71,	target71,	team71,	location71,	Section71,	date71,	name72,	point72,	target72,	team72,	location72,	Section72,	date72,	name73,	point73,	target73,	team73,	location73,	Section73,	date73,	name74,	point74,	target74,	team74,	location74,	Section74,	date74,	name75,	point75,	target75,	team75,	location75,	Section75,	date75,	name76,	point76,	target76,	team76,	location76,	Section76,	date76,	name77,	point77,	target77,	team77,	location77,	Section77,	date77,	name78,	point78,	target78,	team78,	location78,	Section78,	date78,	name79,	point79,	target79,	team79,	location79,	Section79,	date79,	name80,	point80,	target80,	team80,	location80,	Section80,	date80,	name81,	point81,	target81,	team81,	location81,	Section81,	date81,	name82,	point82,	target82,	team82,	location82,	Section82,	date82,	name83,	point83,	target83,	team83,	location83,	Section83,	date83,	name84,	point84,	target84,	team84,	location84,	Section84,	date84,	name85,	point85,	target85,	team85,	location85,	Section85,	date85,	name86,	point86,	target86,	team86,	location86,	Section86,	date86,	name87,	point87,	target87,	team87,	location87,	Section87,	date87,	name88,	point88,	target88,	team88,	location88,	Section88,	date88,	name89,	point89,	target89,	team89,	location89,	Section89,	date89,	name90,	point90,	target90,	team90,	location90,	Section90,	date90,	name91,	point91,	target91,	team91,	location91,	Section91,	date91,	name92,	point92,	target92,	team92,	location92,	Section92,	date92,	name93,	point93,	target93,	team93,	location93,	Section93,	date93,	name94,	point94,	target94,	team94,	location94,	Section94,	date94,	name95,	point95,	target95,	team95,	location95,	Section95,	date95,	name96,	point96,	target96,	team96,	location96,	Section96,	date96,	name97,	point97,	target97,	team97,	location97,	Section97,	date97,	name98,	point98,	target98,	team98,	location98,	Section98,	date98,	name99,	point99,	target99,	team99,	location99,	Section99,	date99,	name100,	point100,	target100,	team100,	location100,	Section100,	date100,	name101,	point101,	target101,	team101,	location101,	Section101,	date101,	name102,	point102,	target102,	team102,	location102,	Section102,	date102,	name103,	point103,	target103,	team103,	location103,	Section103,	date103,	name104,	point104,	target104,	team104,	location104,	Section104,	date104,	name105,	point105,	target105,	team105,	location105,	Section105,	date105,	name106,	point106,	target106,	team106,	location106,	Section106,	date106,	name107,	point107,	target107,	team107,	location107,	Section107,	date107,	name108,	point108,	target108,	team108,	location108,	Section108,	date108,	name109,	point109,	target109,	team109,	location109,	Section109,	date109,	name110,	point110,	target110,	team110,	location110,	Section110,	date110,	name111,	point111,	target111,	team111,	location111,	Section111,	date111,	name112,	point112,	target112,	team112,	location112,	Section112,	date112,	name113,	point113,	target113,	team113,	location113,	Section113,	date113,	name114,	point114,	target114,	team114,	location114,	Section114,	date114,	name115,	point115,	target115,	team115,	location115,	Section115,	date115,	name116,	point116,	target116,	team116,	location116,	Section116,	date116,	name117,	point117,	target117,	team117,	location117,	Section117,	date117,	name118,	point118,	target118,	team118,	location118,	Section118,	date118,	name119,	point119,	target119,	team119,	location119,	Section119,	date119,	name120,	point120,	target120,	team120,	location120,	Section120,	date120,	name121,	point121,	target121,	team121,	location121,	Section121,	date121,	name122,	point122,	target122,	team122,	location122,	Section122,	date122,	name123,	point123,	target123,	team123,	location123,	Section123,	date123,	name124,	point124,	target124,	team124,	location124,	Section124,	date124,	name125,	point125,	target125,	team125,	location125,	Section125,	date125,	name126,	point126,	target126,	team126,	location126,	Section126,	date126,	name127,	point127,	target127,	team127,	location127,	Section127,	date127,	name128,	point128,	target128,	team128,	location128,	Section128,	date128,	name129,	point129,	target129,	team129,	location129,	Section129,	date129,	name130,	point130,	target130,	team130,	location130,	Section130,	date130,	name131,	point131,	target131,	team131,	location131,	Section131,	date131,	name132,	point132,	target132,	team132,	location132,	Section132,	date132,	name133,	point133,	target133,	team133,	location133,	Section133,	date133,	name134,	point134,	target134,	team134,	location134,	Section134,	date134,	name135,	point135,	target135,	team135,	location135,	Section135,	date135,	name136,	point136,	target136,	team136,	location136,	Section136,	date136,	name137,	point137,	target137,	team137,	location137,	Section137,	date137,	name138,	point138,	target138,	team138,	location138,	Section138,	date138,	name139,	point139,	target139,	team139,	location139,	Section139,	date139,	name140,	point140,	target140,	team140,	location140,	Section140,	date140,	name141,	point141,	target141,	team141,	location141,	Section141,	date141,	name142,	point142,	target142,	team142,	location142,	Section142,	date142,	name143,	point143,	target143,	team143,	location143,	Section143,	date143,	name144,	point144,	target144,	team144,	location144,	Section144,	date144,	name145,	point145,	target145,	team145,	location145,	Section145,	date145,	name146,	point146,	target146,	team146,	location146,	Section146,	date146,	name147,	point147,	target147,	team147,	location147,	Section147,	date147,	name148,	point148,	target148,	team148,	location148,	Section148,	date148,	name149,	point149,	target149,	team149,	location149,	Section149,	date149,	name150,	point150,	target150,	team150,	location150,	Section150,	date150,	name151,	point151,	target151,	team151,	location151,	Section151,	date151,	name152,	point152,	target152,	team152,	location152,	Section152,	date152,	name153,	point153,	target153,	team153,	location153,	Section153,	date153,	name154,	point154,	target154,	team154,	location154,	Section154,	date154,	name155,	point155,	target155,	team155,	location155,	Section155,	date155,	name156,	point156,	target156,	team156,	location156,	Section156,	date156,	name157,	point157,	target157,	team157,	location157,	Section157,	date157,	name158,	point158,	target158,	team158,	location158,	Section158,	date158,	name159,	point159,	target159,	team159,	location159,	Section159,	date159,	name160,	point160,	target160,	team160,	location160,	Section160,	date160,	name161,	point161,	target161,	team161,	location161,	Section161,	date161,	name162,	point162,	target162,	team162,	location162,	Section162,	date162,	name163,	point163,	target163,	team163,	location163,	Section163,	date163,	name164,	point164,	target164,	team164,	location164,	Section164,	date164,	name165,	point165,	target165,	team165,	location165,	Section165,	date165,	name166,	point166,	target166,	team166,	location166,	Section166,	date166,	name167,	point167,	target167,	team167,	location167,	Section167,	date167,	name168,	point168,	target168,	team168,	location168,	Section168,	date168,	name169,	point169,	target169,	team169,	location169,	Section169,	date169,	name170,	point170,	target170,	team170,	location170,	Section170,	date170,	name171,	point171,	target171,	team171,	location171,	Section171,	date171,	name172,	point172,	target172,	team172,	location172,	Section172,	date172,	name173,	point173,	target173,	team173,	location173,	Section173,	date173,	name174,	point174,	target174,	team174,	location174,	Section174,	date174,	name175,	point175,	target175,	team175,	location175,	Section175,	date175,	name176,	point176,	target176,	team176,	location176,	Section176,	date176,	name177,	point177,	target177,	team177,	location177,	Section177,	date177,	name178,	point178,	target178,	team178,	location178,	Section178,	date178,	name179,	point179,	target179,	team179,	location179,	Section179,	date179,	name180,	point180,	target180,	team180,	location180,	Section180,	date180,	name181,	point181,	target181,	team181,	location181,	Section181,	date181,	name182,	point182,	target182,	team182,	location182,	Section182,	date182,	name183,	point183,	target183,	team183,	location183,	Section183,	date183,	name184,	point184,	target184,	team184,	location184,	Section184,	date184,	name185,	point185,	target185,	team185,	location185,	Section185,	date185,	name186,	point186,	target186,	team186,	location186,	Section186,	date186,	name187,	point187,	target187,	team187,	location187,	Section187,	date187,	name188,	point188,	target188,	team188,	location188,	Section188,	date188,	name189,	point189,	target189,	team189,	location189,	Section189,	date189,	name190,	point190,	target190,	team190,	location190,	Section190,	date190,	name191,	point191,	target191,	team191,	location191,	Section191,	date191,	name192,	point192,	target192,	team192,	location192,	Section192,	date192,	name193,	point193,	target193,	team193,	location193,	Section193,	date193,	name194,	point194,	target194,	team194,	location194,	Section194,	date194,	name195,	point195,	target195,	team195,	location195,	Section195,	date195,	name196,	point196,	target196,	team196,	location196,	Section196,	date196,	name197,	point197,	target197,	team197,	location197,	Section197,	date197,	name198,	point198,	target198,	team198,	location198,	Section198,	date198,	name199,	point199,	target199,	team199,	location199,	Section199,	date199,	name200,	point200,	target200,	team200,	location200,	Section200,	date200,	name201,	point201,	target201,	team201,	location201,	Section201,	date201,	name202,	point202,	target202,	team202,	location202,	Section202,	date202,	name203,	point203,	target203,	team203,	location203,	Section203,	date203,	name204,	point204,	target204,	team204,	location204,	Section204,	date204,	name205,	point205,	target205,	team205,	location205,	Section205,	date205,	name206,	point206,	target206,	team206,	location206,	Section206,	date206,	name207,	point207,	target207,	team207,	location207,	Section207,	date207,	name208,	point208,	target208,	team208,	location208,	Section208,	date208,	name209,	point209,	target209,	team209,	location209,	Section209,	date209,	name210,	point210,	target210,	team210,	location210,	Section210,	date210,	name211,	point211,	target211,	team211,	location211,	Section211,	date211,	name212,	point212,	target212,	team212,	location212,	Section212,	date212,	name213,	point213,	target213,	team213,	location213,	Section213,	date213,	name214,	point214,	target214,	team214,	location214,	Section214,	date214,	name215,	point215,	target215,	team215,	location215,	Section215,	date215,	name216,	point216,	target216,	team216,	location216,	Section216,	date216,	name217,	point217,	target217,	team217,	location217,	Section217,	date217,	name218,	point218,	target218,	team218,	location218,	Section218,	date218,	name219,	point219,	target219,	team219,	location219,	Section219,	date219,	name220,	point220,	target220,	team220,	location220,	Section220,	date220,	name221,	point221,	target221,	team221,	location221,	Section221,	date221,	name222,	point222,	target222,	team222,	location222,	Section222,	date222,	name223,	point223,	target223,	team223,	location223,	Section223,	date223,	name224,	point224,	target224,	team224,	location224,	Section224,	date224,	name225,	point225,	target225,	team225,	location225,	Section225,	date225,	name226,	point226,	target226,	team226,	location226,	Section226,	date226,	name227,	point227,	target227,	team227,	location227,	Section227,	date227,	name228,	point228,	target228,	team228,	location228,	Section228,	date228,	name229,	point229,	target229,	team229,	location229,	Section229,	date229,	name230,	point230,	target230,	team230,	location230,	Section230,	date230,	name231,	point231,	target231,	team231,	location231,	Section231,	date231,	name232,	point232,	target232,	team232,	location232,	Section232,	date232,	name233,	point233,	target233,	team233,	location233,	Section233,	date233,	name234,	point234,	target234,	team234,	location234,	Section234,	date234,	name235,	point235,	target235,	team235,	location235,	Section235,	date235,	name236,	point236,	target236,	team236,	location236,	Section236,	date236,	name237,	point237,	target237,	team237,	location237,	Section237,	date237,	name238,	point238,	target238,	team238,	location238,	Section238,	date238,	name239,	point239,	target239,	team239,	location239,	Section239,	date239,	name240,	point240,	target240,	team240,	location240,	Section240,	date240,	name241,	point241,	target241,	team241,	location241,	Section241,	date241,	name242,	point242,	target242,	team242,	location242,	Section242,	date242,	name243,	point243,	target243,	team243,	location243,	Section243,	date243,	name244,	point244,	target244,	team244,	location244,	Section244,	date244,	name245,	point245,	target245,	team245,	location245,	Section245,	date245,	name246,	point246,	target246,	team246,	location246,	Section246,	date246,	name247,	point247,	target247,	team247,	location247,	Section247,	date247,	name248,	point248,	target248,	team248,	location248,	Section248,	date248,	name249,	point249,	target249,	team249,	location249,	Section249,	date249,	name250,	point250,	target250,	team250,	location250,	Section250,	date250,	name251,	point251,	target251,	team251,	location251,	Section251,	date251,	name252,	point252,	target252,	team252,	location252,	Section252,	date252,	name253,	point253,	target253,	team253,	location253,	Section253,	date253,	name254,	point254,	target254,	team254,	location254,	Section254,	date254,	name255,	point255,	target255,	team255,	location255,	Section255,	date255,	name256,	point256,	target256,	team256,	location256,	Section256,	date256,	name257,	point257,	target257,	team257,	location257,	Section257,	date257,	name258,	point258,	target258,	team258,	location258,	Section258,	date258,	name259,	point259,	target259,	team259,	location259,	Section259,	date259,	name260,	point260,	target260,	team260,	location260,	Section260,	date260,	name261,	point261,	target261,	team261,	location261,	Section261,	date261,	name262,	point262,	target262,	team262,	location262,	Section262,	date262,	name263,	point263,	target263,	team263,	location263,	Section263,	date263,	name264,	point264,	target264,	team264,	location264,	Section264,	date264,	name265,	point265,	target265,	team265,	location265,	Section265,	date265,	name266,	point266,	target266,	team266,	location266,	Section266,	date266,	name267,	point267,	target267,	team267,	location267,	Section267,	date267,	name268,	point268,	target268,	team268,	location268,	Section268,	date268,	name269,	point269,	target269,	team269,	location269,	Section269,	date269,	name270,	point270,	target270,	team270,	location270,	Section270,	date270,	name271,	point271,	target271,	team271,	location271,	Section271,	date271,	name272,	point272,	target272,	team272,	location272,	Section272,	date272,	name273,	point273,	target273,	team273,	location273,	Section273,	date273,	name274,	point274,	target274,	team274,	location274,	Section274,	date274,	name275,	point275,	target275,	team275,	location275,	Section275,	date275,	name276,	point276,	target276,	team276,	location276,	Section276,	date276,	name277,	point277,	target277,	team277,	location277,	Section277,	date277,	name278,	point278,	target278,	team278,	location278,	Section278,	date278,	name279,	point279,	target279,	team279,	location279,	Section279,	date279,	name280,	point280,	target280,	team280,	location280,	Section280,	date280,	name281,	point281,	target281,	team281,	location281,	Section281,	date281,	name282,	point282,	target282,	team282,	location282,	Section282,	date282,	name283,	point283,	target283,	team283,	location283,	Section283,	date283,	name284,	point284,	target284,	team284,	location284,	Section284,	date284,	name285,	point285,	target285,	team285,	location285,	Section285,	date285,	name286,	point286,	target286,	team286,	location286,	Section286,	date286,	name287,	point287,	target287,	team287,	location287,	Section287,	date287,	name288,	point288,	target288,	team288,	location288,	Section288,	date288,	name289,	point289,	target289,	team289,	location289,	Section289,	date289,	name290,	point290,	target290,	team290,	location290,	Section290,	date290,	name291,	point291,	target291,	team291,	location291,	Section291,	date291,	name292,	point292,	target292,	team292,	location292,	Section292,	date292,	name293,	point293,	target293,	team293,	location293,	Section293,	date293,	name294,	point294,	target294,	team294,	location294,	Section294,	date294,	name295,	point295,	target295,	team295,	location295,	Section295,	date295,	name296,	point296,	target296,	team296,	location296,	Section296,	date296,	name297,	point297,	target297,	team297,	location297,	Section297,	date297,	name298,	point298,	target298,	team298,	location298,	Section298,	date298,	name299,	point299,	target299,	team299,	location299,	Section299,	date299,	name300,	point300,	target300,	team300,	location300,	Section300,	date300;

   EditText tmael1,driver1,comment1,	tmael2,driver2,comment2,	tmael3,driver3,comment3,	tmael4,driver4,comment4,	tmael5,driver5,comment5,	tmael6,driver6,comment6,	tmael7,driver7,comment7,	tmael8,driver8,comment8,	tmael9,driver9,comment9,	tmael10,driver10,comment10,	tmael11,driver11,comment11,	tmael12,driver12,comment12,	tmael13,driver13,comment13,	tmael14,driver14,comment14,	tmael15,driver15,comment15,	tmael16,driver16,comment16,	tmael17,driver17,comment17,	tmael18,driver18,comment18,	tmael19,driver19,comment19,	tmael20,driver20,comment20,	tmael21,driver21,comment21,	tmael22,driver22,comment22,	tmael23,driver23,comment23,	tmael24,driver24,comment24,	tmael25,driver25,comment25,	tmael26,driver26,comment26,	tmael27,driver27,comment27,	tmael28,driver28,comment28,	tmael29,driver29,comment29,	tmael30,driver30,comment30,	tmael31,driver31,comment31,	tmael32,driver32,comment32,	tmael33,driver33,comment33,	tmael34,driver34,comment34,	tmael35,driver35,comment35,	tmael36,driver36,comment36,	tmael37,driver37,comment37,	tmael38,driver38,comment38,	tmael39,driver39,comment39,	tmael40,driver40,comment40,	tmael41,driver41,comment41,	tmael42,driver42,comment42,	tmael43,driver43,comment43,	tmael44,driver44,comment44,	tmael45,driver45,comment45,	tmael46,driver46,comment46,	tmael47,driver47,comment47,	tmael48,driver48,comment48,	tmael49,driver49,comment49,	tmael50,driver50,comment50,	tmael51,driver51,comment51,	tmael52,driver52,comment52,	tmael53,driver53,comment53,	tmael54,driver54,comment54,	tmael55,driver55,comment55,	tmael56,driver56,comment56,	tmael57,driver57,comment57,	tmael58,driver58,comment58,	tmael59,driver59,comment59,	tmael60,driver60,comment60,	tmael61,driver61,comment61,	tmael62,driver62,comment62,	tmael63,driver63,comment63,	tmael64,driver64,comment64,	tmael65,driver65,comment65,	tmael66,driver66,comment66,	tmael67,driver67,comment67,	tmael68,driver68,comment68,	tmael69,driver69,comment69,	tmael70,driver70,comment70,	tmael71,driver71,comment71,	tmael72,driver72,comment72,	tmael73,driver73,comment73,	tmael74,driver74,comment74,	tmael75,driver75,comment75,	tmael76,driver76,comment76,	tmael77,driver77,comment77,	tmael78,driver78,comment78,	tmael79,driver79,comment79,	tmael80,driver80,comment80,	tmael81,driver81,comment81,	tmael82,driver82,comment82,	tmael83,driver83,comment83,	tmael84,driver84,comment84,	tmael85,driver85,comment85,	tmael86,driver86,comment86,	tmael87,driver87,comment87,	tmael88,driver88,comment88,	tmael89,driver89,comment89,	tmael90,driver90,comment90,	tmael91,driver91,comment91,	tmael92,driver92,comment92,	tmael93,driver93,comment93,	tmael94,driver94,comment94,	tmael95,driver95,comment95,	tmael96,driver96,comment96,	tmael97,driver97,comment97,	tmael98,driver98,comment98,	tmael99,driver99,comment99,	tmael100,driver100,comment100,	tmael101,driver101,comment101,	tmael102,driver102,comment102,	tmael103,driver103,comment103,	tmael104,driver104,comment104,	tmael105,driver105,comment105,	tmael106,driver106,comment106,	tmael107,driver107,comment107,	tmael108,driver108,comment108,	tmael109,driver109,comment109,	tmael110,driver110,comment110,	tmael111,driver111,comment111,	tmael112,driver112,comment112,	tmael113,driver113,comment113,	tmael114,driver114,comment114,	tmael115,driver115,comment115,	tmael116,driver116,comment116,	tmael117,driver117,comment117,	tmael118,driver118,comment118,	tmael119,driver119,comment119,	tmael120,driver120,comment120,	tmael121,driver121,comment121,	tmael122,driver122,comment122,	tmael123,driver123,comment123,	tmael124,driver124,comment124,	tmael125,driver125,comment125,	tmael126,driver126,comment126,	tmael127,driver127,comment127,	tmael128,driver128,comment128,	tmael129,driver129,comment129,	tmael130,driver130,comment130,	tmael131,driver131,comment131,	tmael132,driver132,comment132,	tmael133,driver133,comment133,	tmael134,driver134,comment134,	tmael135,driver135,comment135,	tmael136,driver136,comment136,	tmael137,driver137,comment137,	tmael138,driver138,comment138,	tmael139,driver139,comment139,	tmael140,driver140,comment140,	tmael141,driver141,comment141,	tmael142,driver142,comment142,	tmael143,driver143,comment143,	tmael144,driver144,comment144,	tmael145,driver145,comment145,	tmael146,driver146,comment146,	tmael147,driver147,comment147,	tmael148,driver148,comment148,	tmael149,driver149,comment149,	tmael150,driver150,comment150,	tmael151,driver151,comment151,	tmael152,driver152,comment152,	tmael153,driver153,comment153,	tmael154,driver154,comment154,	tmael155,driver155,comment155,	tmael156,driver156,comment156,	tmael157,driver157,comment157,	tmael158,driver158,comment158,	tmael159,driver159,comment159,	tmael160,driver160,comment160,	tmael161,driver161,comment161,	tmael162,driver162,comment162,	tmael163,driver163,comment163,	tmael164,driver164,comment164,	tmael165,driver165,comment165,	tmael166,driver166,comment166,	tmael167,driver167,comment167,	tmael168,driver168,comment168,	tmael169,driver169,comment169,	tmael170,driver170,comment170,	tmael171,driver171,comment171,	tmael172,driver172,comment172,	tmael173,driver173,comment173,	tmael174,driver174,comment174,	tmael175,driver175,comment175,	tmael176,driver176,comment176,	tmael177,driver177,comment177,	tmael178,driver178,comment178,	tmael179,driver179,comment179,	tmael180,driver180,comment180,	tmael181,driver181,comment181,	tmael182,driver182,comment182,	tmael183,driver183,comment183,	tmael184,driver184,comment184,	tmael185,driver185,comment185,	tmael186,driver186,comment186,	tmael187,driver187,comment187,	tmael188,driver188,comment188,	tmael189,driver189,comment189,	tmael190,driver190,comment190,	tmael191,driver191,comment191,	tmael192,driver192,comment192,	tmael193,driver193,comment193,	tmael194,driver194,comment194,	tmael195,driver195,comment195,	tmael196,driver196,comment196,	tmael197,driver197,comment197,	tmael198,driver198,comment198,	tmael199,driver199,comment199,	tmael200,driver200,comment200,	tmael201,driver201,comment201,	tmael202,driver202,comment202,	tmael203,driver203,comment203,	tmael204,driver204,comment204,	tmael205,driver205,comment205,	tmael206,driver206,comment206,	tmael207,driver207,comment207,	tmael208,driver208,comment208,	tmael209,driver209,comment209,	tmael210,driver210,comment210,	tmael211,driver211,comment211,	tmael212,driver212,comment212,	tmael213,driver213,comment213,	tmael214,driver214,comment214,	tmael215,driver215,comment215,	tmael216,driver216,comment216,	tmael217,driver217,comment217,	tmael218,driver218,comment218,	tmael219,driver219,comment219,	tmael220,driver220,comment220,	tmael221,driver221,comment221,	tmael222,driver222,comment222,	tmael223,driver223,comment223,	tmael224,driver224,comment224,	tmael225,driver225,comment225,	tmael226,driver226,comment226,	tmael227,driver227,comment227,	tmael228,driver228,comment228,	tmael229,driver229,comment229,	tmael230,driver230,comment230,	tmael231,driver231,comment231,	tmael232,driver232,comment232,	tmael233,driver233,comment233,	tmael234,driver234,comment234,	tmael235,driver235,comment235,	tmael236,driver236,comment236,	tmael237,driver237,comment237,	tmael238,driver238,comment238,	tmael239,driver239,comment239,	tmael240,driver240,comment240,	tmael241,driver241,comment241,	tmael242,driver242,comment242,	tmael243,driver243,comment243,	tmael244,driver244,comment244,	tmael245,driver245,comment245,	tmael246,driver246,comment246,	tmael247,driver247,comment247,	tmael248,driver248,comment248,	tmael249,driver249,comment249,	tmael250,driver250,comment250,	tmael251,driver251,comment251,	tmael252,driver252,comment252,	tmael253,driver253,comment253,	tmael254,driver254,comment254,	tmael255,driver255,comment255,	tmael256,driver256,comment256,	tmael257,driver257,comment257,	tmael258,driver258,comment258,	tmael259,driver259,comment259,	tmael260,driver260,comment260,	tmael261,driver261,comment261,	tmael262,driver262,comment262,	tmael263,driver263,comment263,	tmael264,driver264,comment264,	tmael265,driver265,comment265,	tmael266,driver266,comment266,	tmael267,driver267,comment267,	tmael268,driver268,comment268,	tmael269,driver269,comment269,	tmael270,driver270,comment270,	tmael271,driver271,comment271,	tmael272,driver272,comment272,	tmael273,driver273,comment273,	tmael274,driver274,comment274,	tmael275,driver275,comment275,	tmael276,driver276,comment276,	tmael277,driver277,comment277,	tmael278,driver278,comment278,	tmael279,driver279,comment279,	tmael280,driver280,comment280,	tmael281,driver281,comment281,	tmael282,driver282,comment282,	tmael283,driver283,comment283,	tmael284,driver284,comment284,	tmael285,driver285,comment285,	tmael286,driver286,comment286,	tmael287,driver287,comment287,	tmael288,driver288,comment288,	tmael289,driver289,comment289,	tmael290,driver290,comment290,	tmael291,driver291,comment291,	tmael292,driver292,comment292,	tmael293,driver293,comment293,	tmael294,driver294,comment294,	tmael295,driver295,comment295,	tmael296,driver296,comment296,	tmael297,driver297,comment297,	tmael298,driver298,comment298,	tmael299,driver299,comment299,	tmael300,driver300,comment300;
   Switch s1,s2,s3,s4,s5,sm1,sm2,sm3,sm4,sm5, s6,	s7,	s8,	s9,	s10,	s11,	s12,	s13,	s14,	s15,	s16,	s17,	s18,	s19,	s20,	s21,	s22,	s23,	s24,	s25,	s26,	s27,	s28,	s29,	s30,	s31,	s32,	s33,	s34,	s35,	s36,	s37,	s38,	s39,	s40,	s41,	s42,	s43,	s44,	s45,	s46,	s47,	s48,	s49,	s50,	s51,	s52,	s53,	s54,	s55,	s56,	s57,	s58,	s59,	s60,	s61,	s62,	s63,	s64,	s65,	s66,	s67,	s68,	s69,	s70,	s71,	s72,	s73,	s74,	s75,	s76,	s77,	s78,	s79,	s80,	s81,	s82,	s83,	s84,	s85,	s86,	s87,	s88,	s89,	s90,	s91,	s92,	s93,	s94,	s95,	s96,	s97,	s98,	s99,	s100,	s101,	s102,	s103,	s104,	s105,	s106,	s107,	s108,	s109,	s110,	s111,	s112,	s113,	s114,	s115,	s116,	s117,	s118,	s119,	s120,	s121,	s122,	s123,	s124,	s125,	s126,	s127,	s128,	s129,	s130,	s131,	s132,	s133,	s134,	s135,	s136,	s137,	s138,	s139,	s140,	s141,	s142,	s143,	s144,	s145,	s146,	s147,	s148,	s149,	s150,	s151,	s152,	s153,	s154,	s155,	s156,	s157,	s158,	s159,	s160,	s161,	s162,	s163,	s164,	s165,	s166,	s167,	s168,	s169,	s170,	s171,	s172,	s173,	s174,	s175,	s176,	s177,	s178,	s179,	s180,	s181,	s182,	s183,	s184,	s185,	s186,	s187,	s188,	s189,	s190,	s191,	s192,	s193,	s194,	s195,	s196,	s197,	s198,	s199,	s200,	s201,	s202,	s203,	s204,	s205,	s206,	s207,	s208,	s209,	s210,	s211,	s212,	s213,	s214,	s215,	s216,	s217,	s218,	s219,	s220,	s221,	s222,	s223,	s224,	s225,	s226,	s227,	s228,	s229,	s230,	s231,	s232,	s233,	s234,	s235,	s236,	s237,	s238,	s239,	s240,	s241,	s242,	s243,	s244,	s245,	s246,	s247,	s248,	s249,	s250,	s251,	s252,	s253,	s254,	s255,	s256,	s257,	s258,	s259,	s260,	s261,	s262,	s263,	s264,	s265,	s266,	s267,	s268,	s269,	s270,	s271,	s272,	s273,	s274,	s275,	s276,	s277,	s278,	s279,	s280,	s281,	s282,	s283,	s284,	s285,	s286,	s287,	s288,	s289,	s290,	s291,	s292,	s293,	s294,	s295,	s296,	s297,	s298,	s299,	s300, sm6,	sm7,	sm8,	sm9,	sm10,	sm11,	sm12,	sm13,	sm14,	sm15,	sm16,	sm17,	sm18,	sm19,	sm20,	sm21,	sm22,	sm23,	sm24,	sm25,	sm26,	sm27,	sm28,	sm29,	sm30,	sm31,	sm32,	sm33,	sm34,	sm35,	sm36,	sm37,	sm38,	sm39,	sm40,	sm41,	sm42,	sm43,	sm44,	sm45,	sm46,	sm47,	sm48,	sm49,	sm50,	sm51,	sm52,	sm53,	sm54,	sm55,	sm56,	sm57,	sm58,	sm59,	sm60,	sm61,	sm62,	sm63,	sm64,	sm65,	sm66,	sm67,	sm68,	sm69,	sm70,	sm71,	sm72,	sm73,	sm74,	sm75,	sm76,	sm77,	sm78,	sm79,	sm80,	sm81,	sm82,	sm83,	sm84,	sm85,	sm86,	sm87,	sm88,	sm89,	sm90,	sm91,	sm92,	sm93,	sm94,	sm95,	sm96,	sm97,	sm98,	sm99,	sm100,	sm101,	sm102,	sm103,	sm104,	sm105,	sm106,	sm107,	sm108,	sm109,	sm110,	sm111,	sm112,	sm113,	sm114,	sm115,	sm116,	sm117,	sm118,	sm119,	sm120,	sm121,	sm122,	sm123,	sm124,	sm125,	sm126,	sm127,	sm128,	sm129,	sm130,	sm131,	sm132,	sm133,	sm134,	sm135,	sm136,	sm137,	sm138,	sm139,	sm140,	sm141,	sm142,	sm143,	sm144,	sm145,	sm146,	sm147,	sm148,	sm149,	sm150,	sm151,	sm152,	sm153,	sm154,	sm155,	sm156,	sm157,	sm158,	sm159,	sm160,	sm161,	sm162,	sm163,	sm164,	sm165,	sm166,	sm167,	sm168,	sm169,	sm170,	sm171,	sm172,	sm173,	sm174,	sm175,	sm176,	sm177,	sm178,	sm179,	sm180,	sm181,	sm182,	sm183,	sm184,	sm185,	sm186,	sm187,	sm188,	sm189,	sm190,	sm191,	sm192,	sm193,	sm194,	sm195,	sm196,	sm197,	sm198,	sm199,	sm200,	sm201,	sm202,	sm203,	sm204,	sm205,	sm206,	sm207,	sm208,	sm209,	sm210,	sm211,	sm212,	sm213,	sm214,	sm215,	sm216,	sm217,	sm218,	sm219,	sm220,	sm221,	sm222,	sm223,	sm224,	sm225,	sm226,	sm227,	sm228,	sm229,	sm230,	sm231,	sm232,	sm233,	sm234,	sm235,	sm236,	sm237,	sm238,	sm239,	sm240,	sm241,	sm242,	sm243,	sm244,	sm245,	sm246,	sm247,	sm248,	sm249,	sm250,	sm251,	sm252,	sm253,	sm254,	sm255,	sm256,	sm257,	sm258,	sm259,	sm260,	sm261,	sm262,	sm263,	sm264,	sm265,	sm266,	sm267,	sm268,	sm269,	sm270,	sm271,	sm272,	sm273,	sm274,	sm275,	sm276,	sm277,	sm278,	sm279,	sm280,	sm281,	sm282,	sm283,	sm284,	sm285,	sm286,	sm287,	sm288,	sm289,	sm290,	sm291,	sm292,	sm293,	sm294,	sm295,	sm296,	sm297,	sm298,	sm299,	sm300;
    TableRow Tab1,Tab2,Tab3,Tab4,Tab5,Tab6,Tab7,Tab8,Tab9,Tab10;
    Integer numTask;
   Boolean isAllFABVisible,v,b1,bm1;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main2);
        add_task = findViewById(R.id.add_task);
        edit_task = findViewById(R.id.edit_task);
        fab = findViewById(R.id.fab);
        ta_add = findViewById(R.id.ta_add);
        ta_edit = findViewById(R.id.ta_edit);

        ta_add.setVisibility(View.GONE);
        ta_edit.setVisibility(View.GONE);
        edit_task.setVisibility(View.GONE);
        add_task.setVisibility(View.GONE);

        isAllFABVisible=false;

        fab.shrink();








        fab.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {

                if (!isAllFABVisible) {
                    add_task.show();
                    edit_task.show();
                    ta_add.setVisibility(View.VISIBLE);
                    ta_edit.setVisibility(View.VISIBLE);

                    fab.extend();
                    fab.setIconTintResource(R.color.design_default_color_error);
                    fab.setRotation(44);


                    isAllFABVisible = true;


                } else {
                    fab.setRotation(180);
                    add_task.hide();
                    edit_task.hide();
                    ta_edit.setVisibility(View.GONE);
                    ta_add.setVisibility(View.GONE);
                    fab.shrink();
                    fab.setIconTintResource(R.color.ic_cansl_background);

                    isAllFABVisible = false;


                }

                add_task.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View view) {
                        Intent intent = new Intent(MainActivity2.this, Add_Task.class);
                        startActivity(intent);

                        Toast.makeText(MainActivity2.this, "ضيف المهمة من بعد إذنك", Toast.LENGTH_SHORT).show();
                    }
                });











            }
        });
        name1 = findViewById(R.id.name1);
        point1 = findViewById(R.id.point1);
        Section1 = findViewById(R.id.Section1);
        target1 = findViewById(R.id.target1);
        team1 = findViewById(R.id.team1);
        location1 = findViewById(R.id.location1);

        name2 = findViewById(R.id.name2);
        point2 = findViewById(R.id.point2);
        Section2 = findViewById(R.id.Section2);
        target2 = findViewById(R.id.target2);
        team2 = findViewById(R.id.team2);
        location2 = findViewById(R.id.location2);

        name3 = findViewById(R.id.name3);
        point3 = findViewById(R.id.point3);
        Section3 = findViewById(R.id.Section3);
        target3 = findViewById(R.id.target3);
        team3 = findViewById(R.id.team3);
        location3 = findViewById(R.id.location3);

        name4 = findViewById(R.id.name4);
        point4 = findViewById(R.id.point4);
        Section4 = findViewById(R.id.Section4);
        target4 = findViewById(R.id.target4);
        team4 = findViewById(R.id.team4);
        location4 = findViewById(R.id.location4);

        name5 = findViewById(R.id.name5);
        point5 = findViewById(R.id.point5);
        Section5 = findViewById(R.id.Section5);
        target5 = findViewById(R.id.target5);
        team5 = findViewById(R.id.team5);
        location5 = findViewById(R.id.location5);
        Tab1= findViewById(R.id.Tab1);
        Tab2= findViewById(R.id.Tab2);
        Tab3= findViewById(R.id.Tab3);
        Tab4= findViewById(R.id.Tab4);
        Tab5= findViewById(R.id.Tab5);

        tmael1= findViewById(R.id.tmael1);
        tmael2= findViewById(R.id.tmael2);
        tmael3= findViewById(R.id.tmael3);
        tmael4= findViewById(R.id.tmael4);
        tmael5= findViewById(R.id.tmael5);

        date1= findViewById(R.id.date1);
        date2= findViewById(R.id.date2);
        date3= findViewById(R.id.date3);
        date4= findViewById(R.id.date4);
        date5= findViewById(R.id.date5);

        driver1= findViewById(R.id.driver1);
        driver2= findViewById(R.id.driver2);
        driver3= findViewById(R.id.driver3);
        driver4= findViewById(R.id.driver4);
        driver5= findViewById(R.id.driver5);

        comment1= findViewById(R.id.comment1);
        comment2= findViewById(R.id.comment2);
        comment3= findViewById(R.id.comment3);
        comment4= findViewById(R.id.comment4);
        comment5= findViewById(R.id.comment5);
        s1= findViewById(R.id.s1);
        s2= findViewById(R.id.s2);
        s3= findViewById(R.id.s3);
        s4= findViewById(R.id.s4);
        s5= findViewById(R.id.s5);
        sm1= findViewById(R.id.sm1);
        sm2= findViewById(R.id.sm2);
        sm3= findViewById(R.id.sm3);
        sm4= findViewById(R.id.sm4);
        sm5= findViewById(R.id.sm5);
        name6=findViewById(R.id.name6);
        point6=findViewById(R.id.point6);
        Section6=findViewById(R.id.Section6);
        target6=findViewById(R.id.target6);
        team6=findViewById(R.id.team6);
        location6=findViewById(R.id.location6);
        tmael6= findViewById(R.id.tmael6);
        date6= findViewById(R.id.date6);
        driver6= findViewById(R.id.driver6);
        comment6= findViewById(R.id.comment6);
        s6= findViewById(R.id.s6);
        sm6= findViewById(R.id.sm6);
        name7=findViewById(R.id.name7);
        point7=findViewById(R.id.point7);
        Section7=findViewById(R.id.Section7);
        target7=findViewById(R.id.target7);
        team7=findViewById(R.id.team7);
        location7=findViewById(R.id.location7);
        tmael7= findViewById(R.id.tmael7);
        date7= findViewById(R.id.date7);
        driver7= findViewById(R.id.driver7);
        comment7= findViewById(R.id.comment7);
        s7= findViewById(R.id.s7);
        sm7= findViewById(R.id.sm7);
        name8=findViewById(R.id.name8);
        point8=findViewById(R.id.point8);
        Section8=findViewById(R.id.Section8);
        target8=findViewById(R.id.target8);
        team8=findViewById(R.id.team8);
        location8=findViewById(R.id.location8);
        tmael8= findViewById(R.id.tmael8);
        date8= findViewById(R.id.date8);
        driver8= findViewById(R.id.driver8);
        comment8= findViewById(R.id.comment8);
        s8= findViewById(R.id.s8);
        sm8= findViewById(R.id.sm8);
        name9=findViewById(R.id.name9);
        point9=findViewById(R.id.point9);
        Section9=findViewById(R.id.Section9);
        target9=findViewById(R.id.target9);
        team9=findViewById(R.id.team9);
        location9=findViewById(R.id.location9);
        tmael9= findViewById(R.id.tmael9);
        date9= findViewById(R.id.date9);
        driver9= findViewById(R.id.driver9);
        comment9= findViewById(R.id.comment9);
        s9= findViewById(R.id.s9);
        sm9= findViewById(R.id.sm9);
        name10=findViewById(R.id.name10);
        point10=findViewById(R.id.point10);
        Section10=findViewById(R.id.Section10);
        target10=findViewById(R.id.target10);
        team10=findViewById(R.id.team10);
        location10=findViewById(R.id.location10);
        tmael10= findViewById(R.id.tmael10);
        date10= findViewById(R.id.date10);
        driver10= findViewById(R.id.driver10);
        comment10= findViewById(R.id.comment10);
        s10= findViewById(R.id.s10);
        sm10= findViewById(R.id.sm10);
        name11=findViewById(R.id.name11);
        point11=findViewById(R.id.point11);
        Section11=findViewById(R.id.Section11);
        target11=findViewById(R.id.target11);
        team11=findViewById(R.id.team11);
        location11=findViewById(R.id.location11);
        tmael11= findViewById(R.id.tmael11);
        date11= findViewById(R.id.date11);
        driver11= findViewById(R.id.driver11);
        comment11= findViewById(R.id.comment11);
        s11= findViewById(R.id.s11);
        sm11= findViewById(R.id.sm11);
        name12=findViewById(R.id.name12);
        point12=findViewById(R.id.point12);
        Section12=findViewById(R.id.Section12);
        target12=findViewById(R.id.target12);
        team12=findViewById(R.id.team12);
        location12=findViewById(R.id.location12);
        tmael12= findViewById(R.id.tmael12);
        date12= findViewById(R.id.date12);
        driver12= findViewById(R.id.driver12);
        comment12= findViewById(R.id.comment12);
        s12= findViewById(R.id.s12);
        sm12= findViewById(R.id.sm12);
        name13=findViewById(R.id.name13);
        point13=findViewById(R.id.point13);
        Section13=findViewById(R.id.Section13);
        target13=findViewById(R.id.target13);
        team13=findViewById(R.id.team13);
        location13=findViewById(R.id.location13);
        tmael13= findViewById(R.id.tmael13);
        date13= findViewById(R.id.date13);
        driver13= findViewById(R.id.driver13);
        comment13= findViewById(R.id.comment13);
        s13= findViewById(R.id.s13);
        sm13= findViewById(R.id.sm13);
        name14=findViewById(R.id.name14);
        point14=findViewById(R.id.point14);
        Section14=findViewById(R.id.Section14);
        target14=findViewById(R.id.target14);
        team14=findViewById(R.id.team14);
        location14=findViewById(R.id.location14);
        tmael14= findViewById(R.id.tmael14);
        date14= findViewById(R.id.date14);
        driver14= findViewById(R.id.driver14);
        comment14= findViewById(R.id.comment14);
        s14= findViewById(R.id.s14);
        sm14= findViewById(R.id.sm14);
        name15=findViewById(R.id.name15);
        point15=findViewById(R.id.point15);
        Section15=findViewById(R.id.Section15);
        target15=findViewById(R.id.target15);
        team15=findViewById(R.id.team15);
        location15=findViewById(R.id.location15);
        tmael15= findViewById(R.id.tmael15);
        date15= findViewById(R.id.date15);
        driver15= findViewById(R.id.driver15);
        comment15= findViewById(R.id.comment15);
        s15= findViewById(R.id.s15);
        sm15= findViewById(R.id.sm15);
        name16=findViewById(R.id.name16);
        point16=findViewById(R.id.point16);
        Section16=findViewById(R.id.Section16);
        target16=findViewById(R.id.target16);
        team16=findViewById(R.id.team16);
        location16=findViewById(R.id.location16);
        tmael16= findViewById(R.id.tmael16);
        date16= findViewById(R.id.date16);
        driver16= findViewById(R.id.driver16);
        comment16= findViewById(R.id.comment16);
        s16= findViewById(R.id.s16);
        sm16= findViewById(R.id.sm16);
        name17=findViewById(R.id.name17);
        point17=findViewById(R.id.point17);
        Section17=findViewById(R.id.Section17);
        target17=findViewById(R.id.target17);
        team17=findViewById(R.id.team17);
        location17=findViewById(R.id.location17);
        tmael17= findViewById(R.id.tmael17);
        date17= findViewById(R.id.date17);
        driver17= findViewById(R.id.driver17);
        comment17= findViewById(R.id.comment17);
        s17= findViewById(R.id.s17);
        sm17= findViewById(R.id.sm17);
        name18=findViewById(R.id.name18);
        point18=findViewById(R.id.point18);
        Section18=findViewById(R.id.Section18);
        target18=findViewById(R.id.target18);
        team18=findViewById(R.id.team18);
        location18=findViewById(R.id.location18);
        tmael18= findViewById(R.id.tmael18);
        date18= findViewById(R.id.date18);
        driver18= findViewById(R.id.driver18);
        comment18= findViewById(R.id.comment18);
        s18= findViewById(R.id.s18);
        sm18= findViewById(R.id.sm18);
        name19=findViewById(R.id.name19);
        point19=findViewById(R.id.point19);
        Section19=findViewById(R.id.Section19);
        target19=findViewById(R.id.target19);
        team19=findViewById(R.id.team19);
        location19=findViewById(R.id.location19);
        tmael19= findViewById(R.id.tmael19);
        date19= findViewById(R.id.date19);
        driver19= findViewById(R.id.driver19);
        comment19= findViewById(R.id.comment19);
        s19= findViewById(R.id.s19);
        sm19= findViewById(R.id.sm19);
        name20=findViewById(R.id.name20);
        point20=findViewById(R.id.point20);
        Section20=findViewById(R.id.Section20);
        target20=findViewById(R.id.target20);
        team20=findViewById(R.id.team20);
        location20=findViewById(R.id.location20);
        tmael20= findViewById(R.id.tmael20);
        date20= findViewById(R.id.date20);
        driver20= findViewById(R.id.driver20);
        comment20= findViewById(R.id.comment20);
        s20= findViewById(R.id.s20);
        sm20= findViewById(R.id.sm20);
        name21=findViewById(R.id.name21);
        point21=findViewById(R.id.point21);
        Section21=findViewById(R.id.Section21);
        target21=findViewById(R.id.target21);
        team21=findViewById(R.id.team21);
        location21=findViewById(R.id.location21);
        tmael21= findViewById(R.id.tmael21);
        date21= findViewById(R.id.date21);
        driver21= findViewById(R.id.driver21);
        comment21= findViewById(R.id.comment21);
        s21= findViewById(R.id.s21);
        sm21= findViewById(R.id.sm21);
        name22=findViewById(R.id.name22);
        point22=findViewById(R.id.point22);
        Section22=findViewById(R.id.Section22);
        target22=findViewById(R.id.target22);
        team22=findViewById(R.id.team22);
        location22=findViewById(R.id.location22);
        tmael22= findViewById(R.id.tmael22);
        date22= findViewById(R.id.date22);
        driver22= findViewById(R.id.driver22);
        comment22= findViewById(R.id.comment22);
        s22= findViewById(R.id.s22);
        sm22= findViewById(R.id.sm22);
        name23=findViewById(R.id.name23);
        point23=findViewById(R.id.point23);
        Section23=findViewById(R.id.Section23);
        target23=findViewById(R.id.target23);
        team23=findViewById(R.id.team23);
        location23=findViewById(R.id.location23);
        tmael23= findViewById(R.id.tmael23);
        date23= findViewById(R.id.date23);
        driver23= findViewById(R.id.driver23);
        comment23= findViewById(R.id.comment23);
        s23= findViewById(R.id.s23);
        sm23= findViewById(R.id.sm23);
        name24=findViewById(R.id.name24);
        point24=findViewById(R.id.point24);
        Section24=findViewById(R.id.Section24);
        target24=findViewById(R.id.target24);
        team24=findViewById(R.id.team24);
        location24=findViewById(R.id.location24);
        tmael24= findViewById(R.id.tmael24);
        date24= findViewById(R.id.date24);
        driver24= findViewById(R.id.driver24);
        comment24= findViewById(R.id.comment24);
        s24= findViewById(R.id.s24);
        sm24= findViewById(R.id.sm24);
        name25=findViewById(R.id.name25);
        point25=findViewById(R.id.point25);
        Section25=findViewById(R.id.Section25);
        target25=findViewById(R.id.target25);
        team25=findViewById(R.id.team25);
        location25=findViewById(R.id.location25);
        tmael25= findViewById(R.id.tmael25);
        date25= findViewById(R.id.date25);
        driver25= findViewById(R.id.driver25);
        comment25= findViewById(R.id.comment25);
        s25= findViewById(R.id.s25);
        sm25= findViewById(R.id.sm25);
        name26=findViewById(R.id.name26);
        point26=findViewById(R.id.point26);
        Section26=findViewById(R.id.Section26);
        target26=findViewById(R.id.target26);
        team26=findViewById(R.id.team26);
        location26=findViewById(R.id.location26);
        tmael26= findViewById(R.id.tmael26);
        date26= findViewById(R.id.date26);
        driver26= findViewById(R.id.driver26);
        comment26= findViewById(R.id.comment26);
        s26= findViewById(R.id.s26);
        sm26= findViewById(R.id.sm26);
        name27=findViewById(R.id.name27);
        point27=findViewById(R.id.point27);
        Section27=findViewById(R.id.Section27);
        target27=findViewById(R.id.target27);
        team27=findViewById(R.id.team27);
        location27=findViewById(R.id.location27);
        tmael27= findViewById(R.id.tmael27);
        date27= findViewById(R.id.date27);
        driver27= findViewById(R.id.driver27);
        comment27= findViewById(R.id.comment27);
        s27= findViewById(R.id.s27);
        sm27= findViewById(R.id.sm27);
        name28=findViewById(R.id.name28);
        point28=findViewById(R.id.point28);
        Section28=findViewById(R.id.Section28);
        target28=findViewById(R.id.target28);
        team28=findViewById(R.id.team28);
        location28=findViewById(R.id.location28);
        tmael28= findViewById(R.id.tmael28);
        date28= findViewById(R.id.date28);
        driver28= findViewById(R.id.driver28);
        comment28= findViewById(R.id.comment28);
        s28= findViewById(R.id.s28);
        sm28= findViewById(R.id.sm28);
        name29=findViewById(R.id.name29);
        point29=findViewById(R.id.point29);
        Section29=findViewById(R.id.Section29);
        target29=findViewById(R.id.target29);
        team29=findViewById(R.id.team29);
        location29=findViewById(R.id.location29);
        tmael29= findViewById(R.id.tmael29);
        date29= findViewById(R.id.date29);
        driver29= findViewById(R.id.driver29);
        comment29= findViewById(R.id.comment29);
        s29= findViewById(R.id.s29);
        sm29= findViewById(R.id.sm29);
        name30=findViewById(R.id.name30);
        point30=findViewById(R.id.point30);
        Section30=findViewById(R.id.Section30);
        target30=findViewById(R.id.target30);
        team30=findViewById(R.id.team30);
        location30=findViewById(R.id.location30);
        tmael30= findViewById(R.id.tmael30);
        date30= findViewById(R.id.date30);
        driver30= findViewById(R.id.driver30);
        comment30= findViewById(R.id.comment30);
        s30= findViewById(R.id.s30);
        sm30= findViewById(R.id.sm30);
        name31=findViewById(R.id.name31);
        point31=findViewById(R.id.point31);
        Section31=findViewById(R.id.Section31);
        target31=findViewById(R.id.target31);
        team31=findViewById(R.id.team31);
        location31=findViewById(R.id.location31);
        tmael31= findViewById(R.id.tmael31);
        date31= findViewById(R.id.date31);
        driver31= findViewById(R.id.driver31);
        comment31= findViewById(R.id.comment31);
        s31= findViewById(R.id.s31);
        sm31= findViewById(R.id.sm31);
        name32=findViewById(R.id.name32);
        point32=findViewById(R.id.point32);
        Section32=findViewById(R.id.Section32);
        target32=findViewById(R.id.target32);
        team32=findViewById(R.id.team32);
        location32=findViewById(R.id.location32);
        tmael32= findViewById(R.id.tmael32);
        date32= findViewById(R.id.date32);
        driver32= findViewById(R.id.driver32);
        comment32= findViewById(R.id.comment32);
        s32= findViewById(R.id.s32);
        sm32= findViewById(R.id.sm32);
        name33=findViewById(R.id.name33);
        point33=findViewById(R.id.point33);
        Section33=findViewById(R.id.Section33);
        target33=findViewById(R.id.target33);
        team33=findViewById(R.id.team33);
        location33=findViewById(R.id.location33);
        tmael33= findViewById(R.id.tmael33);
        date33= findViewById(R.id.date33);
        driver33= findViewById(R.id.driver33);
        comment33= findViewById(R.id.comment33);
        s33= findViewById(R.id.s33);
        sm33= findViewById(R.id.sm33);
        name34=findViewById(R.id.name34);
        point34=findViewById(R.id.point34);
        Section34=findViewById(R.id.Section34);
        target34=findViewById(R.id.target34);
        team34=findViewById(R.id.team34);
        location34=findViewById(R.id.location34);
        tmael34= findViewById(R.id.tmael34);
        date34= findViewById(R.id.date34);
        driver34= findViewById(R.id.driver34);
        comment34= findViewById(R.id.comment34);
        s34= findViewById(R.id.s34);
        sm34= findViewById(R.id.sm34);
        name35=findViewById(R.id.name35);
        point35=findViewById(R.id.point35);
        Section35=findViewById(R.id.Section35);
        target35=findViewById(R.id.target35);
        team35=findViewById(R.id.team35);
        location35=findViewById(R.id.location35);
        tmael35= findViewById(R.id.tmael35);
        date35= findViewById(R.id.date35);
        driver35= findViewById(R.id.driver35);
        comment35= findViewById(R.id.comment35);
        s35= findViewById(R.id.s35);
        sm35= findViewById(R.id.sm35);
        name36=findViewById(R.id.name36);
        point36=findViewById(R.id.point36);
        Section36=findViewById(R.id.Section36);
        target36=findViewById(R.id.target36);
        team36=findViewById(R.id.team36);
        location36=findViewById(R.id.location36);
        tmael36= findViewById(R.id.tmael36);
        date36= findViewById(R.id.date36);
        driver36= findViewById(R.id.driver36);
        comment36= findViewById(R.id.comment36);
        s36= findViewById(R.id.s36);
        sm36= findViewById(R.id.sm36);
        name37=findViewById(R.id.name37);
        point37=findViewById(R.id.point37);
        Section37=findViewById(R.id.Section37);
        target37=findViewById(R.id.target37);
        team37=findViewById(R.id.team37);
        location37=findViewById(R.id.location37);
        tmael37= findViewById(R.id.tmael37);
        date37= findViewById(R.id.date37);
        driver37= findViewById(R.id.driver37);
        comment37= findViewById(R.id.comment37);
        s37= findViewById(R.id.s37);
        sm37= findViewById(R.id.sm37);
        name38=findViewById(R.id.name38);
        point38=findViewById(R.id.point38);
        Section38=findViewById(R.id.Section38);
        target38=findViewById(R.id.target38);
        team38=findViewById(R.id.team38);
        location38=findViewById(R.id.location38);
        tmael38= findViewById(R.id.tmael38);
        date38= findViewById(R.id.date38);
        driver38= findViewById(R.id.driver38);
        comment38= findViewById(R.id.comment38);
        s38= findViewById(R.id.s38);
        sm38= findViewById(R.id.sm38);
        name39=findViewById(R.id.name39);
        point39=findViewById(R.id.point39);
        Section39=findViewById(R.id.Section39);
        target39=findViewById(R.id.target39);
        team39=findViewById(R.id.team39);
        location39=findViewById(R.id.location39);
        tmael39= findViewById(R.id.tmael39);
        date39= findViewById(R.id.date39);
        driver39= findViewById(R.id.driver39);
        comment39= findViewById(R.id.comment39);
        s39= findViewById(R.id.s39);
        sm39= findViewById(R.id.sm39);
        name40=findViewById(R.id.name40);
        point40=findViewById(R.id.point40);
        Section40=findViewById(R.id.Section40);
        target40=findViewById(R.id.target40);
        team40=findViewById(R.id.team40);
        location40=findViewById(R.id.location40);
        tmael40= findViewById(R.id.tmael40);
        date40= findViewById(R.id.date40);
        driver40= findViewById(R.id.driver40);
        comment40= findViewById(R.id.comment40);
        s40= findViewById(R.id.s40);
        sm40= findViewById(R.id.sm40);
        name41=findViewById(R.id.name41);
        point41=findViewById(R.id.point41);
        Section41=findViewById(R.id.Section41);
        target41=findViewById(R.id.target41);
        team41=findViewById(R.id.team41);
        location41=findViewById(R.id.location41);
        tmael41= findViewById(R.id.tmael41);
        date41= findViewById(R.id.date41);
        driver41= findViewById(R.id.driver41);
        comment41= findViewById(R.id.comment41);
        s41= findViewById(R.id.s41);
        sm41= findViewById(R.id.sm41);
        name42=findViewById(R.id.name42);
        point42=findViewById(R.id.point42);
        Section42=findViewById(R.id.Section42);
        target42=findViewById(R.id.target42);
        team42=findViewById(R.id.team42);
        location42=findViewById(R.id.location42);
        tmael42= findViewById(R.id.tmael42);
        date42= findViewById(R.id.date42);
        driver42= findViewById(R.id.driver42);
        comment42= findViewById(R.id.comment42);
        s42= findViewById(R.id.s42);
        sm42= findViewById(R.id.sm42);
        name43=findViewById(R.id.name43);
        point43=findViewById(R.id.point43);
        Section43=findViewById(R.id.Section43);
        target43=findViewById(R.id.target43);
        team43=findViewById(R.id.team43);
        location43=findViewById(R.id.location43);
        tmael43= findViewById(R.id.tmael43);
        date43= findViewById(R.id.date43);
        driver43= findViewById(R.id.driver43);
        comment43= findViewById(R.id.comment43);
        s43= findViewById(R.id.s43);
        sm43= findViewById(R.id.sm43);
        name44=findViewById(R.id.name44);
        point44=findViewById(R.id.point44);
        Section44=findViewById(R.id.Section44);
        target44=findViewById(R.id.target44);
        team44=findViewById(R.id.team44);
        location44=findViewById(R.id.location44);
        tmael44= findViewById(R.id.tmael44);
        date44= findViewById(R.id.date44);
        driver44= findViewById(R.id.driver44);
        comment44= findViewById(R.id.comment44);
        s44= findViewById(R.id.s44);
        sm44= findViewById(R.id.sm44);
        name45=findViewById(R.id.name45);
        point45=findViewById(R.id.point45);
        Section45=findViewById(R.id.Section45);
        target45=findViewById(R.id.target45);
        team45=findViewById(R.id.team45);
        location45=findViewById(R.id.location45);
        tmael45= findViewById(R.id.tmael45);
        date45= findViewById(R.id.date45);
        driver45= findViewById(R.id.driver45);
        comment45= findViewById(R.id.comment45);
        s45= findViewById(R.id.s45);
        sm45= findViewById(R.id.sm45);
        name46=findViewById(R.id.name46);
        point46=findViewById(R.id.point46);
        Section46=findViewById(R.id.Section46);
        target46=findViewById(R.id.target46);
        team46=findViewById(R.id.team46);
        location46=findViewById(R.id.location46);
        tmael46= findViewById(R.id.tmael46);
        date46= findViewById(R.id.date46);
        driver46= findViewById(R.id.driver46);
        comment46= findViewById(R.id.comment46);
        s46= findViewById(R.id.s46);
        sm46= findViewById(R.id.sm46);
        name47=findViewById(R.id.name47);
        point47=findViewById(R.id.point47);
        Section47=findViewById(R.id.Section47);
        target47=findViewById(R.id.target47);
        team47=findViewById(R.id.team47);
        location47=findViewById(R.id.location47);
        tmael47= findViewById(R.id.tmael47);
        date47= findViewById(R.id.date47);
        driver47= findViewById(R.id.driver47);
        comment47= findViewById(R.id.comment47);
        s47= findViewById(R.id.s47);
        sm47= findViewById(R.id.sm47);
        name48=findViewById(R.id.name48);
        point48=findViewById(R.id.point48);
        Section48=findViewById(R.id.Section48);
        target48=findViewById(R.id.target48);
        team48=findViewById(R.id.team48);
        location48=findViewById(R.id.location48);
        tmael48= findViewById(R.id.tmael48);
        date48= findViewById(R.id.date48);
        driver48= findViewById(R.id.driver48);
        comment48= findViewById(R.id.comment48);
        s48= findViewById(R.id.s48);
        sm48= findViewById(R.id.sm48);
        name49=findViewById(R.id.name49);
        point49=findViewById(R.id.point49);
        Section49=findViewById(R.id.Section49);
        target49=findViewById(R.id.target49);
        team49=findViewById(R.id.team49);
        location49=findViewById(R.id.location49);
        tmael49= findViewById(R.id.tmael49);
        date49= findViewById(R.id.date49);
        driver49= findViewById(R.id.driver49);
        comment49= findViewById(R.id.comment49);
        s49= findViewById(R.id.s49);
        sm49= findViewById(R.id.sm49);
        name50=findViewById(R.id.name50);
        point50=findViewById(R.id.point50);
        Section50=findViewById(R.id.Section50);
        target50=findViewById(R.id.target50);
        team50=findViewById(R.id.team50);
        location50=findViewById(R.id.location50);
        tmael50= findViewById(R.id.tmael50);
        date50= findViewById(R.id.date50);
        driver50= findViewById(R.id.driver50);
        comment50= findViewById(R.id.comment50);
        s50= findViewById(R.id.s50);
        sm50= findViewById(R.id.sm50);
        name51=findViewById(R.id.name51);
        point51=findViewById(R.id.point51);
        Section51=findViewById(R.id.Section51);
        target51=findViewById(R.id.target51);
        team51=findViewById(R.id.team51);
        location51=findViewById(R.id.location51);
        tmael51= findViewById(R.id.tmael51);
        date51= findViewById(R.id.date51);
        driver51= findViewById(R.id.driver51);
        comment51= findViewById(R.id.comment51);
        s51= findViewById(R.id.s51);
        sm51= findViewById(R.id.sm51);
        name52=findViewById(R.id.name52);
        point52=findViewById(R.id.point52);
        Section52=findViewById(R.id.Section52);
        target52=findViewById(R.id.target52);
        team52=findViewById(R.id.team52);
        location52=findViewById(R.id.location52);
        tmael52= findViewById(R.id.tmael52);
        date52= findViewById(R.id.date52);
        driver52= findViewById(R.id.driver52);
        comment52= findViewById(R.id.comment52);
        s52= findViewById(R.id.s52);
        sm52= findViewById(R.id.sm52);
        name53=findViewById(R.id.name53);
        point53=findViewById(R.id.point53);
        Section53=findViewById(R.id.Section53);
        target53=findViewById(R.id.target53);
        team53=findViewById(R.id.team53);
        location53=findViewById(R.id.location53);
        tmael53= findViewById(R.id.tmael53);
        date53= findViewById(R.id.date53);
        driver53= findViewById(R.id.driver53);
        comment53= findViewById(R.id.comment53);
        s53= findViewById(R.id.s53);
        sm53= findViewById(R.id.sm53);
        name54=findViewById(R.id.name54);
        point54=findViewById(R.id.point54);
        Section54=findViewById(R.id.Section54);
        target54=findViewById(R.id.target54);
        team54=findViewById(R.id.team54);
        location54=findViewById(R.id.location54);
        tmael54= findViewById(R.id.tmael54);
        date54= findViewById(R.id.date54);
        driver54= findViewById(R.id.driver54);
        comment54= findViewById(R.id.comment54);
        s54= findViewById(R.id.s54);
        sm54= findViewById(R.id.sm54);
        name55=findViewById(R.id.name55);
        point55=findViewById(R.id.point55);
        Section55=findViewById(R.id.Section55);
        target55=findViewById(R.id.target55);
        team55=findViewById(R.id.team55);
        location55=findViewById(R.id.location55);
        tmael55= findViewById(R.id.tmael55);
        date55= findViewById(R.id.date55);
        driver55= findViewById(R.id.driver55);
        comment55= findViewById(R.id.comment55);
        s55= findViewById(R.id.s55);
        sm55= findViewById(R.id.sm55);
        name56=findViewById(R.id.name56);
        point56=findViewById(R.id.point56);
        Section56=findViewById(R.id.Section56);
        target56=findViewById(R.id.target56);
        team56=findViewById(R.id.team56);
        location56=findViewById(R.id.location56);
        tmael56= findViewById(R.id.tmael56);
        date56= findViewById(R.id.date56);
        driver56= findViewById(R.id.driver56);
        comment56= findViewById(R.id.comment56);
        s56= findViewById(R.id.s56);
        sm56= findViewById(R.id.sm56);
        name57=findViewById(R.id.name57);
        point57=findViewById(R.id.point57);
        Section57=findViewById(R.id.Section57);
        target57=findViewById(R.id.target57);
        team57=findViewById(R.id.team57);
        location57=findViewById(R.id.location57);
        tmael57= findViewById(R.id.tmael57);
        date57= findViewById(R.id.date57);
        driver57= findViewById(R.id.driver57);
        comment57= findViewById(R.id.comment57);
        s57= findViewById(R.id.s57);
        sm57= findViewById(R.id.sm57);
        name58=findViewById(R.id.name58);
        point58=findViewById(R.id.point58);
        Section58=findViewById(R.id.Section58);
        target58=findViewById(R.id.target58);
        team58=findViewById(R.id.team58);
        location58=findViewById(R.id.location58);
        tmael58= findViewById(R.id.tmael58);
        date58= findViewById(R.id.date58);
        driver58= findViewById(R.id.driver58);
        comment58= findViewById(R.id.comment58);
        s58= findViewById(R.id.s58);
        sm58= findViewById(R.id.sm58);
        name59=findViewById(R.id.name59);
        point59=findViewById(R.id.point59);
        Section59=findViewById(R.id.Section59);
        target59=findViewById(R.id.target59);
        team59=findViewById(R.id.team59);
        location59=findViewById(R.id.location59);
        tmael59= findViewById(R.id.tmael59);
        date59= findViewById(R.id.date59);
        driver59= findViewById(R.id.driver59);
        comment59= findViewById(R.id.comment59);
        s59= findViewById(R.id.s59);
        sm59= findViewById(R.id.sm59);
        name60=findViewById(R.id.name60);
        point60=findViewById(R.id.point60);
        Section60=findViewById(R.id.Section60);
        target60=findViewById(R.id.target60);
        team60=findViewById(R.id.team60);
        location60=findViewById(R.id.location60);
        tmael60= findViewById(R.id.tmael60);
        date60= findViewById(R.id.date60);
        driver60= findViewById(R.id.driver60);
        comment60= findViewById(R.id.comment60);
        s60= findViewById(R.id.s60);
        sm60= findViewById(R.id.sm60);
        name61=findViewById(R.id.name61);
        point61=findViewById(R.id.point61);
        Section61=findViewById(R.id.Section61);
        target61=findViewById(R.id.target61);
        team61=findViewById(R.id.team61);
        location61=findViewById(R.id.location61);
        tmael61= findViewById(R.id.tmael61);
        date61= findViewById(R.id.date61);
        driver61= findViewById(R.id.driver61);
        comment61= findViewById(R.id.comment61);
        s61= findViewById(R.id.s61);
        sm61= findViewById(R.id.sm61);
        name62=findViewById(R.id.name62);
        point62=findViewById(R.id.point62);
        Section62=findViewById(R.id.Section62);
        target62=findViewById(R.id.target62);
        team62=findViewById(R.id.team62);
        location62=findViewById(R.id.location62);
        tmael62= findViewById(R.id.tmael62);
        date62= findViewById(R.id.date62);
        driver62= findViewById(R.id.driver62);
        comment62= findViewById(R.id.comment62);
        s62= findViewById(R.id.s62);
        sm62= findViewById(R.id.sm62);
        name63=findViewById(R.id.name63);
        point63=findViewById(R.id.point63);
        Section63=findViewById(R.id.Section63);
        target63=findViewById(R.id.target63);
        team63=findViewById(R.id.team63);
        location63=findViewById(R.id.location63);
        tmael63= findViewById(R.id.tmael63);
        date63= findViewById(R.id.date63);
        driver63= findViewById(R.id.driver63);
        comment63= findViewById(R.id.comment63);
        s63= findViewById(R.id.s63);
        sm63= findViewById(R.id.sm63);
        name64=findViewById(R.id.name64);
        point64=findViewById(R.id.point64);
        Section64=findViewById(R.id.Section64);
        target64=findViewById(R.id.target64);
        team64=findViewById(R.id.team64);
        location64=findViewById(R.id.location64);
        tmael64= findViewById(R.id.tmael64);
        date64= findViewById(R.id.date64);
        driver64= findViewById(R.id.driver64);
        comment64= findViewById(R.id.comment64);
        s64= findViewById(R.id.s64);
        sm64= findViewById(R.id.sm64);
        name65=findViewById(R.id.name65);
        point65=findViewById(R.id.point65);
        Section65=findViewById(R.id.Section65);
        target65=findViewById(R.id.target65);
        team65=findViewById(R.id.team65);
        location65=findViewById(R.id.location65);
        tmael65= findViewById(R.id.tmael65);
        date65= findViewById(R.id.date65);
        driver65= findViewById(R.id.driver65);
        comment65= findViewById(R.id.comment65);
        s65= findViewById(R.id.s65);
        sm65= findViewById(R.id.sm65);
        name66=findViewById(R.id.name66);
        point66=findViewById(R.id.point66);
        Section66=findViewById(R.id.Section66);
        target66=findViewById(R.id.target66);
        team66=findViewById(R.id.team66);
        location66=findViewById(R.id.location66);
        tmael66= findViewById(R.id.tmael66);
        date66= findViewById(R.id.date66);
        driver66= findViewById(R.id.driver66);
        comment66= findViewById(R.id.comment66);
        s66= findViewById(R.id.s66);
        sm66= findViewById(R.id.sm66);
        name67=findViewById(R.id.name67);
        point67=findViewById(R.id.point67);
        Section67=findViewById(R.id.Section67);
        target67=findViewById(R.id.target67);
        team67=findViewById(R.id.team67);
        location67=findViewById(R.id.location67);
        tmael67= findViewById(R.id.tmael67);
        date67= findViewById(R.id.date67);
        driver67= findViewById(R.id.driver67);
        comment67= findViewById(R.id.comment67);
        s67= findViewById(R.id.s67);
        sm67= findViewById(R.id.sm67);
        name68=findViewById(R.id.name68);
        point68=findViewById(R.id.point68);
        Section68=findViewById(R.id.Section68);
        target68=findViewById(R.id.target68);
        team68=findViewById(R.id.team68);
        location68=findViewById(R.id.location68);
        tmael68= findViewById(R.id.tmael68);
        date68= findViewById(R.id.date68);
        driver68= findViewById(R.id.driver68);
        comment68= findViewById(R.id.comment68);
        s68= findViewById(R.id.s68);
        sm68= findViewById(R.id.sm68);
        name69=findViewById(R.id.name69);
        point69=findViewById(R.id.point69);
        Section69=findViewById(R.id.Section69);
        target69=findViewById(R.id.target69);
        team69=findViewById(R.id.team69);
        location69=findViewById(R.id.location69);
        tmael69= findViewById(R.id.tmael69);
        date69= findViewById(R.id.date69);
        driver69= findViewById(R.id.driver69);
        comment69= findViewById(R.id.comment69);
        s69= findViewById(R.id.s69);
        sm69= findViewById(R.id.sm69);
        name70=findViewById(R.id.name70);
        point70=findViewById(R.id.point70);
        Section70=findViewById(R.id.Section70);
        target70=findViewById(R.id.target70);
        team70=findViewById(R.id.team70);
        location70=findViewById(R.id.location70);
        tmael70= findViewById(R.id.tmael70);
        date70= findViewById(R.id.date70);
        driver70= findViewById(R.id.driver70);
        comment70= findViewById(R.id.comment70);
        s70= findViewById(R.id.s70);
        sm70= findViewById(R.id.sm70);
        name71=findViewById(R.id.name71);
        point71=findViewById(R.id.point71);
        Section71=findViewById(R.id.Section71);
        target71=findViewById(R.id.target71);
        team71=findViewById(R.id.team71);
        location71=findViewById(R.id.location71);
        tmael71= findViewById(R.id.tmael71);
        date71= findViewById(R.id.date71);
        driver71= findViewById(R.id.driver71);
        comment71= findViewById(R.id.comment71);
        s71= findViewById(R.id.s71);
        sm71= findViewById(R.id.sm71);
        name72=findViewById(R.id.name72);
        point72=findViewById(R.id.point72);
        Section72=findViewById(R.id.Section72);
        target72=findViewById(R.id.target72);
        team72=findViewById(R.id.team72);
        location72=findViewById(R.id.location72);
        tmael72= findViewById(R.id.tmael72);
        date72= findViewById(R.id.date72);
        driver72= findViewById(R.id.driver72);
        comment72= findViewById(R.id.comment72);
        s72= findViewById(R.id.s72);
        sm72= findViewById(R.id.sm72);
        name73=findViewById(R.id.name73);
        point73=findViewById(R.id.point73);
        Section73=findViewById(R.id.Section73);
        target73=findViewById(R.id.target73);
        team73=findViewById(R.id.team73);
        location73=findViewById(R.id.location73);
        tmael73= findViewById(R.id.tmael73);
        date73= findViewById(R.id.date73);
        driver73= findViewById(R.id.driver73);
        comment73= findViewById(R.id.comment73);
        s73= findViewById(R.id.s73);
        sm73= findViewById(R.id.sm73);
        name74=findViewById(R.id.name74);
        point74=findViewById(R.id.point74);
        Section74=findViewById(R.id.Section74);
        target74=findViewById(R.id.target74);
        team74=findViewById(R.id.team74);
        location74=findViewById(R.id.location74);
        tmael74= findViewById(R.id.tmael74);
        date74= findViewById(R.id.date74);
        driver74= findViewById(R.id.driver74);
        comment74= findViewById(R.id.comment74);
        s74= findViewById(R.id.s74);
        sm74= findViewById(R.id.sm74);
        name75=findViewById(R.id.name75);
        point75=findViewById(R.id.point75);
        Section75=findViewById(R.id.Section75);
        target75=findViewById(R.id.target75);
        team75=findViewById(R.id.team75);
        location75=findViewById(R.id.location75);
        tmael75= findViewById(R.id.tmael75);
        date75= findViewById(R.id.date75);
        driver75= findViewById(R.id.driver75);
        comment75= findViewById(R.id.comment75);
        s75= findViewById(R.id.s75);
        sm75= findViewById(R.id.sm75);
        name76=findViewById(R.id.name76);
        point76=findViewById(R.id.point76);
        Section76=findViewById(R.id.Section76);
        target76=findViewById(R.id.target76);
        team76=findViewById(R.id.team76);
        location76=findViewById(R.id.location76);
        tmael76= findViewById(R.id.tmael76);
        date76= findViewById(R.id.date76);
        driver76= findViewById(R.id.driver76);
        comment76= findViewById(R.id.comment76);
        s76= findViewById(R.id.s76);
        sm76= findViewById(R.id.sm76);
        name77=findViewById(R.id.name77);
        point77=findViewById(R.id.point77);
        Section77=findViewById(R.id.Section77);
        target77=findViewById(R.id.target77);
        team77=findViewById(R.id.team77);
        location77=findViewById(R.id.location77);
        tmael77= findViewById(R.id.tmael77);
        date77= findViewById(R.id.date77);
        driver77= findViewById(R.id.driver77);
        comment77= findViewById(R.id.comment77);
        s77= findViewById(R.id.s77);
        sm77= findViewById(R.id.sm77);
        name78=findViewById(R.id.name78);
        point78=findViewById(R.id.point78);
        Section78=findViewById(R.id.Section78);
        target78=findViewById(R.id.target78);
        team78=findViewById(R.id.team78);
        location78=findViewById(R.id.location78);
        tmael78= findViewById(R.id.tmael78);
        date78= findViewById(R.id.date78);
        driver78= findViewById(R.id.driver78);
        comment78= findViewById(R.id.comment78);
        s78= findViewById(R.id.s78);
        sm78= findViewById(R.id.sm78);
        name79=findViewById(R.id.name79);
        point79=findViewById(R.id.point79);
        Section79=findViewById(R.id.Section79);
        target79=findViewById(R.id.target79);
        team79=findViewById(R.id.team79);
        location79=findViewById(R.id.location79);
        tmael79= findViewById(R.id.tmael79);
        date79= findViewById(R.id.date79);
        driver79= findViewById(R.id.driver79);
        comment79= findViewById(R.id.comment79);
        s79= findViewById(R.id.s79);
        sm79= findViewById(R.id.sm79);
        name80=findViewById(R.id.name80);
        point80=findViewById(R.id.point80);
        Section80=findViewById(R.id.Section80);
        target80=findViewById(R.id.target80);
        team80=findViewById(R.id.team80);
        location80=findViewById(R.id.location80);
        tmael80= findViewById(R.id.tmael80);
        date80= findViewById(R.id.date80);
        driver80= findViewById(R.id.driver80);
        comment80= findViewById(R.id.comment80);
        s80= findViewById(R.id.s80);
        sm80= findViewById(R.id.sm80);
        name81=findViewById(R.id.name81);
        point81=findViewById(R.id.point81);
        Section81=findViewById(R.id.Section81);
        target81=findViewById(R.id.target81);
        team81=findViewById(R.id.team81);
        location81=findViewById(R.id.location81);
        tmael81= findViewById(R.id.tmael81);
        date81= findViewById(R.id.date81);
        driver81= findViewById(R.id.driver81);
        comment81= findViewById(R.id.comment81);
        s81= findViewById(R.id.s81);
        sm81= findViewById(R.id.sm81);
        name82=findViewById(R.id.name82);
        point82=findViewById(R.id.point82);
        Section82=findViewById(R.id.Section82);
        target82=findViewById(R.id.target82);
        team82=findViewById(R.id.team82);
        location82=findViewById(R.id.location82);
        tmael82= findViewById(R.id.tmael82);
        date82= findViewById(R.id.date82);
        driver82= findViewById(R.id.driver82);
        comment82= findViewById(R.id.comment82);
        s82= findViewById(R.id.s82);
        sm82= findViewById(R.id.sm82);
        name83=findViewById(R.id.name83);
        point83=findViewById(R.id.point83);
        Section83=findViewById(R.id.Section83);
        target83=findViewById(R.id.target83);
        team83=findViewById(R.id.team83);
        location83=findViewById(R.id.location83);
        tmael83= findViewById(R.id.tmael83);
        date83= findViewById(R.id.date83);
        driver83= findViewById(R.id.driver83);
        comment83= findViewById(R.id.comment83);
        s83= findViewById(R.id.s83);
        sm83= findViewById(R.id.sm83);
        name84=findViewById(R.id.name84);
        point84=findViewById(R.id.point84);
        Section84=findViewById(R.id.Section84);
        target84=findViewById(R.id.target84);
        team84=findViewById(R.id.team84);
        location84=findViewById(R.id.location84);
        tmael84= findViewById(R.id.tmael84);
        date84= findViewById(R.id.date84);
        driver84= findViewById(R.id.driver84);
        comment84= findViewById(R.id.comment84);
        s84= findViewById(R.id.s84);
        sm84= findViewById(R.id.sm84);
        name85=findViewById(R.id.name85);
        point85=findViewById(R.id.point85);
        Section85=findViewById(R.id.Section85);
        target85=findViewById(R.id.target85);
        team85=findViewById(R.id.team85);
        location85=findViewById(R.id.location85);
        tmael85= findViewById(R.id.tmael85);
        date85= findViewById(R.id.date85);
        driver85= findViewById(R.id.driver85);
        comment85= findViewById(R.id.comment85);
        s85= findViewById(R.id.s85);
        sm85= findViewById(R.id.sm85);
        name86=findViewById(R.id.name86);
        point86=findViewById(R.id.point86);
        Section86=findViewById(R.id.Section86);
        target86=findViewById(R.id.target86);
        team86=findViewById(R.id.team86);
        location86=findViewById(R.id.location86);
        tmael86= findViewById(R.id.tmael86);
        date86= findViewById(R.id.date86);
        driver86= findViewById(R.id.driver86);
        comment86= findViewById(R.id.comment86);
        s86= findViewById(R.id.s86);
        sm86= findViewById(R.id.sm86);
        name87=findViewById(R.id.name87);
        point87=findViewById(R.id.point87);
        Section87=findViewById(R.id.Section87);
        target87=findViewById(R.id.target87);
        team87=findViewById(R.id.team87);
        location87=findViewById(R.id.location87);
        tmael87= findViewById(R.id.tmael87);
        date87= findViewById(R.id.date87);
        driver87= findViewById(R.id.driver87);
        comment87= findViewById(R.id.comment87);
        s87= findViewById(R.id.s87);
        sm87= findViewById(R.id.sm87);
        name88=findViewById(R.id.name88);
        point88=findViewById(R.id.point88);
        Section88=findViewById(R.id.Section88);
        target88=findViewById(R.id.target88);
        team88=findViewById(R.id.team88);
        location88=findViewById(R.id.location88);
        tmael88= findViewById(R.id.tmael88);
        date88= findViewById(R.id.date88);
        driver88= findViewById(R.id.driver88);
        comment88= findViewById(R.id.comment88);
        s88= findViewById(R.id.s88);
        sm88= findViewById(R.id.sm88);
        name89=findViewById(R.id.name89);
        point89=findViewById(R.id.point89);
        Section89=findViewById(R.id.Section89);
        target89=findViewById(R.id.target89);
        team89=findViewById(R.id.team89);
        location89=findViewById(R.id.location89);
        tmael89= findViewById(R.id.tmael89);
        date89= findViewById(R.id.date89);
        driver89= findViewById(R.id.driver89);
        comment89= findViewById(R.id.comment89);
        s89= findViewById(R.id.s89);
        sm89= findViewById(R.id.sm89);
        name90=findViewById(R.id.name90);
        point90=findViewById(R.id.point90);
        Section90=findViewById(R.id.Section90);
        target90=findViewById(R.id.target90);
        team90=findViewById(R.id.team90);
        location90=findViewById(R.id.location90);
        tmael90= findViewById(R.id.tmael90);
        date90= findViewById(R.id.date90);
        driver90= findViewById(R.id.driver90);
        comment90= findViewById(R.id.comment90);
        s90= findViewById(R.id.s90);
        sm90= findViewById(R.id.sm90);
        name91=findViewById(R.id.name91);
        point91=findViewById(R.id.point91);
        Section91=findViewById(R.id.Section91);
        target91=findViewById(R.id.target91);
        team91=findViewById(R.id.team91);
        location91=findViewById(R.id.location91);
        tmael91= findViewById(R.id.tmael91);
        date91= findViewById(R.id.date91);
        driver91= findViewById(R.id.driver91);
        comment91= findViewById(R.id.comment91);
        s91= findViewById(R.id.s91);
        sm91= findViewById(R.id.sm91);
        name92=findViewById(R.id.name92);
        point92=findViewById(R.id.point92);
        Section92=findViewById(R.id.Section92);
        target92=findViewById(R.id.target92);
        team92=findViewById(R.id.team92);
        location92=findViewById(R.id.location92);
        tmael92= findViewById(R.id.tmael92);
        date92= findViewById(R.id.date92);
        driver92= findViewById(R.id.driver92);
        comment92= findViewById(R.id.comment92);
        s92= findViewById(R.id.s92);
        sm92= findViewById(R.id.sm92);
        name93=findViewById(R.id.name93);
        point93=findViewById(R.id.point93);
        Section93=findViewById(R.id.Section93);
        target93=findViewById(R.id.target93);
        team93=findViewById(R.id.team93);
        location93=findViewById(R.id.location93);
        tmael93= findViewById(R.id.tmael93);
        date93= findViewById(R.id.date93);
        driver93= findViewById(R.id.driver93);
        comment93= findViewById(R.id.comment93);
        s93= findViewById(R.id.s93);
        sm93= findViewById(R.id.sm93);
        name94=findViewById(R.id.name94);
        point94=findViewById(R.id.point94);
        Section94=findViewById(R.id.Section94);
        target94=findViewById(R.id.target94);
        team94=findViewById(R.id.team94);
        location94=findViewById(R.id.location94);
        tmael94= findViewById(R.id.tmael94);
        date94= findViewById(R.id.date94);
        driver94= findViewById(R.id.driver94);
        comment94= findViewById(R.id.comment94);
        s94= findViewById(R.id.s94);
        sm94= findViewById(R.id.sm94);
        name95=findViewById(R.id.name95);
        point95=findViewById(R.id.point95);
        Section95=findViewById(R.id.Section95);
        target95=findViewById(R.id.target95);
        team95=findViewById(R.id.team95);
        location95=findViewById(R.id.location95);
        tmael95= findViewById(R.id.tmael95);
        date95= findViewById(R.id.date95);
        driver95= findViewById(R.id.driver95);
        comment95= findViewById(R.id.comment95);
        s95= findViewById(R.id.s95);
        sm95= findViewById(R.id.sm95);
        name96=findViewById(R.id.name96);
        point96=findViewById(R.id.point96);
        Section96=findViewById(R.id.Section96);
        target96=findViewById(R.id.target96);
        team96=findViewById(R.id.team96);
        location96=findViewById(R.id.location96);
        tmael96= findViewById(R.id.tmael96);
        date96= findViewById(R.id.date96);
        driver96= findViewById(R.id.driver96);
        comment96= findViewById(R.id.comment96);
        s96= findViewById(R.id.s96);
        sm96= findViewById(R.id.sm96);
        name97=findViewById(R.id.name97);
        point97=findViewById(R.id.point97);
        Section97=findViewById(R.id.Section97);
        target97=findViewById(R.id.target97);
        team97=findViewById(R.id.team97);
        location97=findViewById(R.id.location97);
        tmael97= findViewById(R.id.tmael97);
        date97= findViewById(R.id.date97);
        driver97= findViewById(R.id.driver97);
        comment97= findViewById(R.id.comment97);
        s97= findViewById(R.id.s97);
        sm97= findViewById(R.id.sm97);
        name98=findViewById(R.id.name98);
        point98=findViewById(R.id.point98);
        Section98=findViewById(R.id.Section98);
        target98=findViewById(R.id.target98);
        team98=findViewById(R.id.team98);
        location98=findViewById(R.id.location98);
        tmael98= findViewById(R.id.tmael98);
        date98= findViewById(R.id.date98);
        driver98= findViewById(R.id.driver98);
        comment98= findViewById(R.id.comment98);
        s98= findViewById(R.id.s98);
        sm98= findViewById(R.id.sm98);
        name99=findViewById(R.id.name99);
        point99=findViewById(R.id.point99);
        Section99=findViewById(R.id.Section99);
        target99=findViewById(R.id.target99);
        team99=findViewById(R.id.team99);
        location99=findViewById(R.id.location99);
        tmael99= findViewById(R.id.tmael99);
        date99= findViewById(R.id.date99);
        driver99= findViewById(R.id.driver99);
        comment99= findViewById(R.id.comment99);
        s99= findViewById(R.id.s99);
        sm99= findViewById(R.id.sm99);
        name100=findViewById(R.id.name100);
        point100=findViewById(R.id.point100);
        Section100=findViewById(R.id.Section100);
        target100=findViewById(R.id.target100);
        team100=findViewById(R.id.team100);
        location100=findViewById(R.id.location100);
        tmael100= findViewById(R.id.tmael100);
        date100= findViewById(R.id.date100);
        driver100= findViewById(R.id.driver100);
        comment100= findViewById(R.id.comment100);
        s100= findViewById(R.id.s100);
        sm100= findViewById(R.id.sm100);
        name101=findViewById(R.id.name101);
        point101=findViewById(R.id.point101);
        Section101=findViewById(R.id.Section101);
        target101=findViewById(R.id.target101);
        team101=findViewById(R.id.team101);
        location101=findViewById(R.id.location101);
        tmael101= findViewById(R.id.tmael101);
        date101= findViewById(R.id.date101);
        driver101= findViewById(R.id.driver101);
        comment101= findViewById(R.id.comment101);
        s101= findViewById(R.id.s101);
        sm101= findViewById(R.id.sm101);
        name102=findViewById(R.id.name102);
        point102=findViewById(R.id.point102);
        Section102=findViewById(R.id.Section102);
        target102=findViewById(R.id.target102);
        team102=findViewById(R.id.team102);
        location102=findViewById(R.id.location102);
        tmael102= findViewById(R.id.tmael102);
        date102= findViewById(R.id.date102);
        driver102= findViewById(R.id.driver102);
        comment102= findViewById(R.id.comment102);
        s102= findViewById(R.id.s102);
        sm102= findViewById(R.id.sm102);
        name103=findViewById(R.id.name103);
        point103=findViewById(R.id.point103);
        Section103=findViewById(R.id.Section103);
        target103=findViewById(R.id.target103);
        team103=findViewById(R.id.team103);
        location103=findViewById(R.id.location103);
        tmael103= findViewById(R.id.tmael103);
        date103= findViewById(R.id.date103);
        driver103= findViewById(R.id.driver103);
        comment103= findViewById(R.id.comment103);
        s103= findViewById(R.id.s103);
        sm103= findViewById(R.id.sm103);
        name104=findViewById(R.id.name104);
        point104=findViewById(R.id.point104);
        Section104=findViewById(R.id.Section104);
        target104=findViewById(R.id.target104);
        team104=findViewById(R.id.team104);
        location104=findViewById(R.id.location104);
        tmael104= findViewById(R.id.tmael104);
        date104= findViewById(R.id.date104);
        driver104= findViewById(R.id.driver104);
        comment104= findViewById(R.id.comment104);
        s104= findViewById(R.id.s104);
        sm104= findViewById(R.id.sm104);
        name105=findViewById(R.id.name105);
        point105=findViewById(R.id.point105);
        Section105=findViewById(R.id.Section105);
        target105=findViewById(R.id.target105);
        team105=findViewById(R.id.team105);
        location105=findViewById(R.id.location105);
        tmael105= findViewById(R.id.tmael105);
        date105= findViewById(R.id.date105);
        driver105= findViewById(R.id.driver105);
        comment105= findViewById(R.id.comment105);
        s105= findViewById(R.id.s105);
        sm105= findViewById(R.id.sm105);
        name106=findViewById(R.id.name106);
        point106=findViewById(R.id.point106);
        Section106=findViewById(R.id.Section106);
        target106=findViewById(R.id.target106);
        team106=findViewById(R.id.team106);
        location106=findViewById(R.id.location106);
        tmael106= findViewById(R.id.tmael106);
        date106= findViewById(R.id.date106);
        driver106= findViewById(R.id.driver106);
        comment106= findViewById(R.id.comment106);
        s106= findViewById(R.id.s106);
        sm106= findViewById(R.id.sm106);
        name107=findViewById(R.id.name107);
        point107=findViewById(R.id.point107);
        Section107=findViewById(R.id.Section107);
        target107=findViewById(R.id.target107);
        team107=findViewById(R.id.team107);
        location107=findViewById(R.id.location107);
        tmael107= findViewById(R.id.tmael107);
        date107= findViewById(R.id.date107);
        driver107= findViewById(R.id.driver107);
        comment107= findViewById(R.id.comment107);
        s107= findViewById(R.id.s107);
        sm107= findViewById(R.id.sm107);
        name108=findViewById(R.id.name108);
        point108=findViewById(R.id.point108);
        Section108=findViewById(R.id.Section108);
        target108=findViewById(R.id.target108);
        team108=findViewById(R.id.team108);
        location108=findViewById(R.id.location108);
        tmael108= findViewById(R.id.tmael108);
        date108= findViewById(R.id.date108);
        driver108= findViewById(R.id.driver108);
        comment108= findViewById(R.id.comment108);
        s108= findViewById(R.id.s108);
        sm108= findViewById(R.id.sm108);
        name109=findViewById(R.id.name109);
        point109=findViewById(R.id.point109);
        Section109=findViewById(R.id.Section109);
        target109=findViewById(R.id.target109);
        team109=findViewById(R.id.team109);
        location109=findViewById(R.id.location109);
        tmael109= findViewById(R.id.tmael109);
        date109= findViewById(R.id.date109);
        driver109= findViewById(R.id.driver109);
        comment109= findViewById(R.id.comment109);
        s109= findViewById(R.id.s109);
        sm109= findViewById(R.id.sm109);
        name110=findViewById(R.id.name110);
        point110=findViewById(R.id.point110);
        Section110=findViewById(R.id.Section110);
        target110=findViewById(R.id.target110);
        team110=findViewById(R.id.team110);
        location110=findViewById(R.id.location110);
        tmael110= findViewById(R.id.tmael110);
        date110= findViewById(R.id.date110);
        driver110= findViewById(R.id.driver110);
        comment110= findViewById(R.id.comment110);
        s110= findViewById(R.id.s110);
        sm110= findViewById(R.id.sm110);
        name111=findViewById(R.id.name111);
        point111=findViewById(R.id.point111);
        Section111=findViewById(R.id.Section111);
        target111=findViewById(R.id.target111);
        team111=findViewById(R.id.team111);
        location111=findViewById(R.id.location111);
        tmael111= findViewById(R.id.tmael111);
        date111= findViewById(R.id.date111);
        driver111= findViewById(R.id.driver111);
        comment111= findViewById(R.id.comment111);
        s111= findViewById(R.id.s111);
        sm111= findViewById(R.id.sm111);
        name112=findViewById(R.id.name112);
        point112=findViewById(R.id.point112);
        Section112=findViewById(R.id.Section112);
        target112=findViewById(R.id.target112);
        team112=findViewById(R.id.team112);
        location112=findViewById(R.id.location112);
        tmael112= findViewById(R.id.tmael112);
        date112= findViewById(R.id.date112);
        driver112= findViewById(R.id.driver112);
        comment112= findViewById(R.id.comment112);
        s112= findViewById(R.id.s112);
        sm112= findViewById(R.id.sm112);
        name113=findViewById(R.id.name113);
        point113=findViewById(R.id.point113);
        Section113=findViewById(R.id.Section113);
        target113=findViewById(R.id.target113);
        team113=findViewById(R.id.team113);
        location113=findViewById(R.id.location113);
        tmael113= findViewById(R.id.tmael113);
        date113= findViewById(R.id.date113);
        driver113= findViewById(R.id.driver113);
        comment113= findViewById(R.id.comment113);
        s113= findViewById(R.id.s113);
        sm113= findViewById(R.id.sm113);
        name114=findViewById(R.id.name114);
        point114=findViewById(R.id.point114);
        Section114=findViewById(R.id.Section114);
        target114=findViewById(R.id.target114);
        team114=findViewById(R.id.team114);
        location114=findViewById(R.id.location114);
        tmael114= findViewById(R.id.tmael114);
        date114= findViewById(R.id.date114);
        driver114= findViewById(R.id.driver114);
        comment114= findViewById(R.id.comment114);
        s114= findViewById(R.id.s114);
        sm114= findViewById(R.id.sm114);
        name115=findViewById(R.id.name115);
        point115=findViewById(R.id.point115);
        Section115=findViewById(R.id.Section115);
        target115=findViewById(R.id.target115);
        team115=findViewById(R.id.team115);
        location115=findViewById(R.id.location115);
        tmael115= findViewById(R.id.tmael115);
        date115= findViewById(R.id.date115);
        driver115= findViewById(R.id.driver115);
        comment115= findViewById(R.id.comment115);
        s115= findViewById(R.id.s115);
        sm115= findViewById(R.id.sm115);
        name116=findViewById(R.id.name116);
        point116=findViewById(R.id.point116);
        Section116=findViewById(R.id.Section116);
        target116=findViewById(R.id.target116);
        team116=findViewById(R.id.team116);
        location116=findViewById(R.id.location116);
        tmael116= findViewById(R.id.tmael116);
        date116= findViewById(R.id.date116);
        driver116= findViewById(R.id.driver116);
        comment116= findViewById(R.id.comment116);
        s116= findViewById(R.id.s116);
        sm116= findViewById(R.id.sm116);
        name117=findViewById(R.id.name117);
        point117=findViewById(R.id.point117);
        Section117=findViewById(R.id.Section117);
        target117=findViewById(R.id.target117);
        team117=findViewById(R.id.team117);
        location117=findViewById(R.id.location117);
        tmael117= findViewById(R.id.tmael117);
        date117= findViewById(R.id.date117);
        driver117= findViewById(R.id.driver117);
        comment117= findViewById(R.id.comment117);
        s117= findViewById(R.id.s117);
        sm117= findViewById(R.id.sm117);
        name118=findViewById(R.id.name118);
        point118=findViewById(R.id.point118);
        Section118=findViewById(R.id.Section118);
        target118=findViewById(R.id.target118);
        team118=findViewById(R.id.team118);
        location118=findViewById(R.id.location118);
        tmael118= findViewById(R.id.tmael118);
        date118= findViewById(R.id.date118);
        driver118= findViewById(R.id.driver118);
        comment118= findViewById(R.id.comment118);
        s118= findViewById(R.id.s118);
        sm118= findViewById(R.id.sm118);
        name119=findViewById(R.id.name119);
        point119=findViewById(R.id.point119);
        Section119=findViewById(R.id.Section119);
        target119=findViewById(R.id.target119);
        team119=findViewById(R.id.team119);
        location119=findViewById(R.id.location119);
        tmael119= findViewById(R.id.tmael119);
        date119= findViewById(R.id.date119);
        driver119= findViewById(R.id.driver119);
        comment119= findViewById(R.id.comment119);
        s119= findViewById(R.id.s119);
        sm119= findViewById(R.id.sm119);
        name120=findViewById(R.id.name120);
        point120=findViewById(R.id.point120);
        Section120=findViewById(R.id.Section120);
        target120=findViewById(R.id.target120);
        team120=findViewById(R.id.team120);
        location120=findViewById(R.id.location120);
        tmael120= findViewById(R.id.tmael120);
        date120= findViewById(R.id.date120);
        driver120= findViewById(R.id.driver120);
        comment120= findViewById(R.id.comment120);
        s120= findViewById(R.id.s120);
        sm120= findViewById(R.id.sm120);
        name121=findViewById(R.id.name121);
        point121=findViewById(R.id.point121);
        Section121=findViewById(R.id.Section121);
        target121=findViewById(R.id.target121);
        team121=findViewById(R.id.team121);
        location121=findViewById(R.id.location121);
        tmael121= findViewById(R.id.tmael121);
        date121= findViewById(R.id.date121);
        driver121= findViewById(R.id.driver121);
        comment121= findViewById(R.id.comment121);
        s121= findViewById(R.id.s121);
        sm121= findViewById(R.id.sm121);
        name122=findViewById(R.id.name122);
        point122=findViewById(R.id.point122);
        Section122=findViewById(R.id.Section122);
        target122=findViewById(R.id.target122);
        team122=findViewById(R.id.team122);
        location122=findViewById(R.id.location122);
        tmael122= findViewById(R.id.tmael122);
        date122= findViewById(R.id.date122);
        driver122= findViewById(R.id.driver122);
        comment122= findViewById(R.id.comment122);
        s122= findViewById(R.id.s122);
        sm122= findViewById(R.id.sm122);
        name123=findViewById(R.id.name123);
        point123=findViewById(R.id.point123);
        Section123=findViewById(R.id.Section123);
        target123=findViewById(R.id.target123);
        team123=findViewById(R.id.team123);
        location123=findViewById(R.id.location123);
        tmael123= findViewById(R.id.tmael123);
        date123= findViewById(R.id.date123);
        driver123= findViewById(R.id.driver123);
        comment123= findViewById(R.id.comment123);
        s123= findViewById(R.id.s123);
        sm123= findViewById(R.id.sm123);
        name124=findViewById(R.id.name124);
        point124=findViewById(R.id.point124);
        Section124=findViewById(R.id.Section124);
        target124=findViewById(R.id.target124);
        team124=findViewById(R.id.team124);
        location124=findViewById(R.id.location124);
        tmael124= findViewById(R.id.tmael124);
        date124= findViewById(R.id.date124);
        driver124= findViewById(R.id.driver124);
        comment124= findViewById(R.id.comment124);
        s124= findViewById(R.id.s124);
        sm124= findViewById(R.id.sm124);
        name125=findViewById(R.id.name125);
        point125=findViewById(R.id.point125);
        Section125=findViewById(R.id.Section125);
        target125=findViewById(R.id.target125);
        team125=findViewById(R.id.team125);
        location125=findViewById(R.id.location125);
        tmael125= findViewById(R.id.tmael125);
        date125= findViewById(R.id.date125);
        driver125= findViewById(R.id.driver125);
        comment125= findViewById(R.id.comment125);
        s125= findViewById(R.id.s125);
        sm125= findViewById(R.id.sm125);
        name126=findViewById(R.id.name126);
        point126=findViewById(R.id.point126);
        Section126=findViewById(R.id.Section126);
        target126=findViewById(R.id.target126);
        team126=findViewById(R.id.team126);
        location126=findViewById(R.id.location126);
        tmael126= findViewById(R.id.tmael126);
        date126= findViewById(R.id.date126);
        driver126= findViewById(R.id.driver126);
        comment126= findViewById(R.id.comment126);
        s126= findViewById(R.id.s126);
        sm126= findViewById(R.id.sm126);
        name127=findViewById(R.id.name127);
        point127=findViewById(R.id.point127);
        Section127=findViewById(R.id.Section127);
        target127=findViewById(R.id.target127);
        team127=findViewById(R.id.team127);
        location127=findViewById(R.id.location127);
        tmael127= findViewById(R.id.tmael127);
        date127= findViewById(R.id.date127);
        driver127= findViewById(R.id.driver127);
        comment127= findViewById(R.id.comment127);
        s127= findViewById(R.id.s127);
        sm127= findViewById(R.id.sm127);
        name128=findViewById(R.id.name128);
        point128=findViewById(R.id.point128);
        Section128=findViewById(R.id.Section128);
        target128=findViewById(R.id.target128);
        team128=findViewById(R.id.team128);
        location128=findViewById(R.id.location128);
        tmael128= findViewById(R.id.tmael128);
        date128= findViewById(R.id.date128);
        driver128= findViewById(R.id.driver128);
        comment128= findViewById(R.id.comment128);
        s128= findViewById(R.id.s128);
        sm128= findViewById(R.id.sm128);
        name129=findViewById(R.id.name129);
        point129=findViewById(R.id.point129);
        Section129=findViewById(R.id.Section129);
        target129=findViewById(R.id.target129);
        team129=findViewById(R.id.team129);
        location129=findViewById(R.id.location129);
        tmael129= findViewById(R.id.tmael129);
        date129= findViewById(R.id.date129);
        driver129= findViewById(R.id.driver129);
        comment129= findViewById(R.id.comment129);
        s129= findViewById(R.id.s129);
        sm129= findViewById(R.id.sm129);
        name130=findViewById(R.id.name130);
        point130=findViewById(R.id.point130);
        Section130=findViewById(R.id.Section130);
        target130=findViewById(R.id.target130);
        team130=findViewById(R.id.team130);
        location130=findViewById(R.id.location130);
        tmael130= findViewById(R.id.tmael130);
        date130= findViewById(R.id.date130);
        driver130= findViewById(R.id.driver130);
        comment130= findViewById(R.id.comment130);
        s130= findViewById(R.id.s130);
        sm130= findViewById(R.id.sm130);
        name131=findViewById(R.id.name131);
        point131=findViewById(R.id.point131);
        Section131=findViewById(R.id.Section131);
        target131=findViewById(R.id.target131);
        team131=findViewById(R.id.team131);
        location131=findViewById(R.id.location131);
        tmael131= findViewById(R.id.tmael131);
        date131= findViewById(R.id.date131);
        driver131= findViewById(R.id.driver131);
        comment131= findViewById(R.id.comment131);
        s131= findViewById(R.id.s131);
        sm131= findViewById(R.id.sm131);
        name132=findViewById(R.id.name132);
        point132=findViewById(R.id.point132);
        Section132=findViewById(R.id.Section132);
        target132=findViewById(R.id.target132);
        team132=findViewById(R.id.team132);
        location132=findViewById(R.id.location132);
        tmael132= findViewById(R.id.tmael132);
        date132= findViewById(R.id.date132);
        driver132= findViewById(R.id.driver132);
        comment132= findViewById(R.id.comment132);
        s132= findViewById(R.id.s132);
        sm132= findViewById(R.id.sm132);
        name133=findViewById(R.id.name133);
        point133=findViewById(R.id.point133);
        Section133=findViewById(R.id.Section133);
        target133=findViewById(R.id.target133);
        team133=findViewById(R.id.team133);
        location133=findViewById(R.id.location133);
        tmael133= findViewById(R.id.tmael133);
        date133= findViewById(R.id.date133);
        driver133= findViewById(R.id.driver133);
        comment133= findViewById(R.id.comment133);
        s133= findViewById(R.id.s133);
        sm133= findViewById(R.id.sm133);
        name134=findViewById(R.id.name134);
        point134=findViewById(R.id.point134);
        Section134=findViewById(R.id.Section134);
        target134=findViewById(R.id.target134);
        team134=findViewById(R.id.team134);
        location134=findViewById(R.id.location134);
        tmael134= findViewById(R.id.tmael134);
        date134= findViewById(R.id.date134);
        driver134= findViewById(R.id.driver134);
        comment134= findViewById(R.id.comment134);
        s134= findViewById(R.id.s134);
        sm134= findViewById(R.id.sm134);
        name135=findViewById(R.id.name135);
        point135=findViewById(R.id.point135);
        Section135=findViewById(R.id.Section135);
        target135=findViewById(R.id.target135);
        team135=findViewById(R.id.team135);
        location135=findViewById(R.id.location135);
        tmael135= findViewById(R.id.tmael135);
        date135= findViewById(R.id.date135);
        driver135= findViewById(R.id.driver135);
        comment135= findViewById(R.id.comment135);
        s135= findViewById(R.id.s135);
        sm135= findViewById(R.id.sm135);
        name136=findViewById(R.id.name136);
        point136=findViewById(R.id.point136);
        Section136=findViewById(R.id.Section136);
        target136=findViewById(R.id.target136);
        team136=findViewById(R.id.team136);
        location136=findViewById(R.id.location136);
        tmael136= findViewById(R.id.tmael136);
        date136= findViewById(R.id.date136);
        driver136= findViewById(R.id.driver136);
        comment136= findViewById(R.id.comment136);
        s136= findViewById(R.id.s136);
        sm136= findViewById(R.id.sm136);
        name137=findViewById(R.id.name137);
        point137=findViewById(R.id.point137);
        Section137=findViewById(R.id.Section137);
        target137=findViewById(R.id.target137);
        team137=findViewById(R.id.team137);
        location137=findViewById(R.id.location137);
        tmael137= findViewById(R.id.tmael137);
        date137= findViewById(R.id.date137);
        driver137= findViewById(R.id.driver137);
        comment137= findViewById(R.id.comment137);
        s137= findViewById(R.id.s137);
        sm137= findViewById(R.id.sm137);
        name138=findViewById(R.id.name138);
        point138=findViewById(R.id.point138);
        Section138=findViewById(R.id.Section138);
        target138=findViewById(R.id.target138);
        team138=findViewById(R.id.team138);
        location138=findViewById(R.id.location138);
        tmael138= findViewById(R.id.tmael138);
        date138= findViewById(R.id.date138);
        driver138= findViewById(R.id.driver138);
        comment138= findViewById(R.id.comment138);
        s138= findViewById(R.id.s138);
        sm138= findViewById(R.id.sm138);
        name139=findViewById(R.id.name139);
        point139=findViewById(R.id.point139);
        Section139=findViewById(R.id.Section139);
        target139=findViewById(R.id.target139);
        team139=findViewById(R.id.team139);
        location139=findViewById(R.id.location139);
        tmael139= findViewById(R.id.tmael139);
        date139= findViewById(R.id.date139);
        driver139= findViewById(R.id.driver139);
        comment139= findViewById(R.id.comment139);
        s139= findViewById(R.id.s139);
        sm139= findViewById(R.id.sm139);
        name140=findViewById(R.id.name140);
        point140=findViewById(R.id.point140);
        Section140=findViewById(R.id.Section140);
        target140=findViewById(R.id.target140);
        team140=findViewById(R.id.team140);
        location140=findViewById(R.id.location140);
        tmael140= findViewById(R.id.tmael140);
        date140= findViewById(R.id.date140);
        driver140= findViewById(R.id.driver140);
        comment140= findViewById(R.id.comment140);
        s140= findViewById(R.id.s140);
        sm140= findViewById(R.id.sm140);
        name141=findViewById(R.id.name141);
        point141=findViewById(R.id.point141);
        Section141=findViewById(R.id.Section141);
        target141=findViewById(R.id.target141);
        team141=findViewById(R.id.team141);
        location141=findViewById(R.id.location141);
        tmael141= findViewById(R.id.tmael141);
        date141= findViewById(R.id.date141);
        driver141= findViewById(R.id.driver141);
        comment141= findViewById(R.id.comment141);
        s141= findViewById(R.id.s141);
        sm141= findViewById(R.id.sm141);
        name142=findViewById(R.id.name142);
        point142=findViewById(R.id.point142);
        Section142=findViewById(R.id.Section142);
        target142=findViewById(R.id.target142);
        team142=findViewById(R.id.team142);
        location142=findViewById(R.id.location142);
        tmael142= findViewById(R.id.tmael142);
        date142= findViewById(R.id.date142);
        driver142= findViewById(R.id.driver142);
        comment142= findViewById(R.id.comment142);
        s142= findViewById(R.id.s142);
        sm142= findViewById(R.id.sm142);
        name143=findViewById(R.id.name143);
        point143=findViewById(R.id.point143);
        Section143=findViewById(R.id.Section143);
        target143=findViewById(R.id.target143);
        team143=findViewById(R.id.team143);
        location143=findViewById(R.id.location143);
        tmael143= findViewById(R.id.tmael143);
        date143= findViewById(R.id.date143);
        driver143= findViewById(R.id.driver143);
        comment143= findViewById(R.id.comment143);
        s143= findViewById(R.id.s143);
        sm143= findViewById(R.id.sm143);
        name144=findViewById(R.id.name144);
        point144=findViewById(R.id.point144);
        Section144=findViewById(R.id.Section144);
        target144=findViewById(R.id.target144);
        team144=findViewById(R.id.team144);
        location144=findViewById(R.id.location144);
        tmael144= findViewById(R.id.tmael144);
        date144= findViewById(R.id.date144);
        driver144= findViewById(R.id.driver144);
        comment144= findViewById(R.id.comment144);
        s144= findViewById(R.id.s144);
        sm144= findViewById(R.id.sm144);
        name145=findViewById(R.id.name145);
        point145=findViewById(R.id.point145);
        Section145=findViewById(R.id.Section145);
        target145=findViewById(R.id.target145);
        team145=findViewById(R.id.team145);
        location145=findViewById(R.id.location145);
        tmael145= findViewById(R.id.tmael145);
        date145= findViewById(R.id.date145);
        driver145= findViewById(R.id.driver145);
        comment145= findViewById(R.id.comment145);
        s145= findViewById(R.id.s145);
        sm145= findViewById(R.id.sm145);
        name146=findViewById(R.id.name146);
        point146=findViewById(R.id.point146);
        Section146=findViewById(R.id.Section146);
        target146=findViewById(R.id.target146);
        team146=findViewById(R.id.team146);
        location146=findViewById(R.id.location146);
        tmael146= findViewById(R.id.tmael146);
        date146= findViewById(R.id.date146);
        driver146= findViewById(R.id.driver146);
        comment146= findViewById(R.id.comment146);
        s146= findViewById(R.id.s146);
        sm146= findViewById(R.id.sm146);
        name147=findViewById(R.id.name147);
        point147=findViewById(R.id.point147);
        Section147=findViewById(R.id.Section147);
        target147=findViewById(R.id.target147);
        team147=findViewById(R.id.team147);
        location147=findViewById(R.id.location147);
        tmael147= findViewById(R.id.tmael147);
        date147= findViewById(R.id.date147);
        driver147= findViewById(R.id.driver147);
        comment147= findViewById(R.id.comment147);
        s147= findViewById(R.id.s147);
        sm147= findViewById(R.id.sm147);
        name148=findViewById(R.id.name148);
        point148=findViewById(R.id.point148);
        Section148=findViewById(R.id.Section148);
        target148=findViewById(R.id.target148);
        team148=findViewById(R.id.team148);
        location148=findViewById(R.id.location148);
        tmael148= findViewById(R.id.tmael148);
        date148= findViewById(R.id.date148);
        driver148= findViewById(R.id.driver148);
        comment148= findViewById(R.id.comment148);
        s148= findViewById(R.id.s148);
        sm148= findViewById(R.id.sm148);
        name149=findViewById(R.id.name149);
        point149=findViewById(R.id.point149);
        Section149=findViewById(R.id.Section149);
        target149=findViewById(R.id.target149);
        team149=findViewById(R.id.team149);
        location149=findViewById(R.id.location149);
        tmael149= findViewById(R.id.tmael149);
        date149= findViewById(R.id.date149);
        driver149= findViewById(R.id.driver149);
        comment149= findViewById(R.id.comment149);
        s149= findViewById(R.id.s149);
        sm149= findViewById(R.id.sm149);
        name150=findViewById(R.id.name150);
        point150=findViewById(R.id.point150);
        Section150=findViewById(R.id.Section150);
        target150=findViewById(R.id.target150);
        team150=findViewById(R.id.team150);
        location150=findViewById(R.id.location150);
        tmael150= findViewById(R.id.tmael150);
        date150= findViewById(R.id.date150);
        driver150= findViewById(R.id.driver150);
        comment150= findViewById(R.id.comment150);
        s150= findViewById(R.id.s150);
        sm150= findViewById(R.id.sm150);
        name151=findViewById(R.id.name151);
        point151=findViewById(R.id.point151);
        Section151=findViewById(R.id.Section151);
        target151=findViewById(R.id.target151);
        team151=findViewById(R.id.team151);
        location151=findViewById(R.id.location151);
        tmael151= findViewById(R.id.tmael151);
        date151= findViewById(R.id.date151);
        driver151= findViewById(R.id.driver151);
        comment151= findViewById(R.id.comment151);
        s151= findViewById(R.id.s151);
        sm151= findViewById(R.id.sm151);
        name152=findViewById(R.id.name152);
        point152=findViewById(R.id.point152);
        Section152=findViewById(R.id.Section152);
        target152=findViewById(R.id.target152);
        team152=findViewById(R.id.team152);
        location152=findViewById(R.id.location152);
        tmael152= findViewById(R.id.tmael152);
        date152= findViewById(R.id.date152);
        driver152= findViewById(R.id.driver152);
        comment152= findViewById(R.id.comment152);
        s152= findViewById(R.id.s152);
        sm152= findViewById(R.id.sm152);
        name153=findViewById(R.id.name153);
        point153=findViewById(R.id.point153);
        Section153=findViewById(R.id.Section153);
        target153=findViewById(R.id.target153);
        team153=findViewById(R.id.team153);
        location153=findViewById(R.id.location153);
        tmael153= findViewById(R.id.tmael153);
        date153= findViewById(R.id.date153);
        driver153= findViewById(R.id.driver153);
        comment153= findViewById(R.id.comment153);
        s153= findViewById(R.id.s153);
        sm153= findViewById(R.id.sm153);
        name154=findViewById(R.id.name154);
        point154=findViewById(R.id.point154);
        Section154=findViewById(R.id.Section154);
        target154=findViewById(R.id.target154);
        team154=findViewById(R.id.team154);
        location154=findViewById(R.id.location154);
        tmael154= findViewById(R.id.tmael154);
        date154= findViewById(R.id.date154);
        driver154= findViewById(R.id.driver154);
        comment154= findViewById(R.id.comment154);
        s154= findViewById(R.id.s154);
        sm154= findViewById(R.id.sm154);
        name155=findViewById(R.id.name155);
        point155=findViewById(R.id.point155);
        Section155=findViewById(R.id.Section155);
        target155=findViewById(R.id.target155);
        team155=findViewById(R.id.team155);
        location155=findViewById(R.id.location155);
        tmael155= findViewById(R.id.tmael155);
        date155= findViewById(R.id.date155);
        driver155= findViewById(R.id.driver155);
        comment155= findViewById(R.id.comment155);
        s155= findViewById(R.id.s155);
        sm155= findViewById(R.id.sm155);
        name156=findViewById(R.id.name156);
        point156=findViewById(R.id.point156);
        Section156=findViewById(R.id.Section156);
        target156=findViewById(R.id.target156);
        team156=findViewById(R.id.team156);
        location156=findViewById(R.id.location156);
        tmael156= findViewById(R.id.tmael156);
        date156= findViewById(R.id.date156);
        driver156= findViewById(R.id.driver156);
        comment156= findViewById(R.id.comment156);
        s156= findViewById(R.id.s156);
        sm156= findViewById(R.id.sm156);
        name157=findViewById(R.id.name157);
        point157=findViewById(R.id.point157);
        Section157=findViewById(R.id.Section157);
        target157=findViewById(R.id.target157);
        team157=findViewById(R.id.team157);
        location157=findViewById(R.id.location157);
        tmael157= findViewById(R.id.tmael157);
        date157= findViewById(R.id.date157);
        driver157= findViewById(R.id.driver157);
        comment157= findViewById(R.id.comment157);
        s157= findViewById(R.id.s157);
        sm157= findViewById(R.id.sm157);
        name158=findViewById(R.id.name158);
        point158=findViewById(R.id.point158);
        Section158=findViewById(R.id.Section158);
        target158=findViewById(R.id.target158);
        team158=findViewById(R.id.team158);
        location158=findViewById(R.id.location158);
        tmael158= findViewById(R.id.tmael158);
        date158= findViewById(R.id.date158);
        driver158= findViewById(R.id.driver158);
        comment158= findViewById(R.id.comment158);
        s158= findViewById(R.id.s158);
        sm158= findViewById(R.id.sm158);
        name159=findViewById(R.id.name159);
        point159=findViewById(R.id.point159);
        Section159=findViewById(R.id.Section159);
        target159=findViewById(R.id.target159);
        team159=findViewById(R.id.team159);
        location159=findViewById(R.id.location159);
        tmael159= findViewById(R.id.tmael159);
        date159= findViewById(R.id.date159);
        driver159= findViewById(R.id.driver159);
        comment159= findViewById(R.id.comment159);
        s159= findViewById(R.id.s159);
        sm159= findViewById(R.id.sm159);
        name160=findViewById(R.id.name160);
        point160=findViewById(R.id.point160);
        Section160=findViewById(R.id.Section160);
        target160=findViewById(R.id.target160);
        team160=findViewById(R.id.team160);
        location160=findViewById(R.id.location160);
        tmael160= findViewById(R.id.tmael160);
        date160= findViewById(R.id.date160);
        driver160= findViewById(R.id.driver160);
        comment160= findViewById(R.id.comment160);
        s160= findViewById(R.id.s160);
        sm160= findViewById(R.id.sm160);
        name161=findViewById(R.id.name161);
        point161=findViewById(R.id.point161);
        Section161=findViewById(R.id.Section161);
        target161=findViewById(R.id.target161);
        team161=findViewById(R.id.team161);
        location161=findViewById(R.id.location161);
        tmael161= findViewById(R.id.tmael161);
        date161= findViewById(R.id.date161);
        driver161= findViewById(R.id.driver161);
        comment161= findViewById(R.id.comment161);
        s161= findViewById(R.id.s161);
        sm161= findViewById(R.id.sm161);
        name162=findViewById(R.id.name162);
        point162=findViewById(R.id.point162);
        Section162=findViewById(R.id.Section162);
        target162=findViewById(R.id.target162);
        team162=findViewById(R.id.team162);
        location162=findViewById(R.id.location162);
        tmael162= findViewById(R.id.tmael162);
        date162= findViewById(R.id.date162);
        driver162= findViewById(R.id.driver162);
        comment162= findViewById(R.id.comment162);
        s162= findViewById(R.id.s162);
        sm162= findViewById(R.id.sm162);
        name163=findViewById(R.id.name163);
        point163=findViewById(R.id.point163);
        Section163=findViewById(R.id.Section163);
        target163=findViewById(R.id.target163);
        team163=findViewById(R.id.team163);
        location163=findViewById(R.id.location163);
        tmael163= findViewById(R.id.tmael163);
        date163= findViewById(R.id.date163);
        driver163= findViewById(R.id.driver163);
        comment163= findViewById(R.id.comment163);
        s163= findViewById(R.id.s163);
        sm163= findViewById(R.id.sm163);
        name164=findViewById(R.id.name164);
        point164=findViewById(R.id.point164);
        Section164=findViewById(R.id.Section164);
        target164=findViewById(R.id.target164);
        team164=findViewById(R.id.team164);
        location164=findViewById(R.id.location164);
        tmael164= findViewById(R.id.tmael164);
        date164= findViewById(R.id.date164);
        driver164= findViewById(R.id.driver164);
        comment164= findViewById(R.id.comment164);
        s164= findViewById(R.id.s164);
        sm164= findViewById(R.id.sm164);
        name165=findViewById(R.id.name165);
        point165=findViewById(R.id.point165);
        Section165=findViewById(R.id.Section165);
        target165=findViewById(R.id.target165);
        team165=findViewById(R.id.team165);
        location165=findViewById(R.id.location165);
        tmael165= findViewById(R.id.tmael165);
        date165= findViewById(R.id.date165);
        driver165= findViewById(R.id.driver165);
        comment165= findViewById(R.id.comment165);
        s165= findViewById(R.id.s165);
        sm165= findViewById(R.id.sm165);
        name166=findViewById(R.id.name166);
        point166=findViewById(R.id.point166);
        Section166=findViewById(R.id.Section166);
        target166=findViewById(R.id.target166);
        team166=findViewById(R.id.team166);
        location166=findViewById(R.id.location166);
        tmael166= findViewById(R.id.tmael166);
        date166= findViewById(R.id.date166);
        driver166= findViewById(R.id.driver166);
        comment166= findViewById(R.id.comment166);
        s166= findViewById(R.id.s166);
        sm166= findViewById(R.id.sm166);
        name167=findViewById(R.id.name167);
        point167=findViewById(R.id.point167);
        Section167=findViewById(R.id.Section167);
        target167=findViewById(R.id.target167);
        team167=findViewById(R.id.team167);
        location167=findViewById(R.id.location167);
        tmael167= findViewById(R.id.tmael167);
        date167= findViewById(R.id.date167);
        driver167= findViewById(R.id.driver167);
        comment167= findViewById(R.id.comment167);
        s167= findViewById(R.id.s167);
        sm167= findViewById(R.id.sm167);
        name168=findViewById(R.id.name168);
        point168=findViewById(R.id.point168);
        Section168=findViewById(R.id.Section168);
        target168=findViewById(R.id.target168);
        team168=findViewById(R.id.team168);
        location168=findViewById(R.id.location168);
        tmael168= findViewById(R.id.tmael168);
        date168= findViewById(R.id.date168);
        driver168= findViewById(R.id.driver168);
        comment168= findViewById(R.id.comment168);
        s168= findViewById(R.id.s168);
        sm168= findViewById(R.id.sm168);
        name169=findViewById(R.id.name169);
        point169=findViewById(R.id.point169);
        Section169=findViewById(R.id.Section169);
        target169=findViewById(R.id.target169);
        team169=findViewById(R.id.team169);
        location169=findViewById(R.id.location169);
        tmael169= findViewById(R.id.tmael169);
        date169= findViewById(R.id.date169);
        driver169= findViewById(R.id.driver169);
        comment169= findViewById(R.id.comment169);
        s169= findViewById(R.id.s169);
        sm169= findViewById(R.id.sm169);
        name170=findViewById(R.id.name170);
        point170=findViewById(R.id.point170);
        Section170=findViewById(R.id.Section170);
        target170=findViewById(R.id.target170);
        team170=findViewById(R.id.team170);
        location170=findViewById(R.id.location170);
        tmael170= findViewById(R.id.tmael170);
        date170= findViewById(R.id.date170);
        driver170= findViewById(R.id.driver170);
        comment170= findViewById(R.id.comment170);
        s170= findViewById(R.id.s170);
        sm170= findViewById(R.id.sm170);
        name171=findViewById(R.id.name171);
        point171=findViewById(R.id.point171);
        Section171=findViewById(R.id.Section171);
        target171=findViewById(R.id.target171);
        team171=findViewById(R.id.team171);
        location171=findViewById(R.id.location171);
        tmael171= findViewById(R.id.tmael171);
        date171= findViewById(R.id.date171);
        driver171= findViewById(R.id.driver171);
        comment171= findViewById(R.id.comment171);
        s171= findViewById(R.id.s171);
        sm171= findViewById(R.id.sm171);
        name172=findViewById(R.id.name172);
        point172=findViewById(R.id.point172);
        Section172=findViewById(R.id.Section172);
        target172=findViewById(R.id.target172);
        team172=findViewById(R.id.team172);
        location172=findViewById(R.id.location172);
        tmael172= findViewById(R.id.tmael172);
        date172= findViewById(R.id.date172);
        driver172= findViewById(R.id.driver172);
        comment172= findViewById(R.id.comment172);
        s172= findViewById(R.id.s172);
        sm172= findViewById(R.id.sm172);
        name173=findViewById(R.id.name173);
        point173=findViewById(R.id.point173);
        Section173=findViewById(R.id.Section173);
        target173=findViewById(R.id.target173);
        team173=findViewById(R.id.team173);
        location173=findViewById(R.id.location173);
        tmael173= findViewById(R.id.tmael173);
        date173= findViewById(R.id.date173);
        driver173= findViewById(R.id.driver173);
        comment173= findViewById(R.id.comment173);
        s173= findViewById(R.id.s173);
        sm173= findViewById(R.id.sm173);
        name174=findViewById(R.id.name174);
        point174=findViewById(R.id.point174);
        Section174=findViewById(R.id.Section174);
        target174=findViewById(R.id.target174);
        team174=findViewById(R.id.team174);
        location174=findViewById(R.id.location174);
        tmael174= findViewById(R.id.tmael174);
        date174= findViewById(R.id.date174);
        driver174= findViewById(R.id.driver174);
        comment174= findViewById(R.id.comment174);
        s174= findViewById(R.id.s174);
        sm174= findViewById(R.id.sm174);
        name175=findViewById(R.id.name175);
        point175=findViewById(R.id.point175);
        Section175=findViewById(R.id.Section175);
        target175=findViewById(R.id.target175);
        team175=findViewById(R.id.team175);
        location175=findViewById(R.id.location175);
        tmael175= findViewById(R.id.tmael175);
        date175= findViewById(R.id.date175);
        driver175= findViewById(R.id.driver175);
        comment175= findViewById(R.id.comment175);
        s175= findViewById(R.id.s175);
        sm175= findViewById(R.id.sm175);
        name176=findViewById(R.id.name176);
        point176=findViewById(R.id.point176);
        Section176=findViewById(R.id.Section176);
        target176=findViewById(R.id.target176);
        team176=findViewById(R.id.team176);
        location176=findViewById(R.id.location176);
        tmael176= findViewById(R.id.tmael176);
        date176= findViewById(R.id.date176);
        driver176= findViewById(R.id.driver176);
        comment176= findViewById(R.id.comment176);
        s176= findViewById(R.id.s176);
        sm176= findViewById(R.id.sm176);
        name177=findViewById(R.id.name177);
        point177=findViewById(R.id.point177);
        Section177=findViewById(R.id.Section177);
        target177=findViewById(R.id.target177);
        team177=findViewById(R.id.team177);
        location177=findViewById(R.id.location177);
        tmael177= findViewById(R.id.tmael177);
        date177= findViewById(R.id.date177);
        driver177= findViewById(R.id.driver177);
        comment177= findViewById(R.id.comment177);
        s177= findViewById(R.id.s177);
        sm177= findViewById(R.id.sm177);
        name178=findViewById(R.id.name178);
        point178=findViewById(R.id.point178);
        Section178=findViewById(R.id.Section178);
        target178=findViewById(R.id.target178);
        team178=findViewById(R.id.team178);
        location178=findViewById(R.id.location178);
        tmael178= findViewById(R.id.tmael178);
        date178= findViewById(R.id.date178);
        driver178= findViewById(R.id.driver178);
        comment178= findViewById(R.id.comment178);
        s178= findViewById(R.id.s178);
        sm178= findViewById(R.id.sm178);
        name179=findViewById(R.id.name179);
        point179=findViewById(R.id.point179);
        Section179=findViewById(R.id.Section179);
        target179=findViewById(R.id.target179);
        team179=findViewById(R.id.team179);
        location179=findViewById(R.id.location179);
        tmael179= findViewById(R.id.tmael179);
        date179= findViewById(R.id.date179);
        driver179= findViewById(R.id.driver179);
        comment179= findViewById(R.id.comment179);
        s179= findViewById(R.id.s179);
        sm179= findViewById(R.id.sm179);
        name180=findViewById(R.id.name180);
        point180=findViewById(R.id.point180);
        Section180=findViewById(R.id.Section180);
        target180=findViewById(R.id.target180);
        team180=findViewById(R.id.team180);
        location180=findViewById(R.id.location180);
        tmael180= findViewById(R.id.tmael180);
        date180= findViewById(R.id.date180);
        driver180= findViewById(R.id.driver180);
        comment180= findViewById(R.id.comment180);
        s180= findViewById(R.id.s180);
        sm180= findViewById(R.id.sm180);
        name181=findViewById(R.id.name181);
        point181=findViewById(R.id.point181);
        Section181=findViewById(R.id.Section181);
        target181=findViewById(R.id.target181);
        team181=findViewById(R.id.team181);
        location181=findViewById(R.id.location181);
        tmael181= findViewById(R.id.tmael181);
        date181= findViewById(R.id.date181);
        driver181= findViewById(R.id.driver181);
        comment181= findViewById(R.id.comment181);
        s181= findViewById(R.id.s181);
        sm181= findViewById(R.id.sm181);
        name182=findViewById(R.id.name182);
        point182=findViewById(R.id.point182);
        Section182=findViewById(R.id.Section182);
        target182=findViewById(R.id.target182);
        team182=findViewById(R.id.team182);
        location182=findViewById(R.id.location182);
        tmael182= findViewById(R.id.tmael182);
        date182= findViewById(R.id.date182);
        driver182= findViewById(R.id.driver182);
        comment182= findViewById(R.id.comment182);
        s182= findViewById(R.id.s182);
        sm182= findViewById(R.id.sm182);
        name183=findViewById(R.id.name183);
        point183=findViewById(R.id.point183);
        Section183=findViewById(R.id.Section183);
        target183=findViewById(R.id.target183);
        team183=findViewById(R.id.team183);
        location183=findViewById(R.id.location183);
        tmael183= findViewById(R.id.tmael183);
        date183= findViewById(R.id.date183);
        driver183= findViewById(R.id.driver183);
        comment183= findViewById(R.id.comment183);
        s183= findViewById(R.id.s183);
        sm183= findViewById(R.id.sm183);
        name184=findViewById(R.id.name184);
        point184=findViewById(R.id.point184);
        Section184=findViewById(R.id.Section184);
        target184=findViewById(R.id.target184);
        team184=findViewById(R.id.team184);
        location184=findViewById(R.id.location184);
        tmael184= findViewById(R.id.tmael184);
        date184= findViewById(R.id.date184);
        driver184= findViewById(R.id.driver184);
        comment184= findViewById(R.id.comment184);
        s184= findViewById(R.id.s184);
        sm184= findViewById(R.id.sm184);
        name185=findViewById(R.id.name185);
        point185=findViewById(R.id.point185);
        Section185=findViewById(R.id.Section185);
        target185=findViewById(R.id.target185);
        team185=findViewById(R.id.team185);
        location185=findViewById(R.id.location185);
        tmael185= findViewById(R.id.tmael185);
        date185= findViewById(R.id.date185);
        driver185= findViewById(R.id.driver185);
        comment185= findViewById(R.id.comment185);
        s185= findViewById(R.id.s185);
        sm185= findViewById(R.id.sm185);
        name186=findViewById(R.id.name186);
        point186=findViewById(R.id.point186);
        Section186=findViewById(R.id.Section186);
        target186=findViewById(R.id.target186);
        team186=findViewById(R.id.team186);
        location186=findViewById(R.id.location186);
        tmael186= findViewById(R.id.tmael186);
        date186= findViewById(R.id.date186);
        driver186= findViewById(R.id.driver186);
        comment186= findViewById(R.id.comment186);
        s186= findViewById(R.id.s186);
        sm186= findViewById(R.id.sm186);
        name187=findViewById(R.id.name187);
        point187=findViewById(R.id.point187);
        Section187=findViewById(R.id.Section187);
        target187=findViewById(R.id.target187);
        team187=findViewById(R.id.team187);
        location187=findViewById(R.id.location187);
        tmael187= findViewById(R.id.tmael187);
        date187= findViewById(R.id.date187);
        driver187= findViewById(R.id.driver187);
        comment187= findViewById(R.id.comment187);
        s187= findViewById(R.id.s187);
        sm187= findViewById(R.id.sm187);
        name188=findViewById(R.id.name188);
        point188=findViewById(R.id.point188);
        Section188=findViewById(R.id.Section188);
        target188=findViewById(R.id.target188);
        team188=findViewById(R.id.team188);
        location188=findViewById(R.id.location188);
        tmael188= findViewById(R.id.tmael188);
        date188= findViewById(R.id.date188);
        driver188= findViewById(R.id.driver188);
        comment188= findViewById(R.id.comment188);
        s188= findViewById(R.id.s188);
        sm188= findViewById(R.id.sm188);
        name189=findViewById(R.id.name189);
        point189=findViewById(R.id.point189);
        Section189=findViewById(R.id.Section189);
        target189=findViewById(R.id.target189);
        team189=findViewById(R.id.team189);
        location189=findViewById(R.id.location189);
        tmael189= findViewById(R.id.tmael189);
        date189= findViewById(R.id.date189);
        driver189= findViewById(R.id.driver189);
        comment189= findViewById(R.id.comment189);
        s189= findViewById(R.id.s189);
        sm189= findViewById(R.id.sm189);
        name190=findViewById(R.id.name190);
        point190=findViewById(R.id.point190);
        Section190=findViewById(R.id.Section190);
        target190=findViewById(R.id.target190);
        team190=findViewById(R.id.team190);
        location190=findViewById(R.id.location190);
        tmael190= findViewById(R.id.tmael190);
        date190= findViewById(R.id.date190);
        driver190= findViewById(R.id.driver190);
        comment190= findViewById(R.id.comment190);
        s190= findViewById(R.id.s190);
        sm190= findViewById(R.id.sm190);
        name191=findViewById(R.id.name191);
        point191=findViewById(R.id.point191);
        Section191=findViewById(R.id.Section191);
        target191=findViewById(R.id.target191);
        team191=findViewById(R.id.team191);
        location191=findViewById(R.id.location191);
        tmael191= findViewById(R.id.tmael191);
        date191= findViewById(R.id.date191);
        driver191= findViewById(R.id.driver191);
        comment191= findViewById(R.id.comment191);
        s191= findViewById(R.id.s191);
        sm191= findViewById(R.id.sm191);
        name192=findViewById(R.id.name192);
        point192=findViewById(R.id.point192);
        Section192=findViewById(R.id.Section192);
        target192=findViewById(R.id.target192);
        team192=findViewById(R.id.team192);
        location192=findViewById(R.id.location192);
        tmael192= findViewById(R.id.tmael192);
        date192= findViewById(R.id.date192);
        driver192= findViewById(R.id.driver192);
        comment192= findViewById(R.id.comment192);
        s192= findViewById(R.id.s192);
        sm192= findViewById(R.id.sm192);
        name193=findViewById(R.id.name193);
        point193=findViewById(R.id.point193);
        Section193=findViewById(R.id.Section193);
        target193=findViewById(R.id.target193);
        team193=findViewById(R.id.team193);
        location193=findViewById(R.id.location193);
        tmael193= findViewById(R.id.tmael193);
        date193= findViewById(R.id.date193);
        driver193= findViewById(R.id.driver193);
        comment193= findViewById(R.id.comment193);
        s193= findViewById(R.id.s193);
        sm193= findViewById(R.id.sm193);
        name194=findViewById(R.id.name194);
        point194=findViewById(R.id.point194);
        Section194=findViewById(R.id.Section194);
        target194=findViewById(R.id.target194);
        team194=findViewById(R.id.team194);
        location194=findViewById(R.id.location194);
        tmael194= findViewById(R.id.tmael194);
        date194= findViewById(R.id.date194);
        driver194= findViewById(R.id.driver194);
        comment194= findViewById(R.id.comment194);
        s194= findViewById(R.id.s194);
        sm194= findViewById(R.id.sm194);
        name195=findViewById(R.id.name195);
        point195=findViewById(R.id.point195);
        Section195=findViewById(R.id.Section195);
        target195=findViewById(R.id.target195);
        team195=findViewById(R.id.team195);
        location195=findViewById(R.id.location195);
        tmael195= findViewById(R.id.tmael195);
        date195= findViewById(R.id.date195);
        driver195= findViewById(R.id.driver195);
        comment195= findViewById(R.id.comment195);
        s195= findViewById(R.id.s195);
        sm195= findViewById(R.id.sm195);
        name196=findViewById(R.id.name196);
        point196=findViewById(R.id.point196);
        Section196=findViewById(R.id.Section196);
        target196=findViewById(R.id.target196);
        team196=findViewById(R.id.team196);
        location196=findViewById(R.id.location196);
        tmael196= findViewById(R.id.tmael196);
        date196= findViewById(R.id.date196);
        driver196= findViewById(R.id.driver196);
        comment196= findViewById(R.id.comment196);
        s196= findViewById(R.id.s196);
        sm196= findViewById(R.id.sm196);
        name197=findViewById(R.id.name197);
        point197=findViewById(R.id.point197);
        Section197=findViewById(R.id.Section197);
        target197=findViewById(R.id.target197);
        team197=findViewById(R.id.team197);
        location197=findViewById(R.id.location197);
        tmael197= findViewById(R.id.tmael197);
        date197= findViewById(R.id.date197);
        driver197= findViewById(R.id.driver197);
        comment197= findViewById(R.id.comment197);
        s197= findViewById(R.id.s197);
        sm197= findViewById(R.id.sm197);
        name198=findViewById(R.id.name198);
        point198=findViewById(R.id.point198);
        Section198=findViewById(R.id.Section198);
        target198=findViewById(R.id.target198);
        team198=findViewById(R.id.team198);
        location198=findViewById(R.id.location198);
        tmael198= findViewById(R.id.tmael198);
        date198= findViewById(R.id.date198);
        driver198= findViewById(R.id.driver198);
        comment198= findViewById(R.id.comment198);
        s198= findViewById(R.id.s198);
        sm198= findViewById(R.id.sm198);
        name199=findViewById(R.id.name199);
        point199=findViewById(R.id.point199);
        Section199=findViewById(R.id.Section199);
        target199=findViewById(R.id.target199);
        team199=findViewById(R.id.team199);
        location199=findViewById(R.id.location199);
        tmael199= findViewById(R.id.tmael199);
        date199= findViewById(R.id.date199);
        driver199= findViewById(R.id.driver199);
        comment199= findViewById(R.id.comment199);
        s199= findViewById(R.id.s199);
        sm199= findViewById(R.id.sm199);
        name200=findViewById(R.id.name200);
        point200=findViewById(R.id.point200);
        Section200=findViewById(R.id.Section200);
        target200=findViewById(R.id.target200);
        team200=findViewById(R.id.team200);
        location200=findViewById(R.id.location200);
        tmael200= findViewById(R.id.tmael200);
        date200= findViewById(R.id.date200);
        driver200= findViewById(R.id.driver200);
        comment200= findViewById(R.id.comment200);
        s200= findViewById(R.id.s200);
        sm200= findViewById(R.id.sm200);
        name201=findViewById(R.id.name201);
        point201=findViewById(R.id.point201);
        Section201=findViewById(R.id.Section201);
        target201=findViewById(R.id.target201);
        team201=findViewById(R.id.team201);
        location201=findViewById(R.id.location201);
        tmael201= findViewById(R.id.tmael201);
        date201= findViewById(R.id.date201);
        driver201= findViewById(R.id.driver201);
        comment201= findViewById(R.id.comment201);
        s201= findViewById(R.id.s201);
        sm201= findViewById(R.id.sm201);
        name202=findViewById(R.id.name202);
        point202=findViewById(R.id.point202);
        Section202=findViewById(R.id.Section202);
        target202=findViewById(R.id.target202);
        team202=findViewById(R.id.team202);
        location202=findViewById(R.id.location202);
        tmael202= findViewById(R.id.tmael202);
        date202= findViewById(R.id.date202);
        driver202= findViewById(R.id.driver202);
        comment202= findViewById(R.id.comment202);
        s202= findViewById(R.id.s202);
        sm202= findViewById(R.id.sm202);
        name203=findViewById(R.id.name203);
        point203=findViewById(R.id.point203);
        Section203=findViewById(R.id.Section203);
        target203=findViewById(R.id.target203);
        team203=findViewById(R.id.team203);
        location203=findViewById(R.id.location203);
        tmael203= findViewById(R.id.tmael203);
        date203= findViewById(R.id.date203);
        driver203= findViewById(R.id.driver203);
        comment203= findViewById(R.id.comment203);
        s203= findViewById(R.id.s203);
        sm203= findViewById(R.id.sm203);
        name204=findViewById(R.id.name204);
        point204=findViewById(R.id.point204);
        Section204=findViewById(R.id.Section204);
        target204=findViewById(R.id.target204);
        team204=findViewById(R.id.team204);
        location204=findViewById(R.id.location204);
        tmael204= findViewById(R.id.tmael204);
        date204= findViewById(R.id.date204);
        driver204= findViewById(R.id.driver204);
        comment204= findViewById(R.id.comment204);
        s204= findViewById(R.id.s204);
        sm204= findViewById(R.id.sm204);
        name205=findViewById(R.id.name205);
        point205=findViewById(R.id.point205);
        Section205=findViewById(R.id.Section205);
        target205=findViewById(R.id.target205);
        team205=findViewById(R.id.team205);
        location205=findViewById(R.id.location205);
        tmael205= findViewById(R.id.tmael205);
        date205= findViewById(R.id.date205);
        driver205= findViewById(R.id.driver205);
        comment205= findViewById(R.id.comment205);
        s205= findViewById(R.id.s205);
        sm205= findViewById(R.id.sm205);
        name206=findViewById(R.id.name206);
        point206=findViewById(R.id.point206);
        Section206=findViewById(R.id.Section206);
        target206=findViewById(R.id.target206);
        team206=findViewById(R.id.team206);
        location206=findViewById(R.id.location206);
        tmael206= findViewById(R.id.tmael206);
        date206= findViewById(R.id.date206);
        driver206= findViewById(R.id.driver206);
        comment206= findViewById(R.id.comment206);
        s206= findViewById(R.id.s206);
        sm206= findViewById(R.id.sm206);
        name207=findViewById(R.id.name207);
        point207=findViewById(R.id.point207);
        Section207=findViewById(R.id.Section207);
        target207=findViewById(R.id.target207);
        team207=findViewById(R.id.team207);
        location207=findViewById(R.id.location207);
        tmael207= findViewById(R.id.tmael207);
        date207= findViewById(R.id.date207);
        driver207= findViewById(R.id.driver207);
        comment207= findViewById(R.id.comment207);
        s207= findViewById(R.id.s207);
        sm207= findViewById(R.id.sm207);
        name208=findViewById(R.id.name208);
        point208=findViewById(R.id.point208);
        Section208=findViewById(R.id.Section208);
        target208=findViewById(R.id.target208);
        team208=findViewById(R.id.team208);
        location208=findViewById(R.id.location208);
        tmael208= findViewById(R.id.tmael208);
        date208= findViewById(R.id.date208);
        driver208= findViewById(R.id.driver208);
        comment208= findViewById(R.id.comment208);
        s208= findViewById(R.id.s208);
        sm208= findViewById(R.id.sm208);
        name209=findViewById(R.id.name209);
        point209=findViewById(R.id.point209);
        Section209=findViewById(R.id.Section209);
        target209=findViewById(R.id.target209);
        team209=findViewById(R.id.team209);
        location209=findViewById(R.id.location209);
        tmael209= findViewById(R.id.tmael209);
        date209= findViewById(R.id.date209);
        driver209= findViewById(R.id.driver209);
        comment209= findViewById(R.id.comment209);
        s209= findViewById(R.id.s209);
        sm209= findViewById(R.id.sm209);
        name210=findViewById(R.id.name210);
        point210=findViewById(R.id.point210);
        Section210=findViewById(R.id.Section210);
        target210=findViewById(R.id.target210);
        team210=findViewById(R.id.team210);
        location210=findViewById(R.id.location210);
        tmael210= findViewById(R.id.tmael210);
        date210= findViewById(R.id.date210);
        driver210= findViewById(R.id.driver210);
        comment210= findViewById(R.id.comment210);
        s210= findViewById(R.id.s210);
        sm210= findViewById(R.id.sm210);
        name211=findViewById(R.id.name211);
        point211=findViewById(R.id.point211);
        Section211=findViewById(R.id.Section211);
        target211=findViewById(R.id.target211);
        team211=findViewById(R.id.team211);
        location211=findViewById(R.id.location211);
        tmael211= findViewById(R.id.tmael211);
        date211= findViewById(R.id.date211);
        driver211= findViewById(R.id.driver211);
        comment211= findViewById(R.id.comment211);
        s211= findViewById(R.id.s211);
        sm211= findViewById(R.id.sm211);
        name212=findViewById(R.id.name212);
        point212=findViewById(R.id.point212);
        Section212=findViewById(R.id.Section212);
        target212=findViewById(R.id.target212);
        team212=findViewById(R.id.team212);
        location212=findViewById(R.id.location212);
        tmael212= findViewById(R.id.tmael212);
        date212= findViewById(R.id.date212);
        driver212= findViewById(R.id.driver212);
        comment212= findViewById(R.id.comment212);
        s212= findViewById(R.id.s212);
        sm212= findViewById(R.id.sm212);
        name213=findViewById(R.id.name213);
        point213=findViewById(R.id.point213);
        Section213=findViewById(R.id.Section213);
        target213=findViewById(R.id.target213);
        team213=findViewById(R.id.team213);
        location213=findViewById(R.id.location213);
        tmael213= findViewById(R.id.tmael213);
        date213= findViewById(R.id.date213);
        driver213= findViewById(R.id.driver213);
        comment213= findViewById(R.id.comment213);
        s213= findViewById(R.id.s213);
        sm213= findViewById(R.id.sm213);
        name214=findViewById(R.id.name214);
        point214=findViewById(R.id.point214);
        Section214=findViewById(R.id.Section214);
        target214=findViewById(R.id.target214);
        team214=findViewById(R.id.team214);
        location214=findViewById(R.id.location214);
        tmael214= findViewById(R.id.tmael214);
        date214= findViewById(R.id.date214);
        driver214= findViewById(R.id.driver214);
        comment214= findViewById(R.id.comment214);
        s214= findViewById(R.id.s214);
        sm214= findViewById(R.id.sm214);
        name215=findViewById(R.id.name215);
        point215=findViewById(R.id.point215);
        Section215=findViewById(R.id.Section215);
        target215=findViewById(R.id.target215);
        team215=findViewById(R.id.team215);
        location215=findViewById(R.id.location215);
        tmael215= findViewById(R.id.tmael215);
        date215= findViewById(R.id.date215);
        driver215= findViewById(R.id.driver215);
        comment215= findViewById(R.id.comment215);
        s215= findViewById(R.id.s215);
        sm215= findViewById(R.id.sm215);
        name216=findViewById(R.id.name216);
        point216=findViewById(R.id.point216);
        Section216=findViewById(R.id.Section216);
        target216=findViewById(R.id.target216);
        team216=findViewById(R.id.team216);
        location216=findViewById(R.id.location216);
        tmael216= findViewById(R.id.tmael216);
        date216= findViewById(R.id.date216);
        driver216= findViewById(R.id.driver216);
        comment216= findViewById(R.id.comment216);
        s216= findViewById(R.id.s216);
        sm216= findViewById(R.id.sm216);
        name217=findViewById(R.id.name217);
        point217=findViewById(R.id.point217);
        Section217=findViewById(R.id.Section217);
        target217=findViewById(R.id.target217);
        team217=findViewById(R.id.team217);
        location217=findViewById(R.id.location217);
        tmael217= findViewById(R.id.tmael217);
        date217= findViewById(R.id.date217);
        driver217= findViewById(R.id.driver217);
        comment217= findViewById(R.id.comment217);
        s217= findViewById(R.id.s217);
        sm217= findViewById(R.id.sm217);
        name218=findViewById(R.id.name218);
        point218=findViewById(R.id.point218);
        Section218=findViewById(R.id.Section218);
        target218=findViewById(R.id.target218);
        team218=findViewById(R.id.team218);
        location218=findViewById(R.id.location218);
        tmael218= findViewById(R.id.tmael218);
        date218= findViewById(R.id.date218);
        driver218= findViewById(R.id.driver218);
        comment218= findViewById(R.id.comment218);
        s218= findViewById(R.id.s218);
        sm218= findViewById(R.id.sm218);
        name219=findViewById(R.id.name219);
        point219=findViewById(R.id.point219);
        Section219=findViewById(R.id.Section219);
        target219=findViewById(R.id.target219);
        team219=findViewById(R.id.team219);
        location219=findViewById(R.id.location219);
        tmael219= findViewById(R.id.tmael219);
        date219= findViewById(R.id.date219);
        driver219= findViewById(R.id.driver219);
        comment219= findViewById(R.id.comment219);
        s219= findViewById(R.id.s219);
        sm219= findViewById(R.id.sm219);
        name220=findViewById(R.id.name220);
        point220=findViewById(R.id.point220);
        Section220=findViewById(R.id.Section220);
        target220=findViewById(R.id.target220);
        team220=findViewById(R.id.team220);
        location220=findViewById(R.id.location220);
        tmael220= findViewById(R.id.tmael220);
        date220= findViewById(R.id.date220);
        driver220= findViewById(R.id.driver220);
        comment220= findViewById(R.id.comment220);
        s220= findViewById(R.id.s220);
        sm220= findViewById(R.id.sm220);
        name221=findViewById(R.id.name221);
        point221=findViewById(R.id.point221);
        Section221=findViewById(R.id.Section221);
        target221=findViewById(R.id.target221);
        team221=findViewById(R.id.team221);
        location221=findViewById(R.id.location221);
        tmael221= findViewById(R.id.tmael221);
        date221= findViewById(R.id.date221);
        driver221= findViewById(R.id.driver221);
        comment221= findViewById(R.id.comment221);
        s221= findViewById(R.id.s221);
        sm221= findViewById(R.id.sm221);
        name222=findViewById(R.id.name222);
        point222=findViewById(R.id.point222);
        Section222=findViewById(R.id.Section222);
        target222=findViewById(R.id.target222);
        team222=findViewById(R.id.team222);
        location222=findViewById(R.id.location222);
        tmael222= findViewById(R.id.tmael222);
        date222= findViewById(R.id.date222);
        driver222= findViewById(R.id.driver222);
        comment222= findViewById(R.id.comment222);
        s222= findViewById(R.id.s222);
        sm222= findViewById(R.id.sm222);
        name223=findViewById(R.id.name223);
        point223=findViewById(R.id.point223);
        Section223=findViewById(R.id.Section223);
        target223=findViewById(R.id.target223);
        team223=findViewById(R.id.team223);
        location223=findViewById(R.id.location223);
        tmael223= findViewById(R.id.tmael223);
        date223= findViewById(R.id.date223);
        driver223= findViewById(R.id.driver223);
        comment223= findViewById(R.id.comment223);
        s223= findViewById(R.id.s223);
        sm223= findViewById(R.id.sm223);
        name224=findViewById(R.id.name224);
        point224=findViewById(R.id.point224);
        Section224=findViewById(R.id.Section224);
        target224=findViewById(R.id.target224);
        team224=findViewById(R.id.team224);
        location224=findViewById(R.id.location224);
        tmael224= findViewById(R.id.tmael224);
        date224= findViewById(R.id.date224);
        driver224= findViewById(R.id.driver224);
        comment224= findViewById(R.id.comment224);
        s224= findViewById(R.id.s224);
        sm224= findViewById(R.id.sm224);
        name225=findViewById(R.id.name225);
        point225=findViewById(R.id.point225);
        Section225=findViewById(R.id.Section225);
        target225=findViewById(R.id.target225);
        team225=findViewById(R.id.team225);
        location225=findViewById(R.id.location225);
        tmael225= findViewById(R.id.tmael225);
        date225= findViewById(R.id.date225);
        driver225= findViewById(R.id.driver225);
        comment225= findViewById(R.id.comment225);
        s225= findViewById(R.id.s225);
        sm225= findViewById(R.id.sm225);
        name226=findViewById(R.id.name226);
        point226=findViewById(R.id.point226);
        Section226=findViewById(R.id.Section226);
        target226=findViewById(R.id.target226);
        team226=findViewById(R.id.team226);
        location226=findViewById(R.id.location226);
        tmael226= findViewById(R.id.tmael226);
        date226= findViewById(R.id.date226);
        driver226= findViewById(R.id.driver226);
        comment226= findViewById(R.id.comment226);
        s226= findViewById(R.id.s226);
        sm226= findViewById(R.id.sm226);
        name227=findViewById(R.id.name227);
        point227=findViewById(R.id.point227);
        Section227=findViewById(R.id.Section227);
        target227=findViewById(R.id.target227);
        team227=findViewById(R.id.team227);
        location227=findViewById(R.id.location227);
        tmael227= findViewById(R.id.tmael227);
        date227= findViewById(R.id.date227);
        driver227= findViewById(R.id.driver227);
        comment227= findViewById(R.id.comment227);
        s227= findViewById(R.id.s227);
        sm227= findViewById(R.id.sm227);
        name228=findViewById(R.id.name228);
        point228=findViewById(R.id.point228);
        Section228=findViewById(R.id.Section228);
        target228=findViewById(R.id.target228);
        team228=findViewById(R.id.team228);
        location228=findViewById(R.id.location228);
        tmael228= findViewById(R.id.tmael228);
        date228= findViewById(R.id.date228);
        driver228= findViewById(R.id.driver228);
        comment228= findViewById(R.id.comment228);
        s228= findViewById(R.id.s228);
        sm228= findViewById(R.id.sm228);
        name229=findViewById(R.id.name229);
        point229=findViewById(R.id.point229);
        Section229=findViewById(R.id.Section229);
        target229=findViewById(R.id.target229);
        team229=findViewById(R.id.team229);
        location229=findViewById(R.id.location229);
        tmael229= findViewById(R.id.tmael229);
        date229= findViewById(R.id.date229);
        driver229= findViewById(R.id.driver229);
        comment229= findViewById(R.id.comment229);
        s229= findViewById(R.id.s229);
        sm229= findViewById(R.id.sm229);
        name230=findViewById(R.id.name230);
        point230=findViewById(R.id.point230);
        Section230=findViewById(R.id.Section230);
        target230=findViewById(R.id.target230);
        team230=findViewById(R.id.team230);
        location230=findViewById(R.id.location230);
        tmael230= findViewById(R.id.tmael230);
        date230= findViewById(R.id.date230);
        driver230= findViewById(R.id.driver230);
        comment230= findViewById(R.id.comment230);
        s230= findViewById(R.id.s230);
        sm230= findViewById(R.id.sm230);
        name231=findViewById(R.id.name231);
        point231=findViewById(R.id.point231);
        Section231=findViewById(R.id.Section231);
        target231=findViewById(R.id.target231);
        team231=findViewById(R.id.team231);
        location231=findViewById(R.id.location231);
        tmael231= findViewById(R.id.tmael231);
        date231= findViewById(R.id.date231);
        driver231= findViewById(R.id.driver231);
        comment231= findViewById(R.id.comment231);
        s231= findViewById(R.id.s231);
        sm231= findViewById(R.id.sm231);
        name232=findViewById(R.id.name232);
        point232=findViewById(R.id.point232);
        Section232=findViewById(R.id.Section232);
        target232=findViewById(R.id.target232);
        team232=findViewById(R.id.team232);
        location232=findViewById(R.id.location232);
        tmael232= findViewById(R.id.tmael232);
        date232= findViewById(R.id.date232);
        driver232= findViewById(R.id.driver232);
        comment232= findViewById(R.id.comment232);
        s232= findViewById(R.id.s232);
        sm232= findViewById(R.id.sm232);
        name233=findViewById(R.id.name233);
        point233=findViewById(R.id.point233);
        Section233=findViewById(R.id.Section233);
        target233=findViewById(R.id.target233);
        team233=findViewById(R.id.team233);
        location233=findViewById(R.id.location233);
        tmael233= findViewById(R.id.tmael233);
        date233= findViewById(R.id.date233);
        driver233= findViewById(R.id.driver233);
        comment233= findViewById(R.id.comment233);
        s233= findViewById(R.id.s233);
        sm233= findViewById(R.id.sm233);
        name234=findViewById(R.id.name234);
        point234=findViewById(R.id.point234);
        Section234=findViewById(R.id.Section234);
        target234=findViewById(R.id.target234);
        team234=findViewById(R.id.team234);
        location234=findViewById(R.id.location234);
        tmael234= findViewById(R.id.tmael234);
        date234= findViewById(R.id.date234);
        driver234= findViewById(R.id.driver234);
        comment234= findViewById(R.id.comment234);
        s234= findViewById(R.id.s234);
        sm234= findViewById(R.id.sm234);
        name235=findViewById(R.id.name235);
        point235=findViewById(R.id.point235);
        Section235=findViewById(R.id.Section235);
        target235=findViewById(R.id.target235);
        team235=findViewById(R.id.team235);
        location235=findViewById(R.id.location235);
        tmael235= findViewById(R.id.tmael235);
        date235= findViewById(R.id.date235);
        driver235= findViewById(R.id.driver235);
        comment235= findViewById(R.id.comment235);
        s235= findViewById(R.id.s235);
        sm235= findViewById(R.id.sm235);
        name236=findViewById(R.id.name236);
        point236=findViewById(R.id.point236);
        Section236=findViewById(R.id.Section236);
        target236=findViewById(R.id.target236);
        team236=findViewById(R.id.team236);
        location236=findViewById(R.id.location236);
        tmael236= findViewById(R.id.tmael236);
        date236= findViewById(R.id.date236);
        driver236= findViewById(R.id.driver236);
        comment236= findViewById(R.id.comment236);
        s236= findViewById(R.id.s236);
        sm236= findViewById(R.id.sm236);
        name237=findViewById(R.id.name237);
        point237=findViewById(R.id.point237);
        Section237=findViewById(R.id.Section237);
        target237=findViewById(R.id.target237);
        team237=findViewById(R.id.team237);
        location237=findViewById(R.id.location237);
        tmael237= findViewById(R.id.tmael237);
        date237= findViewById(R.id.date237);
        driver237= findViewById(R.id.driver237);
        comment237= findViewById(R.id.comment237);
        s237= findViewById(R.id.s237);
        sm237= findViewById(R.id.sm237);
        name238=findViewById(R.id.name238);
        point238=findViewById(R.id.point238);
        Section238=findViewById(R.id.Section238);
        target238=findViewById(R.id.target238);
        team238=findViewById(R.id.team238);
        location238=findViewById(R.id.location238);
        tmael238= findViewById(R.id.tmael238);
        date238= findViewById(R.id.date238);
        driver238= findViewById(R.id.driver238);
        comment238= findViewById(R.id.comment238);
        s238= findViewById(R.id.s238);
        sm238= findViewById(R.id.sm238);
        name239=findViewById(R.id.name239);
        point239=findViewById(R.id.point239);
        Section239=findViewById(R.id.Section239);
        target239=findViewById(R.id.target239);
        team239=findViewById(R.id.team239);
        location239=findViewById(R.id.location239);
        tmael239= findViewById(R.id.tmael239);
        date239= findViewById(R.id.date239);
        driver239= findViewById(R.id.driver239);
        comment239= findViewById(R.id.comment239);
        s239= findViewById(R.id.s239);
        sm239= findViewById(R.id.sm239);
        name240=findViewById(R.id.name240);
        point240=findViewById(R.id.point240);
        Section240=findViewById(R.id.Section240);
        target240=findViewById(R.id.target240);
        team240=findViewById(R.id.team240);
        location240=findViewById(R.id.location240);
        tmael240= findViewById(R.id.tmael240);
        date240= findViewById(R.id.date240);
        driver240= findViewById(R.id.driver240);
        comment240= findViewById(R.id.comment240);
        s240= findViewById(R.id.s240);
        sm240= findViewById(R.id.sm240);
        name241=findViewById(R.id.name241);
        point241=findViewById(R.id.point241);
        Section241=findViewById(R.id.Section241);
        target241=findViewById(R.id.target241);
        team241=findViewById(R.id.team241);
        location241=findViewById(R.id.location241);
        tmael241= findViewById(R.id.tmael241);
        date241= findViewById(R.id.date241);
        driver241= findViewById(R.id.driver241);
        comment241= findViewById(R.id.comment241);
        s241= findViewById(R.id.s241);
        sm241= findViewById(R.id.sm241);
        name242=findViewById(R.id.name242);
        point242=findViewById(R.id.point242);
        Section242=findViewById(R.id.Section242);
        target242=findViewById(R.id.target242);
        team242=findViewById(R.id.team242);
        location242=findViewById(R.id.location242);
        tmael242= findViewById(R.id.tmael242);
        date242= findViewById(R.id.date242);
        driver242= findViewById(R.id.driver242);
        comment242= findViewById(R.id.comment242);
        s242= findViewById(R.id.s242);
        sm242= findViewById(R.id.sm242);
        name243=findViewById(R.id.name243);
        point243=findViewById(R.id.point243);
        Section243=findViewById(R.id.Section243);
        target243=findViewById(R.id.target243);
        team243=findViewById(R.id.team243);
        location243=findViewById(R.id.location243);
        tmael243= findViewById(R.id.tmael243);
        date243= findViewById(R.id.date243);
        driver243= findViewById(R.id.driver243);
        comment243= findViewById(R.id.comment243);
        s243= findViewById(R.id.s243);
        sm243= findViewById(R.id.sm243);
        name244=findViewById(R.id.name244);
        point244=findViewById(R.id.point244);
        Section244=findViewById(R.id.Section244);
        target244=findViewById(R.id.target244);
        team244=findViewById(R.id.team244);
        location244=findViewById(R.id.location244);
        tmael244= findViewById(R.id.tmael244);
        date244= findViewById(R.id.date244);
        driver244= findViewById(R.id.driver244);
        comment244= findViewById(R.id.comment244);
        s244= findViewById(R.id.s244);
        sm244= findViewById(R.id.sm244);
        name245=findViewById(R.id.name245);
        point245=findViewById(R.id.point245);
        Section245=findViewById(R.id.Section245);
        target245=findViewById(R.id.target245);
        team245=findViewById(R.id.team245);
        location245=findViewById(R.id.location245);
        tmael245= findViewById(R.id.tmael245);
        date245= findViewById(R.id.date245);
        driver245= findViewById(R.id.driver245);
        comment245= findViewById(R.id.comment245);
        s245= findViewById(R.id.s245);
        sm245= findViewById(R.id.sm245);
        name246=findViewById(R.id.name246);
        point246=findViewById(R.id.point246);
        Section246=findViewById(R.id.Section246);
        target246=findViewById(R.id.target246);
        team246=findViewById(R.id.team246);
        location246=findViewById(R.id.location246);
        tmael246= findViewById(R.id.tmael246);
        date246= findViewById(R.id.date246);
        driver246= findViewById(R.id.driver246);
        comment246= findViewById(R.id.comment246);
        s246= findViewById(R.id.s246);
        sm246= findViewById(R.id.sm246);
        name247=findViewById(R.id.name247);
        point247=findViewById(R.id.point247);
        Section247=findViewById(R.id.Section247);
        target247=findViewById(R.id.target247);
        team247=findViewById(R.id.team247);
        location247=findViewById(R.id.location247);
        tmael247= findViewById(R.id.tmael247);
        date247= findViewById(R.id.date247);
        driver247= findViewById(R.id.driver247);
        comment247= findViewById(R.id.comment247);
        s247= findViewById(R.id.s247);
        sm247= findViewById(R.id.sm247);
        name248=findViewById(R.id.name248);
        point248=findViewById(R.id.point248);
        Section248=findViewById(R.id.Section248);
        target248=findViewById(R.id.target248);
        team248=findViewById(R.id.team248);
        location248=findViewById(R.id.location248);
        tmael248= findViewById(R.id.tmael248);
        date248= findViewById(R.id.date248);
        driver248= findViewById(R.id.driver248);
        comment248= findViewById(R.id.comment248);
        s248= findViewById(R.id.s248);
        sm248= findViewById(R.id.sm248);
        name249=findViewById(R.id.name249);
        point249=findViewById(R.id.point249);
        Section249=findViewById(R.id.Section249);
        target249=findViewById(R.id.target249);
        team249=findViewById(R.id.team249);
        location249=findViewById(R.id.location249);
        tmael249= findViewById(R.id.tmael249);
        date249= findViewById(R.id.date249);
        driver249= findViewById(R.id.driver249);
        comment249= findViewById(R.id.comment249);
        s249= findViewById(R.id.s249);
        sm249= findViewById(R.id.sm249);
        name250=findViewById(R.id.name250);
        point250=findViewById(R.id.point250);
        Section250=findViewById(R.id.Section250);
        target250=findViewById(R.id.target250);
        team250=findViewById(R.id.team250);
        location250=findViewById(R.id.location250);
        tmael250= findViewById(R.id.tmael250);
        date250= findViewById(R.id.date250);
        driver250= findViewById(R.id.driver250);
        comment250= findViewById(R.id.comment250);
        s250= findViewById(R.id.s250);
        sm250= findViewById(R.id.sm250);
        name251=findViewById(R.id.name251);
        point251=findViewById(R.id.point251);
        Section251=findViewById(R.id.Section251);
        target251=findViewById(R.id.target251);
        team251=findViewById(R.id.team251);
        location251=findViewById(R.id.location251);
        tmael251= findViewById(R.id.tmael251);
        date251= findViewById(R.id.date251);
        driver251= findViewById(R.id.driver251);
        comment251= findViewById(R.id.comment251);
        s251= findViewById(R.id.s251);
        sm251= findViewById(R.id.sm251);
        name252=findViewById(R.id.name252);
        point252=findViewById(R.id.point252);
        Section252=findViewById(R.id.Section252);
        target252=findViewById(R.id.target252);
        team252=findViewById(R.id.team252);
        location252=findViewById(R.id.location252);
        tmael252= findViewById(R.id.tmael252);
        date252= findViewById(R.id.date252);
        driver252= findViewById(R.id.driver252);
        comment252= findViewById(R.id.comment252);
        s252= findViewById(R.id.s252);
        sm252= findViewById(R.id.sm252);
        name253=findViewById(R.id.name253);
        point253=findViewById(R.id.point253);
        Section253=findViewById(R.id.Section253);
        target253=findViewById(R.id.target253);
        team253=findViewById(R.id.team253);
        location253=findViewById(R.id.location253);
        tmael253= findViewById(R.id.tmael253);
        date253= findViewById(R.id.date253);
        driver253= findViewById(R.id.driver253);
        comment253= findViewById(R.id.comment253);
        s253= findViewById(R.id.s253);
        sm253= findViewById(R.id.sm253);
        name254=findViewById(R.id.name254);
        point254=findViewById(R.id.point254);
        Section254=findViewById(R.id.Section254);
        target254=findViewById(R.id.target254);
        team254=findViewById(R.id.team254);
        location254=findViewById(R.id.location254);
        tmael254= findViewById(R.id.tmael254);
        date254= findViewById(R.id.date254);
        driver254= findViewById(R.id.driver254);
        comment254= findViewById(R.id.comment254);
        s254= findViewById(R.id.s254);
        sm254= findViewById(R.id.sm254);
        name255=findViewById(R.id.name255);
        point255=findViewById(R.id.point255);
        Section255=findViewById(R.id.Section255);
        target255=findViewById(R.id.target255);
        team255=findViewById(R.id.team255);
        location255=findViewById(R.id.location255);
        tmael255= findViewById(R.id.tmael255);
        date255= findViewById(R.id.date255);
        driver255= findViewById(R.id.driver255);
        comment255= findViewById(R.id.comment255);
        s255= findViewById(R.id.s255);
        sm255= findViewById(R.id.sm255);
        name256=findViewById(R.id.name256);
        point256=findViewById(R.id.point256);
        Section256=findViewById(R.id.Section256);
        target256=findViewById(R.id.target256);
        team256=findViewById(R.id.team256);
        location256=findViewById(R.id.location256);
        tmael256= findViewById(R.id.tmael256);
        date256= findViewById(R.id.date256);
        driver256= findViewById(R.id.driver256);
        comment256= findViewById(R.id.comment256);
        s256= findViewById(R.id.s256);
        sm256= findViewById(R.id.sm256);
        name257=findViewById(R.id.name257);
        point257=findViewById(R.id.point257);
        Section257=findViewById(R.id.Section257);
        target257=findViewById(R.id.target257);
        team257=findViewById(R.id.team257);
        location257=findViewById(R.id.location257);
        tmael257= findViewById(R.id.tmael257);
        date257= findViewById(R.id.date257);
        driver257= findViewById(R.id.driver257);
        comment257= findViewById(R.id.comment257);
        s257= findViewById(R.id.s257);
        sm257= findViewById(R.id.sm257);
        name258=findViewById(R.id.name258);
        point258=findViewById(R.id.point258);
        Section258=findViewById(R.id.Section258);
        target258=findViewById(R.id.target258);
        team258=findViewById(R.id.team258);
        location258=findViewById(R.id.location258);
        tmael258= findViewById(R.id.tmael258);
        date258= findViewById(R.id.date258);
        driver258= findViewById(R.id.driver258);
        comment258= findViewById(R.id.comment258);
        s258= findViewById(R.id.s258);
        sm258= findViewById(R.id.sm258);
        name259=findViewById(R.id.name259);
        point259=findViewById(R.id.point259);
        Section259=findViewById(R.id.Section259);
        target259=findViewById(R.id.target259);
        team259=findViewById(R.id.team259);
        location259=findViewById(R.id.location259);
        tmael259= findViewById(R.id.tmael259);
        date259= findViewById(R.id.date259);
        driver259= findViewById(R.id.driver259);
        comment259= findViewById(R.id.comment259);
        s259= findViewById(R.id.s259);
        sm259= findViewById(R.id.sm259);
        name260=findViewById(R.id.name260);
        point260=findViewById(R.id.point260);
        Section260=findViewById(R.id.Section260);
        target260=findViewById(R.id.target260);
        team260=findViewById(R.id.team260);
        location260=findViewById(R.id.location260);
        tmael260= findViewById(R.id.tmael260);
        date260= findViewById(R.id.date260);
        driver260= findViewById(R.id.driver260);
        comment260= findViewById(R.id.comment260);
        s260= findViewById(R.id.s260);
        sm260= findViewById(R.id.sm260);
        name261=findViewById(R.id.name261);
        point261=findViewById(R.id.point261);
        Section261=findViewById(R.id.Section261);
        target261=findViewById(R.id.target261);
        team261=findViewById(R.id.team261);
        location261=findViewById(R.id.location261);
        tmael261= findViewById(R.id.tmael261);
        date261= findViewById(R.id.date261);
        driver261= findViewById(R.id.driver261);
        comment261= findViewById(R.id.comment261);
        s261= findViewById(R.id.s261);
        sm261= findViewById(R.id.sm261);
        name262=findViewById(R.id.name262);
        point262=findViewById(R.id.point262);
        Section262=findViewById(R.id.Section262);
        target262=findViewById(R.id.target262);
        team262=findViewById(R.id.team262);
        location262=findViewById(R.id.location262);
        tmael262= findViewById(R.id.tmael262);
        date262= findViewById(R.id.date262);
        driver262= findViewById(R.id.driver262);
        comment262= findViewById(R.id.comment262);
        s262= findViewById(R.id.s262);
        sm262= findViewById(R.id.sm262);
        name263=findViewById(R.id.name263);
        point263=findViewById(R.id.point263);
        Section263=findViewById(R.id.Section263);
        target263=findViewById(R.id.target263);
        team263=findViewById(R.id.team263);
        location263=findViewById(R.id.location263);
        tmael263= findViewById(R.id.tmael263);
        date263= findViewById(R.id.date263);
        driver263= findViewById(R.id.driver263);
        comment263= findViewById(R.id.comment263);
        s263= findViewById(R.id.s263);
        sm263= findViewById(R.id.sm263);
        name264=findViewById(R.id.name264);
        point264=findViewById(R.id.point264);
        Section264=findViewById(R.id.Section264);
        target264=findViewById(R.id.target264);
        team264=findViewById(R.id.team264);
        location264=findViewById(R.id.location264);
        tmael264= findViewById(R.id.tmael264);
        date264= findViewById(R.id.date264);
        driver264= findViewById(R.id.driver264);
        comment264= findViewById(R.id.comment264);
        s264= findViewById(R.id.s264);
        sm264= findViewById(R.id.sm264);
        name265=findViewById(R.id.name265);
        point265=findViewById(R.id.point265);
        Section265=findViewById(R.id.Section265);
        target265=findViewById(R.id.target265);
        team265=findViewById(R.id.team265);
        location265=findViewById(R.id.location265);
        tmael265= findViewById(R.id.tmael265);
        date265= findViewById(R.id.date265);
        driver265= findViewById(R.id.driver265);
        comment265= findViewById(R.id.comment265);
        s265= findViewById(R.id.s265);
        sm265= findViewById(R.id.sm265);
        name266=findViewById(R.id.name266);
        point266=findViewById(R.id.point266);
        Section266=findViewById(R.id.Section266);
        target266=findViewById(R.id.target266);
        team266=findViewById(R.id.team266);
        location266=findViewById(R.id.location266);
        tmael266= findViewById(R.id.tmael266);
        date266= findViewById(R.id.date266);
        driver266= findViewById(R.id.driver266);
        comment266= findViewById(R.id.comment266);
        s266= findViewById(R.id.s266);
        sm266= findViewById(R.id.sm266);
        name267=findViewById(R.id.name267);
        point267=findViewById(R.id.point267);
        Section267=findViewById(R.id.Section267);
        target267=findViewById(R.id.target267);
        team267=findViewById(R.id.team267);
        location267=findViewById(R.id.location267);
        tmael267= findViewById(R.id.tmael267);
        date267= findViewById(R.id.date267);
        driver267= findViewById(R.id.driver267);
        comment267= findViewById(R.id.comment267);
        s267= findViewById(R.id.s267);
        sm267= findViewById(R.id.sm267);
        name268=findViewById(R.id.name268);
        point268=findViewById(R.id.point268);
        Section268=findViewById(R.id.Section268);
        target268=findViewById(R.id.target268);
        team268=findViewById(R.id.team268);
        location268=findViewById(R.id.location268);
        tmael268= findViewById(R.id.tmael268);
        date268= findViewById(R.id.date268);
        driver268= findViewById(R.id.driver268);
        comment268= findViewById(R.id.comment268);
        s268= findViewById(R.id.s268);
        sm268= findViewById(R.id.sm268);
        name269=findViewById(R.id.name269);
        point269=findViewById(R.id.point269);
        Section269=findViewById(R.id.Section269);
        target269=findViewById(R.id.target269);
        team269=findViewById(R.id.team269);
        location269=findViewById(R.id.location269);
        tmael269= findViewById(R.id.tmael269);
        date269= findViewById(R.id.date269);
        driver269= findViewById(R.id.driver269);
        comment269= findViewById(R.id.comment269);
        s269= findViewById(R.id.s269);
        sm269= findViewById(R.id.sm269);
        name270=findViewById(R.id.name270);
        point270=findViewById(R.id.point270);
        Section270=findViewById(R.id.Section270);
        target270=findViewById(R.id.target270);
        team270=findViewById(R.id.team270);
        location270=findViewById(R.id.location270);
        tmael270= findViewById(R.id.tmael270);
        date270= findViewById(R.id.date270);
        driver270= findViewById(R.id.driver270);
        comment270= findViewById(R.id.comment270);
        s270= findViewById(R.id.s270);
        sm270= findViewById(R.id.sm270);
        name271=findViewById(R.id.name271);
        point271=findViewById(R.id.point271);
        Section271=findViewById(R.id.Section271);
        target271=findViewById(R.id.target271);
        team271=findViewById(R.id.team271);
        location271=findViewById(R.id.location271);
        tmael271= findViewById(R.id.tmael271);
        date271= findViewById(R.id.date271);
        driver271= findViewById(R.id.driver271);
        comment271= findViewById(R.id.comment271);
        s271= findViewById(R.id.s271);
        sm271= findViewById(R.id.sm271);
        name272=findViewById(R.id.name272);
        point272=findViewById(R.id.point272);
        Section272=findViewById(R.id.Section272);
        target272=findViewById(R.id.target272);
        team272=findViewById(R.id.team272);
        location272=findViewById(R.id.location272);
        tmael272= findViewById(R.id.tmael272);
        date272= findViewById(R.id.date272);
        driver272= findViewById(R.id.driver272);
        comment272= findViewById(R.id.comment272);
        s272= findViewById(R.id.s272);
        sm272= findViewById(R.id.sm272);
        name273=findViewById(R.id.name273);
        point273=findViewById(R.id.point273);
        Section273=findViewById(R.id.Section273);
        target273=findViewById(R.id.target273);
        team273=findViewById(R.id.team273);
        location273=findViewById(R.id.location273);
        tmael273= findViewById(R.id.tmael273);
        date273= findViewById(R.id.date273);
        driver273= findViewById(R.id.driver273);
        comment273= findViewById(R.id.comment273);
        s273= findViewById(R.id.s273);
        sm273= findViewById(R.id.sm273);
        name274=findViewById(R.id.name274);
        point274=findViewById(R.id.point274);
        Section274=findViewById(R.id.Section274);
        target274=findViewById(R.id.target274);
        team274=findViewById(R.id.team274);
        location274=findViewById(R.id.location274);
        tmael274= findViewById(R.id.tmael274);
        date274= findViewById(R.id.date274);
        driver274= findViewById(R.id.driver274);
        comment274= findViewById(R.id.comment274);
        s274= findViewById(R.id.s274);
        sm274= findViewById(R.id.sm274);
        name275=findViewById(R.id.name275);
        point275=findViewById(R.id.point275);
        Section275=findViewById(R.id.Section275);
        target275=findViewById(R.id.target275);
        team275=findViewById(R.id.team275);
        location275=findViewById(R.id.location275);
        tmael275= findViewById(R.id.tmael275);
        date275= findViewById(R.id.date275);
        driver275= findViewById(R.id.driver275);
        comment275= findViewById(R.id.comment275);
        s275= findViewById(R.id.s275);
        sm275= findViewById(R.id.sm275);
        name276=findViewById(R.id.name276);
        point276=findViewById(R.id.point276);
        Section276=findViewById(R.id.Section276);
        target276=findViewById(R.id.target276);
        team276=findViewById(R.id.team276);
        location276=findViewById(R.id.location276);
        tmael276= findViewById(R.id.tmael276);
        date276= findViewById(R.id.date276);
        driver276= findViewById(R.id.driver276);
        comment276= findViewById(R.id.comment276);
        s276= findViewById(R.id.s276);
        sm276= findViewById(R.id.sm276);
        name277=findViewById(R.id.name277);
        point277=findViewById(R.id.point277);
        Section277=findViewById(R.id.Section277);
        target277=findViewById(R.id.target277);
        team277=findViewById(R.id.team277);
        location277=findViewById(R.id.location277);
        tmael277= findViewById(R.id.tmael277);
        date277= findViewById(R.id.date277);
        driver277= findViewById(R.id.driver277);
        comment277= findViewById(R.id.comment277);
        s277= findViewById(R.id.s277);
        sm277= findViewById(R.id.sm277);
        name278=findViewById(R.id.name278);
        point278=findViewById(R.id.point278);
        Section278=findViewById(R.id.Section278);
        target278=findViewById(R.id.target278);
        team278=findViewById(R.id.team278);
        location278=findViewById(R.id.location278);
        tmael278= findViewById(R.id.tmael278);
        date278= findViewById(R.id.date278);
        driver278= findViewById(R.id.driver278);
        comment278= findViewById(R.id.comment278);
        s278= findViewById(R.id.s278);
        sm278= findViewById(R.id.sm278);
        name279=findViewById(R.id.name279);
        point279=findViewById(R.id.point279);
        Section279=findViewById(R.id.Section279);
        target279=findViewById(R.id.target279);
        team279=findViewById(R.id.team279);
        location279=findViewById(R.id.location279);
        tmael279= findViewById(R.id.tmael279);
        date279= findViewById(R.id.date279);
        driver279= findViewById(R.id.driver279);
        comment279= findViewById(R.id.comment279);
        s279= findViewById(R.id.s279);
        sm279= findViewById(R.id.sm279);
        name280=findViewById(R.id.name280);
        point280=findViewById(R.id.point280);
        Section280=findViewById(R.id.Section280);
        target280=findViewById(R.id.target280);
        team280=findViewById(R.id.team280);
        location280=findViewById(R.id.location280);
        tmael280= findViewById(R.id.tmael280);
        date280= findViewById(R.id.date280);
        driver280= findViewById(R.id.driver280);
        comment280= findViewById(R.id.comment280);
        s280= findViewById(R.id.s280);
        sm280= findViewById(R.id.sm280);
        name281=findViewById(R.id.name281);
        point281=findViewById(R.id.point281);
        Section281=findViewById(R.id.Section281);
        target281=findViewById(R.id.target281);
        team281=findViewById(R.id.team281);
        location281=findViewById(R.id.location281);
        tmael281= findViewById(R.id.tmael281);
        date281= findViewById(R.id.date281);
        driver281= findViewById(R.id.driver281);
        comment281= findViewById(R.id.comment281);
        s281= findViewById(R.id.s281);
        sm281= findViewById(R.id.sm281);
        name282=findViewById(R.id.name282);
        point282=findViewById(R.id.point282);
        Section282=findViewById(R.id.Section282);
        target282=findViewById(R.id.target282);
        team282=findViewById(R.id.team282);
        location282=findViewById(R.id.location282);
        tmael282= findViewById(R.id.tmael282);
        date282= findViewById(R.id.date282);
        driver282= findViewById(R.id.driver282);
        comment282= findViewById(R.id.comment282);
        s282= findViewById(R.id.s282);
        sm282= findViewById(R.id.sm282);
        name283=findViewById(R.id.name283);
        point283=findViewById(R.id.point283);
        Section283=findViewById(R.id.Section283);
        target283=findViewById(R.id.target283);
        team283=findViewById(R.id.team283);
        location283=findViewById(R.id.location283);
        tmael283= findViewById(R.id.tmael283);
        date283= findViewById(R.id.date283);
        driver283= findViewById(R.id.driver283);
        comment283= findViewById(R.id.comment283);
        s283= findViewById(R.id.s283);
        sm283= findViewById(R.id.sm283);
        name284=findViewById(R.id.name284);
        point284=findViewById(R.id.point284);
        Section284=findViewById(R.id.Section284);
        target284=findViewById(R.id.target284);
        team284=findViewById(R.id.team284);
        location284=findViewById(R.id.location284);
        tmael284= findViewById(R.id.tmael284);
        date284= findViewById(R.id.date284);
        driver284= findViewById(R.id.driver284);
        comment284= findViewById(R.id.comment284);
        s284= findViewById(R.id.s284);
        sm284= findViewById(R.id.sm284);
        name285=findViewById(R.id.name285);
        point285=findViewById(R.id.point285);
        Section285=findViewById(R.id.Section285);
        target285=findViewById(R.id.target285);
        team285=findViewById(R.id.team285);
        location285=findViewById(R.id.location285);
        tmael285= findViewById(R.id.tmael285);
        date285= findViewById(R.id.date285);
        driver285= findViewById(R.id.driver285);
        comment285= findViewById(R.id.comment285);
        s285= findViewById(R.id.s285);
        sm285= findViewById(R.id.sm285);
        name286=findViewById(R.id.name286);
        point286=findViewById(R.id.point286);
        Section286=findViewById(R.id.Section286);
        target286=findViewById(R.id.target286);
        team286=findViewById(R.id.team286);
        location286=findViewById(R.id.location286);
        tmael286= findViewById(R.id.tmael286);
        date286= findViewById(R.id.date286);
        driver286= findViewById(R.id.driver286);
        comment286= findViewById(R.id.comment286);
        s286= findViewById(R.id.s286);
        sm286= findViewById(R.id.sm286);
        name287=findViewById(R.id.name287);
        point287=findViewById(R.id.point287);
        Section287=findViewById(R.id.Section287);
        target287=findViewById(R.id.target287);
        team287=findViewById(R.id.team287);
        location287=findViewById(R.id.location287);
        tmael287= findViewById(R.id.tmael287);
        date287= findViewById(R.id.date287);
        driver287= findViewById(R.id.driver287);
        comment287= findViewById(R.id.comment287);
        s287= findViewById(R.id.s287);
        sm287= findViewById(R.id.sm287);
        name288=findViewById(R.id.name288);
        point288=findViewById(R.id.point288);
        Section288=findViewById(R.id.Section288);
        target288=findViewById(R.id.target288);
        team288=findViewById(R.id.team288);
        location288=findViewById(R.id.location288);
        tmael288= findViewById(R.id.tmael288);
        date288= findViewById(R.id.date288);
        driver288= findViewById(R.id.driver288);
        comment288= findViewById(R.id.comment288);
        s288= findViewById(R.id.s288);
        sm288= findViewById(R.id.sm288);
        name289=findViewById(R.id.name289);
        point289=findViewById(R.id.point289);
        Section289=findViewById(R.id.Section289);
        target289=findViewById(R.id.target289);
        team289=findViewById(R.id.team289);
        location289=findViewById(R.id.location289);
        tmael289= findViewById(R.id.tmael289);
        date289= findViewById(R.id.date289);
        driver289= findViewById(R.id.driver289);
        comment289= findViewById(R.id.comment289);
        s289= findViewById(R.id.s289);
        sm289= findViewById(R.id.sm289);
        name290=findViewById(R.id.name290);
        point290=findViewById(R.id.point290);
        Section290=findViewById(R.id.Section290);
        target290=findViewById(R.id.target290);
        team290=findViewById(R.id.team290);
        location290=findViewById(R.id.location290);
        tmael290= findViewById(R.id.tmael290);
        date290= findViewById(R.id.date290);
        driver290= findViewById(R.id.driver290);
        comment290= findViewById(R.id.comment290);
        s290= findViewById(R.id.s290);
        sm290= findViewById(R.id.sm290);
        name291=findViewById(R.id.name291);
        point291=findViewById(R.id.point291);
        Section291=findViewById(R.id.Section291);
        target291=findViewById(R.id.target291);
        team291=findViewById(R.id.team291);
        location291=findViewById(R.id.location291);
        tmael291= findViewById(R.id.tmael291);
        date291= findViewById(R.id.date291);
        driver291= findViewById(R.id.driver291);
        comment291= findViewById(R.id.comment291);
        s291= findViewById(R.id.s291);
        sm291= findViewById(R.id.sm291);
        name292=findViewById(R.id.name292);
        point292=findViewById(R.id.point292);
        Section292=findViewById(R.id.Section292);
        target292=findViewById(R.id.target292);
        team292=findViewById(R.id.team292);
        location292=findViewById(R.id.location292);
        tmael292= findViewById(R.id.tmael292);
        date292= findViewById(R.id.date292);
        driver292= findViewById(R.id.driver292);
        comment292= findViewById(R.id.comment292);
        s292= findViewById(R.id.s292);
        sm292= findViewById(R.id.sm292);
        name293=findViewById(R.id.name293);
        point293=findViewById(R.id.point293);
        Section293=findViewById(R.id.Section293);
        target293=findViewById(R.id.target293);
        team293=findViewById(R.id.team293);
        location293=findViewById(R.id.location293);
        tmael293= findViewById(R.id.tmael293);
        date293= findViewById(R.id.date293);
        driver293= findViewById(R.id.driver293);
        comment293= findViewById(R.id.comment293);
        s293= findViewById(R.id.s293);
        sm293= findViewById(R.id.sm293);
        name294=findViewById(R.id.name294);
        point294=findViewById(R.id.point294);
        Section294=findViewById(R.id.Section294);
        target294=findViewById(R.id.target294);
        team294=findViewById(R.id.team294);
        location294=findViewById(R.id.location294);
        tmael294= findViewById(R.id.tmael294);
        date294= findViewById(R.id.date294);
        driver294= findViewById(R.id.driver294);
        comment294= findViewById(R.id.comment294);
        s294= findViewById(R.id.s294);
        sm294= findViewById(R.id.sm294);
        name295=findViewById(R.id.name295);
        point295=findViewById(R.id.point295);
        Section295=findViewById(R.id.Section295);
        target295=findViewById(R.id.target295);
        team295=findViewById(R.id.team295);
        location295=findViewById(R.id.location295);
        tmael295= findViewById(R.id.tmael295);
        date295= findViewById(R.id.date295);
        driver295= findViewById(R.id.driver295);
        comment295= findViewById(R.id.comment295);
        s295= findViewById(R.id.s295);
        sm295= findViewById(R.id.sm295);
        name296=findViewById(R.id.name296);
        point296=findViewById(R.id.point296);
        Section296=findViewById(R.id.Section296);
        target296=findViewById(R.id.target296);
        team296=findViewById(R.id.team296);
        location296=findViewById(R.id.location296);
        tmael296= findViewById(R.id.tmael296);
        date296= findViewById(R.id.date296);
        driver296= findViewById(R.id.driver296);
        comment296= findViewById(R.id.comment296);
        s296= findViewById(R.id.s296);
        sm296= findViewById(R.id.sm296);
        name297=findViewById(R.id.name297);
        point297=findViewById(R.id.point297);
        Section297=findViewById(R.id.Section297);
        target297=findViewById(R.id.target297);
        team297=findViewById(R.id.team297);
        location297=findViewById(R.id.location297);
        tmael297= findViewById(R.id.tmael297);
        date297= findViewById(R.id.date297);
        driver297= findViewById(R.id.driver297);
        comment297= findViewById(R.id.comment297);
        s297= findViewById(R.id.s297);
        sm297= findViewById(R.id.sm297);
        name298=findViewById(R.id.name298);
        point298=findViewById(R.id.point298);
        Section298=findViewById(R.id.Section298);
        target298=findViewById(R.id.target298);
        team298=findViewById(R.id.team298);
        location298=findViewById(R.id.location298);
        tmael298= findViewById(R.id.tmael298);
        date298= findViewById(R.id.date298);
        driver298= findViewById(R.id.driver298);
        comment298= findViewById(R.id.comment298);
        s298= findViewById(R.id.s298);
        sm298= findViewById(R.id.sm298);
        name299=findViewById(R.id.name299);
        point299=findViewById(R.id.point299);
        Section299=findViewById(R.id.Section299);
        target299=findViewById(R.id.target299);
        team299=findViewById(R.id.team299);
        location299=findViewById(R.id.location299);
        tmael299= findViewById(R.id.tmael299);
        date299= findViewById(R.id.date299);
        driver299= findViewById(R.id.driver299);
        comment299= findViewById(R.id.comment299);
        s299= findViewById(R.id.s299);
        sm299= findViewById(R.id.sm299);
        name300=findViewById(R.id.name300);
        point300=findViewById(R.id.point300);
        Section300=findViewById(R.id.Section300);
        target300=findViewById(R.id.target300);
        team300=findViewById(R.id.team300);
        location300=findViewById(R.id.location300);
        tmael300= findViewById(R.id.tmael300);
        date300= findViewById(R.id.date300);
        driver300= findViewById(R.id.driver300);
        comment300= findViewById(R.id.comment300);
        s300= findViewById(R.id.s300);
        sm300= findViewById(R.id.sm300);



    }


    @Override
    public void onResume() {
        v = true;
        super.onResume();
        setIsAppRunning(v);
        FirebaseDatabase database = FirebaseDatabase.getInstance();
        DatabaseReference num = database.getReference("numTask");
        num.addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {

                numTask = dataSnapshot.getValue(Integer.class);
/*
               for(int i=0;i<numTask;i++)
               {

               }

                /*
                if (numTask > 2){
                    Tab1.setVisibility(View.VISIBLE);}
                if (numTask > 3) {
                    Tab1.setVisibility(View.VISIBLE);
                    Tab2.setVisibility(View.VISIBLE);
                }
                if (numTask > 4) {
                    Tab1.setVisibility(View.VISIBLE);
                    Tab2.setVisibility(View.VISIBLE);
                    Tab3.setVisibility(View.VISIBLE);
                }
                if (numTask > 5) {
                    Tab1.setVisibility(View.VISIBLE);
                    Tab2.setVisibility(View.VISIBLE);
                    Tab3.setVisibility(View.VISIBLE);
                    Tab4.setVisibility(View.VISIBLE);
                }
                if (numTask > 6) {
                    Tab1.setVisibility(View.VISIBLE);
                    Tab2.setVisibility(View.VISIBLE);
                    Tab3.setVisibility(View.VISIBLE);
                    Tab4.setVisibility(View.VISIBLE);
                    Tab5.setVisibility(View.VISIBLE);
                }
                    if (numTask > 7) {
                        Tab1.setVisibility(View.VISIBLE);
                        Tab2.setVisibility(View.VISIBLE);
                        Tab3.setVisibility(View.VISIBLE);
                        Tab4.setVisibility(View.VISIBLE);
                        Tab5.setVisibility(View.VISIBLE);
                        Tab6.setVisibility(View.VISIBLE);
                }

*/

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });



        DatabaseReference mDatabase = database.getReference("Tasks");
        sm1.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("1").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("1").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s1.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("1").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("1").child("field_manager_approval").setValue("false");
                }
            }
        });
      mDatabase.child("1").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm1.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("1").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s1.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });



        tmael1.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("1").child("tmael").setValue(tmael1.getText().toString());



                return false;
            }
        });
        comment1.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("1").child("comment").setValue(comment1.getText().toString());


                return false;
            }
        });
        driver1.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("1").child("driver").setValue(driver1.getText().toString());


                return false;
            }
        });





        mDatabase.child("1").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael1.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("1").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver1.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("1").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment1.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("1").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date1.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("1").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section1.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("1").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point1.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("1").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location1.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("1").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name1.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("1").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target1.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("1").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team1.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm2.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("2").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("2").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s2.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("2").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("2").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("2").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm2.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("2").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s2.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael2.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("2").child("tmael").setValue(tmael2.getText().toString());



                return false;
            }
        });
        comment2.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("2").child("comment").setValue(comment2.getText().toString());


                return false;
            }
        });
        driver2.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("2").child("driver").setValue(driver2.getText().toString());


                return false;
            }
        });





        mDatabase.child("2").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael2.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("2").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver2.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("2").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment2.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("2").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date2.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });



        mDatabase.child("2").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section2.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("2").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point2.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("2").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location2.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("2").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name2.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("2").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target2.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("2").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team2.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm3.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("3").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("3").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s3.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("3").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("3").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("3").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm3.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("3").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s3.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael3.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("3").child("tmael").setValue(tmael3.getText().toString());



                return false;
            }
        });
        comment3.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("3").child("comment").setValue(comment3.getText().toString());


                return false;
            }
        });
        driver3.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("3").child("driver").setValue(driver3.getText().toString());


                return false;
            }
        });





        mDatabase.child("3").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael3.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("3").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver3.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("3").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment3.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("3").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date3.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("3").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section3.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {
                //  error.toException();
            }
        });
        mDatabase.child("3").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point3.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("3").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location3.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("3").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name3.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("3").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target3.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("3").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team3.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm4.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("4").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("4").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s4.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("4").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("4").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("4").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm4.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("4").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s4.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael4.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("4").child("tmael").setValue(tmael4.getText().toString());



                return false;
            }
        });
        comment4.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("4").child("comment").setValue(comment4.getText().toString());


                return false;
            }
        });
        driver4.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("4").child("driver").setValue(driver4.getText().toString());


                return false;
            }
        });





        mDatabase.child("4").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael4.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("4").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver4.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("4").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment4.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("4").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date4.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });


        mDatabase.child("4").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section4.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("4").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point4.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("4").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location4.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("4").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name4.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("4").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target4.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("4").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team4.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm5.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("5").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("5").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s5.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("5").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("5").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("5").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm5.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("5").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s5.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael5.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("5").child("tmael").setValue(tmael5.getText().toString());



                return false;
            }
        });
        comment5.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("5").child("comment").setValue(comment5.getText().toString());


                return false;
            }
        });
        driver5.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("5").child("driver").setValue(driver5.getText().toString());


                return false;
            }
        });





        mDatabase.child("5").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael5.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("5").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver5.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("5").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment5.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("5").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date5.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("5").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section5.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("5").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point5.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("5").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location5.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("5").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name5.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("5").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target5.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("5").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team5.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }


        });
        sm6.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("6").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("6").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s6.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("6").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("6").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("6").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm6.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("6").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s6.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael6.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("6").child("tmael").setValue(tmael6.getText().toString());



                return false;
            }
        });
        comment6.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("6").child("comment").setValue(comment6.getText().toString());


                return false;
            }
        });
        driver6.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("6").child("driver").setValue(driver6.getText().toString());


                return false;
            }
        });





        mDatabase.child("6").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael6.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("6").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver6.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("6").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment6.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("6").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date6.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("6").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section6.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("6").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point6.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("6").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location6.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("6").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name6.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("6").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target6.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("6").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team6.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm7.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("7").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("7").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s7.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("7").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("7").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("7").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm7.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("7").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s7.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael7.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("7").child("tmael").setValue(tmael7.getText().toString());



                return false;
            }
        });
        comment7.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("7").child("comment").setValue(comment7.getText().toString());


                return false;
            }
        });
        driver7.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("7").child("driver").setValue(driver7.getText().toString());


                return false;
            }
        });





        mDatabase.child("7").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael7.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("7").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver7.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("7").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment7.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("7").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date7.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("7").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section7.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("7").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point7.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("7").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location7.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("7").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name7.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("7").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target7.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("7").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team7.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm8.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("8").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("8").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s8.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("8").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("8").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("8").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm8.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("8").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s8.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael8.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("8").child("tmael").setValue(tmael8.getText().toString());



                return false;
            }
        });
        comment8.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("8").child("comment").setValue(comment8.getText().toString());


                return false;
            }
        });
        driver8.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("8").child("driver").setValue(driver8.getText().toString());


                return false;
            }
        });





        mDatabase.child("8").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael8.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("8").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver8.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("8").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment8.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("8").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date8.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("8").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section8.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("8").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point8.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("8").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location8.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("8").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name8.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("8").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target8.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("8").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team8.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm9.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("9").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("9").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s9.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("9").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("9").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("9").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm9.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("9").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s9.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael9.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("9").child("tmael").setValue(tmael9.getText().toString());



                return false;
            }
        });
        comment9.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("9").child("comment").setValue(comment9.getText().toString());


                return false;
            }
        });
        driver9.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("9").child("driver").setValue(driver9.getText().toString());


                return false;
            }
        });





        mDatabase.child("9").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael9.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("9").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver9.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("9").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment9.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("9").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date9.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("9").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section9.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("9").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point9.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("9").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location9.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("9").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name9.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("9").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target9.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("9").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team9.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm10.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("10").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("10").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s10.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("10").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("10").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("10").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm10.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("10").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s10.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael10.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("10").child("tmael").setValue(tmael10.getText().toString());



                return false;
            }
        });
        comment10.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("10").child("comment").setValue(comment10.getText().toString());


                return false;
            }
        });
        driver10.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("10").child("driver").setValue(driver10.getText().toString());


                return false;
            }
        });





        mDatabase.child("10").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael10.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("10").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver10.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("10").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment10.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("10").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date10.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("10").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section10.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("10").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point10.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("10").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location10.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("10").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name10.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("10").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target10.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("10").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team10.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm11.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("11").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("11").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s11.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("11").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("11").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("11").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm11.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("11").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s11.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael11.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("11").child("tmael").setValue(tmael11.getText().toString());



                return false;
            }
        });
        comment11.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("11").child("comment").setValue(comment11.getText().toString());


                return false;
            }
        });
        driver11.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("11").child("driver").setValue(driver11.getText().toString());


                return false;
            }
        });





        mDatabase.child("11").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael11.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("11").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver11.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("11").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment11.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("11").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date11.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("11").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section11.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("11").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point11.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("11").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location11.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("11").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name11.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("11").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target11.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("11").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team11.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm12.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("12").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("12").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s12.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("12").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("12").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("12").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm12.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("12").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s12.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael12.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("12").child("tmael").setValue(tmael12.getText().toString());



                return false;
            }
        });
        comment12.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("12").child("comment").setValue(comment12.getText().toString());


                return false;
            }
        });
        driver12.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("12").child("driver").setValue(driver12.getText().toString());


                return false;
            }
        });





        mDatabase.child("12").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael12.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("12").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver12.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("12").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment12.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("12").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date12.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("12").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section12.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("12").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point12.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("12").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location12.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("12").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name12.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("12").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target12.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("12").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team12.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm13.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("13").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("13").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s13.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("13").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("13").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("13").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm13.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("13").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s13.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael13.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("13").child("tmael").setValue(tmael13.getText().toString());



                return false;
            }
        });
        comment13.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("13").child("comment").setValue(comment13.getText().toString());


                return false;
            }
        });
        driver13.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("13").child("driver").setValue(driver13.getText().toString());


                return false;
            }
        });





        mDatabase.child("13").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael13.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("13").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver13.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("13").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment13.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("13").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date13.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("13").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section13.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("13").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point13.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("13").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location13.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("13").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name13.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("13").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target13.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("13").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team13.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm14.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("14").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("14").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s14.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("14").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("14").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("14").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm14.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("14").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s14.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael14.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("14").child("tmael").setValue(tmael14.getText().toString());



                return false;
            }
        });
        comment14.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("14").child("comment").setValue(comment14.getText().toString());


                return false;
            }
        });
        driver14.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("14").child("driver").setValue(driver14.getText().toString());


                return false;
            }
        });





        mDatabase.child("14").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael14.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("14").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver14.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("14").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment14.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("14").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date14.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("14").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section14.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("14").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point14.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("14").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location14.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("14").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name14.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("14").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target14.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("14").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team14.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm15.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("15").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("15").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s15.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("15").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("15").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("15").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm15.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("15").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s15.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael15.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("15").child("tmael").setValue(tmael15.getText().toString());



                return false;
            }
        });
        comment15.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("15").child("comment").setValue(comment15.getText().toString());


                return false;
            }
        });
        driver15.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("15").child("driver").setValue(driver15.getText().toString());


                return false;
            }
        });





        mDatabase.child("15").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael15.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("15").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver15.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("15").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment15.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("15").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date15.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("15").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section15.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("15").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point15.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("15").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location15.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("15").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name15.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("15").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target15.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("15").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team15.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm16.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("16").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("16").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s16.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("16").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("16").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("16").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm16.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("16").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s16.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael16.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("16").child("tmael").setValue(tmael16.getText().toString());



                return false;
            }
        });
        comment16.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("16").child("comment").setValue(comment16.getText().toString());


                return false;
            }
        });
        driver16.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("16").child("driver").setValue(driver16.getText().toString());


                return false;
            }
        });





        mDatabase.child("16").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael16.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("16").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver16.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("16").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment16.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("16").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date16.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("16").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section16.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("16").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point16.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("16").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location16.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("16").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name16.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("16").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target16.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("16").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team16.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm17.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("17").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("17").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s17.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("17").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("17").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("17").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm17.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("17").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s17.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael17.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("17").child("tmael").setValue(tmael17.getText().toString());



                return false;
            }
        });
        comment17.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("17").child("comment").setValue(comment17.getText().toString());


                return false;
            }
        });
        driver17.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("17").child("driver").setValue(driver17.getText().toString());


                return false;
            }
        });





        mDatabase.child("17").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael17.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("17").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver17.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("17").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment17.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("17").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date17.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("17").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section17.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("17").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point17.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("17").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location17.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("17").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name17.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("17").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target17.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("17").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team17.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        sm18.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("18").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("18").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s18.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("18").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("18").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("18").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm18.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("18").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s18.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael18.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("18").child("tmael").setValue(tmael18.getText().toString());



                return false;
            }
        });
        comment18.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("18").child("comment").setValue(comment18.getText().toString());


                return false;
            }
        });
        driver18.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("18").child("driver").setValue(driver18.getText().toString());


                return false;
            }
        });





        mDatabase.child("18").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael18.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("18").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver18.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("18").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment18.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("18").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date18.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("18").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section18.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("18").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point18.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("18").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location18.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("18").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name18.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("18").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target18.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("18").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team18.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm19.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("19").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("19").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s19.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("19").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("19").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("19").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm19.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("19").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s19.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael19.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("19").child("tmael").setValue(tmael19.getText().toString());



                return false;
            }
        });
        comment19.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("19").child("comment").setValue(comment19.getText().toString());


                return false;
            }
        });
        driver19.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("19").child("driver").setValue(driver19.getText().toString());


                return false;
            }
        });





        mDatabase.child("19").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael19.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("19").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver19.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("19").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment19.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("19").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date19.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("19").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section19.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("19").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point19.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("19").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location19.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("19").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name19.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("19").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target19.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("19").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team19.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm20.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("20").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("20").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s20.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("20").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("20").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("20").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm20.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("20").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s20.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael20.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("20").child("tmael").setValue(tmael20.getText().toString());



                return false;
            }
        });
        comment20.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("20").child("comment").setValue(comment20.getText().toString());


                return false;
            }
        });
        driver20.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("20").child("driver").setValue(driver20.getText().toString());


                return false;
            }
        });





        mDatabase.child("20").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael20.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("20").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver20.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("20").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment20.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("20").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date20.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("20").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section20.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("20").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point20.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("20").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location20.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("20").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name20.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("20").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target20.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("20").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team20.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm21.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("21").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("21").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s21.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("21").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("21").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("21").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm21.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("21").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s21.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael21.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("21").child("tmael").setValue(tmael21.getText().toString());



                return false;
            }
        });
        comment21.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("21").child("comment").setValue(comment21.getText().toString());


                return false;
            }
        });
        driver21.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("21").child("driver").setValue(driver21.getText().toString());


                return false;
            }
        });





        mDatabase.child("21").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael21.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("21").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver21.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("21").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment21.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("21").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date21.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("21").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section21.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("21").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point21.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("21").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location21.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("21").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name21.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("21").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target21.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("21").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team21.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm22.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("22").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("22").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s22.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("22").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("22").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("22").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm22.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("22").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s22.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael22.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("22").child("tmael").setValue(tmael22.getText().toString());



                return false;
            }
        });
        comment22.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("22").child("comment").setValue(comment22.getText().toString());


                return false;
            }
        });
        driver22.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("22").child("driver").setValue(driver22.getText().toString());


                return false;
            }
        });





        mDatabase.child("22").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael22.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("22").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver22.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("22").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment22.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("22").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date22.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("22").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section22.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("22").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point22.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("22").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location22.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("22").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name22.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("22").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target22.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("22").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team22.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm23.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("23").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("23").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s23.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("23").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("23").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("23").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm23.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("23").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s23.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael23.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("23").child("tmael").setValue(tmael23.getText().toString());



                return false;
            }
        });
        comment23.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("23").child("comment").setValue(comment23.getText().toString());


                return false;
            }
        });
        driver23.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("23").child("driver").setValue(driver23.getText().toString());


                return false;
            }
        });





        mDatabase.child("23").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael23.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("23").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver23.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("23").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment23.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("23").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date23.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("23").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section23.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("23").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point23.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("23").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location23.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("23").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name23.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("23").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target23.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("23").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team23.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm24.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("24").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("24").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s24.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("24").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("24").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("24").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm24.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("24").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s24.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael24.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("24").child("tmael").setValue(tmael24.getText().toString());



                return false;
            }
        });
        comment24.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("24").child("comment").setValue(comment24.getText().toString());


                return false;
            }
        });
        driver24.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("24").child("driver").setValue(driver24.getText().toString());


                return false;
            }
        });





        mDatabase.child("24").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael24.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("24").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver24.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("24").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment24.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("24").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date24.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("24").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section24.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("24").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point24.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("24").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location24.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("24").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name24.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("24").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target24.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("24").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team24.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm25.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("25").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("25").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s25.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("25").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("25").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("25").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm25.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("25").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s25.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael25.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("25").child("tmael").setValue(tmael25.getText().toString());



                return false;
            }
        });
        comment25.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("25").child("comment").setValue(comment25.getText().toString());


                return false;
            }
        });
        driver25.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("25").child("driver").setValue(driver25.getText().toString());


                return false;
            }
        });





        mDatabase.child("25").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael25.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("25").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver25.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("25").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment25.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("25").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date25.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("25").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section25.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("25").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point25.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("25").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location25.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("25").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name25.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("25").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target25.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("25").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team25.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm26.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("26").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("26").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s26.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("26").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("26").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("26").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm26.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("26").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s26.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael26.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("26").child("tmael").setValue(tmael26.getText().toString());



                return false;
            }
        });
        comment26.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("26").child("comment").setValue(comment26.getText().toString());


                return false;
            }
        });
        driver26.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("26").child("driver").setValue(driver26.getText().toString());


                return false;
            }
        });





        mDatabase.child("26").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael26.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("26").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver26.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("26").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment26.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("26").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date26.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("26").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section26.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("26").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point26.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("26").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location26.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("26").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name26.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("26").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target26.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("26").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team26.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm27.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("27").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("27").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s27.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("27").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("27").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("27").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm27.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("27").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s27.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael27.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("27").child("tmael").setValue(tmael27.getText().toString());



                return false;
            }
        });
        comment27.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("27").child("comment").setValue(comment27.getText().toString());


                return false;
            }
        });
        driver27.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("27").child("driver").setValue(driver27.getText().toString());


                return false;
            }
        });





        mDatabase.child("27").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael27.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("27").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver27.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("27").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment27.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("27").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date27.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("27").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section27.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("27").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point27.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("27").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location27.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("27").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name27.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("27").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target27.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("27").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team27.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm28.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("28").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("28").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s28.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("28").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("28").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("28").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm28.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("28").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s28.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael28.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("28").child("tmael").setValue(tmael28.getText().toString());



                return false;
            }
        });
        comment28.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("28").child("comment").setValue(comment28.getText().toString());


                return false;
            }
        });
        driver28.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("28").child("driver").setValue(driver28.getText().toString());


                return false;
            }
        });





        mDatabase.child("28").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael28.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("28").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver28.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("28").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment28.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("28").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date28.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("28").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section28.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("28").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point28.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("28").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location28.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("28").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name28.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("28").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target28.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("28").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team28.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm29.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("29").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("29").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s29.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("29").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("29").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("29").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm29.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("29").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s29.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael29.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("29").child("tmael").setValue(tmael29.getText().toString());



                return false;
            }
        });
        comment29.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("29").child("comment").setValue(comment29.getText().toString());


                return false;
            }
        });
        driver29.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("29").child("driver").setValue(driver29.getText().toString());


                return false;
            }
        });





        mDatabase.child("29").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael29.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("29").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver29.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("29").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment29.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("29").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date29.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("29").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section29.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("29").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point29.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("29").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location29.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("29").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name29.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("29").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target29.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("29").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team29.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm30.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("30").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("30").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s30.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("30").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("30").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("30").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm30.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("30").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s30.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael30.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("30").child("tmael").setValue(tmael30.getText().toString());



                return false;
            }
        });
        comment30.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("30").child("comment").setValue(comment30.getText().toString());


                return false;
            }
        });
        driver30.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("30").child("driver").setValue(driver30.getText().toString());


                return false;
            }
        });





        mDatabase.child("30").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael30.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("30").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver30.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("30").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment30.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("30").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date30.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("30").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section30.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("30").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point30.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("30").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location30.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("30").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name30.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("30").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target30.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("30").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team30.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm31.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("31").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("31").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s31.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("31").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("31").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("31").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm31.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("31").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s31.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael31.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("31").child("tmael").setValue(tmael31.getText().toString());



                return false;
            }
        });
        comment31.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("31").child("comment").setValue(comment31.getText().toString());


                return false;
            }
        });
        driver31.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("31").child("driver").setValue(driver31.getText().toString());


                return false;
            }
        });





        mDatabase.child("31").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael31.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("31").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver31.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("31").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment31.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("31").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date31.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("31").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section31.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("31").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point31.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("31").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location31.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("31").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name31.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("31").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target31.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("31").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team31.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm32.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("32").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("32").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s32.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("32").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("32").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("32").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm32.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("32").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s32.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael32.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("32").child("tmael").setValue(tmael32.getText().toString());



                return false;
            }
        });
        comment32.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("32").child("comment").setValue(comment32.getText().toString());


                return false;
            }
        });
        driver32.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("32").child("driver").setValue(driver32.getText().toString());


                return false;
            }
        });





        mDatabase.child("32").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael32.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("32").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver32.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("32").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment32.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("32").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date32.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("32").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section32.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("32").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point32.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("32").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location32.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("32").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name32.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("32").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target32.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("32").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team32.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm33.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("33").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("33").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s33.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("33").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("33").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("33").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm33.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("33").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s33.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael33.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("33").child("tmael").setValue(tmael33.getText().toString());



                return false;
            }
        });
        comment33.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("33").child("comment").setValue(comment33.getText().toString());


                return false;
            }
        });
        driver33.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("33").child("driver").setValue(driver33.getText().toString());


                return false;
            }
        });





        mDatabase.child("33").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael33.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("33").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver33.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("33").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment33.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("33").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date33.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("33").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section33.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("33").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point33.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("33").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location33.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("33").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name33.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("33").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target33.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("33").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team33.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm34.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("34").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("34").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s34.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("34").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("34").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("34").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm34.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("34").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s34.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael34.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("34").child("tmael").setValue(tmael34.getText().toString());



                return false;
            }
        });
        comment34.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("34").child("comment").setValue(comment34.getText().toString());


                return false;
            }
        });
        driver34.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("34").child("driver").setValue(driver34.getText().toString());


                return false;
            }
        });





        mDatabase.child("34").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael34.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("34").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver34.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("34").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment34.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("34").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date34.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("34").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section34.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("34").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point34.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("34").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location34.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("34").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name34.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("34").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target34.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("34").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team34.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm35.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("35").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("35").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s35.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("35").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("35").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("35").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm35.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("35").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s35.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael35.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("35").child("tmael").setValue(tmael35.getText().toString());



                return false;
            }
        });
        comment35.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("35").child("comment").setValue(comment35.getText().toString());


                return false;
            }
        });
        driver35.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("35").child("driver").setValue(driver35.getText().toString());


                return false;
            }
        });





        mDatabase.child("35").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael35.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("35").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver35.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("35").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment35.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("35").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date35.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("35").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section35.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("35").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point35.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("35").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location35.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("35").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name35.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("35").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target35.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("35").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team35.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm36.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("36").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("36").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s36.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("36").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("36").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("36").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm36.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("36").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s36.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael36.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("36").child("tmael").setValue(tmael36.getText().toString());



                return false;
            }
        });
        comment36.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("36").child("comment").setValue(comment36.getText().toString());


                return false;
            }
        });
        driver36.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("36").child("driver").setValue(driver36.getText().toString());


                return false;
            }
        });





        mDatabase.child("36").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael36.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("36").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver36.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("36").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment36.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("36").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date36.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("36").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section36.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("36").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point36.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("36").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location36.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("36").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name36.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("36").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target36.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("36").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team36.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm37.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("37").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("37").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s37.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("37").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("37").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("37").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm37.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("37").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s37.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael37.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("37").child("tmael").setValue(tmael37.getText().toString());



                return false;
            }
        });
        comment37.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("37").child("comment").setValue(comment37.getText().toString());


                return false;
            }
        });
        driver37.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("37").child("driver").setValue(driver37.getText().toString());


                return false;
            }
        });





        mDatabase.child("37").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael37.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("37").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver37.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("37").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment37.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("37").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date37.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("37").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section37.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("37").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point37.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("37").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location37.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("37").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name37.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("37").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target37.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("37").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team37.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm38.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("38").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("38").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s38.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("38").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("38").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("38").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm38.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("38").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s38.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael38.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("38").child("tmael").setValue(tmael38.getText().toString());



                return false;
            }
        });
        comment38.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("38").child("comment").setValue(comment38.getText().toString());


                return false;
            }
        });
        driver38.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("38").child("driver").setValue(driver38.getText().toString());


                return false;
            }
        });





        mDatabase.child("38").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael38.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("38").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver38.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("38").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment38.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("38").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date38.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("38").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section38.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("38").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point38.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("38").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location38.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("38").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name38.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("38").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target38.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("38").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team38.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm39.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("39").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("39").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s39.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("39").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("39").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("39").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm39.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("39").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s39.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael39.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("39").child("tmael").setValue(tmael39.getText().toString());



                return false;
            }
        });
        comment39.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("39").child("comment").setValue(comment39.getText().toString());


                return false;
            }
        });
        driver39.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("39").child("driver").setValue(driver39.getText().toString());


                return false;
            }
        });





        mDatabase.child("39").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael39.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("39").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver39.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("39").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment39.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("39").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date39.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("39").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section39.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("39").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point39.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("39").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location39.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("39").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name39.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("39").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target39.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("39").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team39.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm40.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("40").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("40").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s40.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("40").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("40").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("40").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm40.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("40").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s40.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael40.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("40").child("tmael").setValue(tmael40.getText().toString());



                return false;
            }
        });
        comment40.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("40").child("comment").setValue(comment40.getText().toString());


                return false;
            }
        });
        driver40.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("40").child("driver").setValue(driver40.getText().toString());


                return false;
            }
        });





        mDatabase.child("40").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael40.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("40").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver40.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("40").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment40.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("40").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date40.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("40").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section40.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("40").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point40.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("40").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location40.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("40").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name40.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("40").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target40.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("40").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team40.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm41.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("41").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("41").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s41.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("41").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("41").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("41").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm41.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("41").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s41.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael41.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("41").child("tmael").setValue(tmael41.getText().toString());



                return false;
            }
        });
        comment41.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("41").child("comment").setValue(comment41.getText().toString());


                return false;
            }
        });
        driver41.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("41").child("driver").setValue(driver41.getText().toString());


                return false;
            }
        });





        mDatabase.child("41").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael41.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("41").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver41.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("41").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment41.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("41").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date41.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("41").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section41.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("41").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point41.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("41").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location41.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("41").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name41.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("41").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target41.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("41").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team41.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm42.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("42").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("42").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s42.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("42").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("42").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("42").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm42.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("42").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s42.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael42.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("42").child("tmael").setValue(tmael42.getText().toString());



                return false;
            }
        });
        comment42.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("42").child("comment").setValue(comment42.getText().toString());


                return false;
            }
        });
        driver42.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("42").child("driver").setValue(driver42.getText().toString());


                return false;
            }
        });





        mDatabase.child("42").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael42.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("42").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver42.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("42").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment42.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("42").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date42.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("42").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section42.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("42").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point42.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("42").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location42.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("42").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name42.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("42").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target42.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("42").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team42.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm43.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("43").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("43").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s43.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("43").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("43").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("43").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm43.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("43").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s43.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael43.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("43").child("tmael").setValue(tmael43.getText().toString());



                return false;
            }
        });
        comment43.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("43").child("comment").setValue(comment43.getText().toString());


                return false;
            }
        });
        driver43.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("43").child("driver").setValue(driver43.getText().toString());


                return false;
            }
        });





        mDatabase.child("43").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael43.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("43").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver43.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("43").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment43.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("43").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date43.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("43").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section43.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("43").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point43.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("43").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location43.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("43").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name43.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("43").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target43.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("43").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team43.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm44.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("44").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("44").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s44.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("44").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("44").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("44").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm44.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("44").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s44.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael44.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("44").child("tmael").setValue(tmael44.getText().toString());



                return false;
            }
        });
        comment44.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("44").child("comment").setValue(comment44.getText().toString());


                return false;
            }
        });
        driver44.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("44").child("driver").setValue(driver44.getText().toString());


                return false;
            }
        });





        mDatabase.child("44").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael44.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("44").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver44.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("44").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment44.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("44").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date44.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("44").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section44.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("44").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point44.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("44").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location44.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("44").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name44.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("44").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target44.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("44").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team44.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm45.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("45").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("45").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s45.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("45").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("45").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("45").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm45.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("45").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s45.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael45.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("45").child("tmael").setValue(tmael45.getText().toString());



                return false;
            }
        });
        comment45.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("45").child("comment").setValue(comment45.getText().toString());


                return false;
            }
        });
        driver45.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("45").child("driver").setValue(driver45.getText().toString());


                return false;
            }
        });





        mDatabase.child("45").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael45.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("45").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver45.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("45").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment45.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("45").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date45.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("45").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section45.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("45").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point45.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("45").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location45.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("45").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name45.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("45").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target45.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("45").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team45.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm46.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("46").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("46").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s46.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("46").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("46").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("46").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm46.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("46").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s46.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael46.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("46").child("tmael").setValue(tmael46.getText().toString());



                return false;
            }
        });
        comment46.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("46").child("comment").setValue(comment46.getText().toString());


                return false;
            }
        });
        driver46.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("46").child("driver").setValue(driver46.getText().toString());


                return false;
            }
        });





        mDatabase.child("46").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael46.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("46").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver46.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("46").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment46.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("46").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date46.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("46").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section46.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("46").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point46.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("46").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location46.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("46").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name46.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("46").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target46.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("46").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team46.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm47.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("47").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("47").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s47.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("47").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("47").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("47").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm47.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("47").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s47.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael47.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("47").child("tmael").setValue(tmael47.getText().toString());



                return false;
            }
        });
        comment47.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("47").child("comment").setValue(comment47.getText().toString());


                return false;
            }
        });
        driver47.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("47").child("driver").setValue(driver47.getText().toString());


                return false;
            }
        });





        mDatabase.child("47").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael47.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("47").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver47.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("47").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment47.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("47").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date47.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("47").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section47.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("47").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point47.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("47").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location47.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("47").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name47.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("47").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target47.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("47").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team47.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        sm48.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("48").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("48").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s48.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("48").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("48").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("48").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm48.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("48").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s48.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael48.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("48").child("tmael").setValue(tmael48.getText().toString());



                return false;
            }
        });
        comment48.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("48").child("comment").setValue(comment48.getText().toString());


                return false;
            }
        });
        driver48.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("48").child("driver").setValue(driver48.getText().toString());


                return false;
            }
        });





        mDatabase.child("48").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael48.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("48").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver48.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("48").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment48.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("48").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date48.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("48").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section48.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("48").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point48.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("48").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location48.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("48").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name48.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("48").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target48.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("48").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team48.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        sm49.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("49").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("49").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s49.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("49").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("49").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("49").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm49.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("49").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s49.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael49.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("49").child("tmael").setValue(tmael49.getText().toString());



                return false;
            }
        });
        comment49.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("49").child("comment").setValue(comment49.getText().toString());


                return false;
            }
        });
        driver49.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("49").child("driver").setValue(driver49.getText().toString());


                return false;
            }
        });





        mDatabase.child("49").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael49.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("49").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver49.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("49").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment49.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("49").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date49.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("49").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section49.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("49").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point49.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("49").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location49.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("49").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name49.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("49").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target49.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("49").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team49.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm50.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("50").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("50").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s50.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("50").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("50").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("50").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm50.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("50").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s50.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael50.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("50").child("tmael").setValue(tmael50.getText().toString());



                return false;
            }
        });
        comment50.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("50").child("comment").setValue(comment50.getText().toString());


                return false;
            }
        });
        driver50.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("50").child("driver").setValue(driver50.getText().toString());


                return false;
            }
        });





        mDatabase.child("50").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael50.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("50").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver50.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("50").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment50.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("50").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date50.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("50").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section50.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("50").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point50.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("50").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location50.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("50").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name50.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("50").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target50.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("50").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team50.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm51.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("51").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("51").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s51.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("51").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("51").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("51").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm51.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("51").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s51.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael51.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("51").child("tmael").setValue(tmael51.getText().toString());



                return false;
            }
        });
        comment51.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("51").child("comment").setValue(comment51.getText().toString());


                return false;
            }
        });
        driver51.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("51").child("driver").setValue(driver51.getText().toString());


                return false;
            }
        });





        mDatabase.child("51").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael51.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("51").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver51.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("51").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment51.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("51").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date51.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("51").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section51.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("51").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point51.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("51").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location51.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("51").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name51.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("51").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target51.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("51").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team51.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm52.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("52").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("52").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s52.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("52").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("52").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("52").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm52.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("52").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s52.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael52.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("52").child("tmael").setValue(tmael52.getText().toString());



                return false;
            }
        });
        comment52.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("52").child("comment").setValue(comment52.getText().toString());


                return false;
            }
        });
        driver52.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("52").child("driver").setValue(driver52.getText().toString());


                return false;
            }
        });





        mDatabase.child("52").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael52.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("52").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver52.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("52").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment52.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("52").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date52.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("52").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section52.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("52").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point52.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("52").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location52.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("52").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name52.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("52").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target52.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("52").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team52.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm53.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("53").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("53").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s53.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("53").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("53").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("53").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm53.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("53").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s53.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael53.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("53").child("tmael").setValue(tmael53.getText().toString());



                return false;
            }
        });
        comment53.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("53").child("comment").setValue(comment53.getText().toString());


                return false;
            }
        });
        driver53.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("53").child("driver").setValue(driver53.getText().toString());


                return false;
            }
        });





        mDatabase.child("53").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael53.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("53").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver53.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("53").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment53.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("53").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date53.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("53").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section53.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("53").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point53.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("53").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location53.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("53").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name53.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("53").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target53.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("53").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team53.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm54.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("54").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("54").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s54.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("54").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("54").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("54").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm54.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("54").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s54.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael54.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("54").child("tmael").setValue(tmael54.getText().toString());



                return false;
            }
        });
        comment54.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("54").child("comment").setValue(comment54.getText().toString());


                return false;
            }
        });
        driver54.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("54").child("driver").setValue(driver54.getText().toString());


                return false;
            }
        });





        mDatabase.child("54").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael54.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("54").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver54.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("54").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment54.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("54").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date54.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("54").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section54.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("54").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point54.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("54").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location54.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("54").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name54.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("54").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target54.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("54").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team54.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm55.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("55").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("55").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s55.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("55").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("55").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("55").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm55.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("55").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s55.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael55.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("55").child("tmael").setValue(tmael55.getText().toString());



                return false;
            }
        });
        comment55.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("55").child("comment").setValue(comment55.getText().toString());


                return false;
            }
        });
        driver55.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("55").child("driver").setValue(driver55.getText().toString());


                return false;
            }
        });





        mDatabase.child("55").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael55.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("55").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver55.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("55").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment55.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("55").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date55.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("55").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section55.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("55").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point55.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("55").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location55.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("55").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name55.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("55").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target55.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("55").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team55.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm56.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("56").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("56").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s56.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("56").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("56").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("56").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm56.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("56").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s56.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael56.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("56").child("tmael").setValue(tmael56.getText().toString());



                return false;
            }
        });
        comment56.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("56").child("comment").setValue(comment56.getText().toString());


                return false;
            }
        });
        driver56.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("56").child("driver").setValue(driver56.getText().toString());


                return false;
            }
        });





        mDatabase.child("56").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael56.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("56").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver56.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("56").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment56.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("56").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date56.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("56").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section56.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("56").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point56.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("56").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location56.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("56").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name56.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("56").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target56.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("56").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team56.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm57.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("57").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("57").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s57.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("57").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("57").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("57").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm57.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("57").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s57.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael57.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("57").child("tmael").setValue(tmael57.getText().toString());



                return false;
            }
        });
        comment57.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("57").child("comment").setValue(comment57.getText().toString());


                return false;
            }
        });
        driver57.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("57").child("driver").setValue(driver57.getText().toString());


                return false;
            }
        });





        mDatabase.child("57").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael57.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("57").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver57.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("57").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment57.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("57").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date57.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("57").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section57.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("57").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point57.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("57").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location57.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("57").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name57.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("57").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target57.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("57").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team57.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm58.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("58").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("58").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s58.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("58").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("58").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("58").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm58.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("58").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s58.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael58.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("58").child("tmael").setValue(tmael58.getText().toString());



                return false;
            }
        });
        comment58.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("58").child("comment").setValue(comment58.getText().toString());


                return false;
            }
        });
        driver58.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("58").child("driver").setValue(driver58.getText().toString());


                return false;
            }
        });





        mDatabase.child("58").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael58.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("58").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver58.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("58").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment58.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("58").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date58.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("58").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section58.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("58").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point58.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("58").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location58.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("58").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name58.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("58").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target58.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("58").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team58.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        sm59.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("59").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("59").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s59.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("59").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("59").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("59").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm59.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("59").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s59.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael59.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("59").child("tmael").setValue(tmael59.getText().toString());



                return false;
            }
        });
        comment59.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("59").child("comment").setValue(comment59.getText().toString());


                return false;
            }
        });
        driver59.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("59").child("driver").setValue(driver59.getText().toString());


                return false;
            }
        });





        mDatabase.child("59").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael59.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("59").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver59.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("59").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment59.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("59").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date59.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("59").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section59.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("59").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point59.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("59").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location59.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("59").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name59.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("59").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target59.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("59").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team59.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm60.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("60").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("60").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s60.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("60").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("60").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("60").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm60.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("60").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s60.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael60.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("60").child("tmael").setValue(tmael60.getText().toString());



                return false;
            }
        });
        comment60.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("60").child("comment").setValue(comment60.getText().toString());


                return false;
            }
        });
        driver60.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("60").child("driver").setValue(driver60.getText().toString());


                return false;
            }
        });





        mDatabase.child("60").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael60.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("60").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver60.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("60").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment60.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("60").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date60.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("60").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section60.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("60").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point60.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("60").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location60.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("60").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name60.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("60").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target60.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("60").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team60.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm61.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("61").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("61").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s61.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("61").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("61").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("61").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm61.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("61").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s61.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael61.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("61").child("tmael").setValue(tmael61.getText().toString());



                return false;
            }
        });
        comment61.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("61").child("comment").setValue(comment61.getText().toString());


                return false;
            }
        });
        driver61.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("61").child("driver").setValue(driver61.getText().toString());


                return false;
            }
        });





        mDatabase.child("61").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael61.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("61").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver61.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("61").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment61.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("61").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date61.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("61").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section61.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("61").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point61.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("61").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location61.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("61").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name61.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("61").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target61.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("61").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team61.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm62.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("62").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("62").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s62.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("62").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("62").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("62").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm62.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("62").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s62.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael62.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("62").child("tmael").setValue(tmael62.getText().toString());



                return false;
            }
        });
        comment62.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("62").child("comment").setValue(comment62.getText().toString());


                return false;
            }
        });
        driver62.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("62").child("driver").setValue(driver62.getText().toString());


                return false;
            }
        });





        mDatabase.child("62").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael62.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("62").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver62.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("62").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment62.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("62").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date62.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("62").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section62.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("62").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point62.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("62").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location62.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("62").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name62.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("62").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target62.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("62").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team62.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm63.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("63").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("63").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s63.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("63").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("63").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("63").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm63.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("63").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s63.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael63.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("63").child("tmael").setValue(tmael63.getText().toString());



                return false;
            }
        });
        comment63.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("63").child("comment").setValue(comment63.getText().toString());


                return false;
            }
        });
        driver63.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("63").child("driver").setValue(driver63.getText().toString());


                return false;
            }
        });





        mDatabase.child("63").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael63.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("63").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver63.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("63").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment63.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("63").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date63.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("63").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section63.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("63").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point63.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("63").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location63.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("63").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name63.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("63").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target63.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("63").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team63.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm64.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("64").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("64").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s64.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("64").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("64").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("64").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm64.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("64").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s64.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael64.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("64").child("tmael").setValue(tmael64.getText().toString());



                return false;
            }
        });
        comment64.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("64").child("comment").setValue(comment64.getText().toString());


                return false;
            }
        });
        driver64.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("64").child("driver").setValue(driver64.getText().toString());


                return false;
            }
        });





        mDatabase.child("64").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael64.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("64").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver64.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("64").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment64.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("64").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date64.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("64").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section64.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("64").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point64.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("64").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location64.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("64").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name64.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("64").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target64.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("64").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team64.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm65.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("65").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("65").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s65.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("65").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("65").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("65").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm65.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("65").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s65.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael65.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("65").child("tmael").setValue(tmael65.getText().toString());



                return false;
            }
        });
        comment65.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("65").child("comment").setValue(comment65.getText().toString());


                return false;
            }
        });
        driver65.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("65").child("driver").setValue(driver65.getText().toString());


                return false;
            }
        });





        mDatabase.child("65").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael65.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("65").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver65.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("65").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment65.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("65").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date65.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("65").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section65.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("65").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point65.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("65").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location65.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("65").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name65.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("65").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target65.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("65").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team65.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm66.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("66").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("66").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s66.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("66").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("66").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("66").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm66.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("66").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s66.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael66.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("66").child("tmael").setValue(tmael66.getText().toString());



                return false;
            }
        });
        comment66.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("66").child("comment").setValue(comment66.getText().toString());


                return false;
            }
        });
        driver66.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("66").child("driver").setValue(driver66.getText().toString());


                return false;
            }
        });





        mDatabase.child("66").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael66.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("66").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver66.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("66").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment66.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("66").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date66.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("66").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section66.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("66").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point66.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("66").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location66.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("66").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name66.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("66").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target66.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("66").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team66.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm67.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("67").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("67").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s67.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("67").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("67").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("67").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm67.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("67").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s67.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael67.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("67").child("tmael").setValue(tmael67.getText().toString());



                return false;
            }
        });
        comment67.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("67").child("comment").setValue(comment67.getText().toString());


                return false;
            }
        });
        driver67.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("67").child("driver").setValue(driver67.getText().toString());


                return false;
            }
        });





        mDatabase.child("67").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael67.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("67").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver67.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("67").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment67.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("67").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date67.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("67").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section67.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("67").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point67.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("67").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location67.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("67").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name67.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("67").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target67.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("67").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team67.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm68.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("68").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("68").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s68.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("68").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("68").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("68").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm68.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("68").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s68.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael68.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("68").child("tmael").setValue(tmael68.getText().toString());



                return false;
            }
        });
        comment68.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("68").child("comment").setValue(comment68.getText().toString());


                return false;
            }
        });
        driver68.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("68").child("driver").setValue(driver68.getText().toString());


                return false;
            }
        });





        mDatabase.child("68").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael68.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("68").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver68.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("68").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment68.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("68").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date68.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("68").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section68.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("68").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point68.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("68").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location68.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("68").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name68.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("68").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target68.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("68").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team68.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm69.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("69").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("69").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s69.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("69").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("69").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("69").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm69.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("69").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s69.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael69.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("69").child("tmael").setValue(tmael69.getText().toString());



                return false;
            }
        });
        comment69.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("69").child("comment").setValue(comment69.getText().toString());


                return false;
            }
        });
        driver69.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("69").child("driver").setValue(driver69.getText().toString());


                return false;
            }
        });





        mDatabase.child("69").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael69.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("69").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver69.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("69").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment69.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("69").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date69.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("69").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section69.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("69").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point69.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("69").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location69.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("69").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name69.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("69").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target69.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("69").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team69.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm70.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("70").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("70").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s70.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("70").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("70").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("70").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm70.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("70").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s70.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael70.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("70").child("tmael").setValue(tmael70.getText().toString());



                return false;
            }
        });
        comment70.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("70").child("comment").setValue(comment70.getText().toString());


                return false;
            }
        });
        driver70.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("70").child("driver").setValue(driver70.getText().toString());


                return false;
            }
        });





        mDatabase.child("70").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael70.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("70").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver70.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("70").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment70.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("70").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date70.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("70").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section70.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("70").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point70.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("70").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location70.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("70").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name70.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("70").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target70.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("70").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team70.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm71.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("71").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("71").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s71.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("71").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("71").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("71").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm71.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("71").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s71.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael71.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("71").child("tmael").setValue(tmael71.getText().toString());



                return false;
            }
        });
        comment71.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("71").child("comment").setValue(comment71.getText().toString());


                return false;
            }
        });
        driver71.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("71").child("driver").setValue(driver71.getText().toString());


                return false;
            }
        });





        mDatabase.child("71").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael71.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("71").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver71.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("71").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment71.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("71").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date71.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("71").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section71.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("71").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point71.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("71").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location71.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("71").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name71.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("71").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target71.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("71").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team71.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm72.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("72").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("72").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s72.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("72").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("72").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("72").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm72.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("72").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s72.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael72.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("72").child("tmael").setValue(tmael72.getText().toString());



                return false;
            }
        });
        comment72.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("72").child("comment").setValue(comment72.getText().toString());


                return false;
            }
        });
        driver72.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("72").child("driver").setValue(driver72.getText().toString());


                return false;
            }
        });





        mDatabase.child("72").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael72.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("72").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver72.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("72").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment72.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("72").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date72.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("72").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section72.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("72").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point72.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("72").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location72.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("72").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name72.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("72").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target72.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("72").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team72.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm73.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("73").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("73").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s73.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("73").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("73").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("73").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm73.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("73").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s73.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael73.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("73").child("tmael").setValue(tmael73.getText().toString());



                return false;
            }
        });
        comment73.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("73").child("comment").setValue(comment73.getText().toString());


                return false;
            }
        });
        driver73.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("73").child("driver").setValue(driver73.getText().toString());


                return false;
            }
        });





        mDatabase.child("73").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael73.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("73").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver73.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("73").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment73.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("73").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date73.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("73").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section73.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("73").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point73.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("73").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location73.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("73").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name73.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("73").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target73.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("73").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team73.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm74.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("74").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("74").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s74.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("74").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("74").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("74").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm74.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("74").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s74.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael74.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("74").child("tmael").setValue(tmael74.getText().toString());



                return false;
            }
        });
        comment74.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("74").child("comment").setValue(comment74.getText().toString());


                return false;
            }
        });
        driver74.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("74").child("driver").setValue(driver74.getText().toString());


                return false;
            }
        });





        mDatabase.child("74").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael74.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("74").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver74.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("74").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment74.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("74").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date74.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("74").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section74.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("74").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point74.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("74").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location74.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("74").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name74.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("74").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target74.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("74").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team74.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm75.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("75").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("75").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s75.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("75").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("75").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("75").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm75.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("75").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s75.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael75.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("75").child("tmael").setValue(tmael75.getText().toString());



                return false;
            }
        });
        comment75.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("75").child("comment").setValue(comment75.getText().toString());


                return false;
            }
        });
        driver75.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("75").child("driver").setValue(driver75.getText().toString());


                return false;
            }
        });





        mDatabase.child("75").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael75.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("75").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver75.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("75").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment75.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("75").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date75.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("75").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section75.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("75").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point75.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("75").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location75.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("75").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name75.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("75").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target75.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("75").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team75.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm76.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("76").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("76").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s76.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("76").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("76").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("76").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm76.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("76").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s76.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael76.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("76").child("tmael").setValue(tmael76.getText().toString());



                return false;
            }
        });
        comment76.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("76").child("comment").setValue(comment76.getText().toString());


                return false;
            }
        });
        driver76.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("76").child("driver").setValue(driver76.getText().toString());


                return false;
            }
        });





        mDatabase.child("76").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael76.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("76").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver76.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("76").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment76.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("76").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date76.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("76").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section76.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("76").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point76.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("76").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location76.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("76").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name76.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("76").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target76.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("76").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team76.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm77.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("77").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("77").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s77.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("77").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("77").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("77").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm77.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("77").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s77.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael77.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("77").child("tmael").setValue(tmael77.getText().toString());



                return false;
            }
        });
        comment77.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("77").child("comment").setValue(comment77.getText().toString());


                return false;
            }
        });
        driver77.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("77").child("driver").setValue(driver77.getText().toString());


                return false;
            }
        });





        mDatabase.child("77").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael77.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("77").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver77.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("77").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment77.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("77").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date77.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("77").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section77.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("77").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point77.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("77").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location77.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("77").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name77.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("77").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target77.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("77").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team77.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm78.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("78").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("78").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s78.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("78").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("78").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("78").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm78.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("78").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s78.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael78.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("78").child("tmael").setValue(tmael78.getText().toString());



                return false;
            }
        });
        comment78.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("78").child("comment").setValue(comment78.getText().toString());


                return false;
            }
        });
        driver78.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("78").child("driver").setValue(driver78.getText().toString());


                return false;
            }
        });





        mDatabase.child("78").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael78.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("78").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver78.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("78").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment78.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("78").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date78.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("78").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section78.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("78").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point78.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("78").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location78.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("78").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name78.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("78").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target78.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("78").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team78.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm79.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("79").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("79").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s79.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("79").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("79").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("79").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm79.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("79").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s79.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael79.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("79").child("tmael").setValue(tmael79.getText().toString());



                return false;
            }
        });
        comment79.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("79").child("comment").setValue(comment79.getText().toString());


                return false;
            }
        });
        driver79.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("79").child("driver").setValue(driver79.getText().toString());


                return false;
            }
        });





        mDatabase.child("79").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael79.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("79").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver79.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("79").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment79.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("79").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date79.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("79").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section79.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("79").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point79.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("79").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location79.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("79").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name79.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("79").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target79.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("79").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team79.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm80.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("80").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("80").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s80.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("80").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("80").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("80").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm80.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("80").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s80.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael80.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("80").child("tmael").setValue(tmael80.getText().toString());



                return false;
            }
        });
        comment80.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("80").child("comment").setValue(comment80.getText().toString());


                return false;
            }
        });
        driver80.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("80").child("driver").setValue(driver80.getText().toString());


                return false;
            }
        });





        mDatabase.child("80").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael80.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("80").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver80.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("80").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment80.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("80").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date80.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("80").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section80.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("80").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point80.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("80").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location80.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("80").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name80.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("80").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target80.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("80").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team80.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm81.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("81").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("81").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s81.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("81").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("81").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("81").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm81.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("81").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s81.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael81.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("81").child("tmael").setValue(tmael81.getText().toString());



                return false;
            }
        });
        comment81.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("81").child("comment").setValue(comment81.getText().toString());


                return false;
            }
        });
        driver81.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("81").child("driver").setValue(driver81.getText().toString());


                return false;
            }
        });





        mDatabase.child("81").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael81.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("81").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver81.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("81").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment81.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("81").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date81.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("81").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section81.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("81").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point81.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("81").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location81.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("81").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name81.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("81").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target81.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("81").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team81.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm82.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("82").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("82").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s82.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("82").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("82").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("82").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm82.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("82").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s82.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael82.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("82").child("tmael").setValue(tmael82.getText().toString());



                return false;
            }
        });
        comment82.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("82").child("comment").setValue(comment82.getText().toString());


                return false;
            }
        });
        driver82.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("82").child("driver").setValue(driver82.getText().toString());


                return false;
            }
        });





        mDatabase.child("82").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael82.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("82").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver82.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("82").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment82.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("82").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date82.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("82").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section82.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("82").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point82.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("82").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location82.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("82").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name82.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("82").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target82.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("82").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team82.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        sm83.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("83").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("83").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s83.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("83").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("83").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("83").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm83.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("83").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s83.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael83.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("83").child("tmael").setValue(tmael83.getText().toString());



                return false;
            }
        });
        comment83.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("83").child("comment").setValue(comment83.getText().toString());


                return false;
            }
        });
        driver83.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("83").child("driver").setValue(driver83.getText().toString());


                return false;
            }
        });





        mDatabase.child("83").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael83.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("83").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver83.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("83").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment83.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("83").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date83.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("83").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section83.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("83").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point83.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("83").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location83.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("83").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name83.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("83").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target83.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("83").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team83.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm84.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("84").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("84").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s84.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("84").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("84").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("84").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm84.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("84").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s84.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael84.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("84").child("tmael").setValue(tmael84.getText().toString());



                return false;
            }
        });
        comment84.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("84").child("comment").setValue(comment84.getText().toString());


                return false;
            }
        });
        driver84.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("84").child("driver").setValue(driver84.getText().toString());


                return false;
            }
        });





        mDatabase.child("84").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael84.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("84").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver84.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("84").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment84.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("84").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date84.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("84").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section84.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("84").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point84.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("84").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location84.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("84").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name84.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("84").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target84.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("84").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team84.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm85.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("85").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("85").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s85.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("85").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("85").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("85").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm85.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("85").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s85.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael85.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("85").child("tmael").setValue(tmael85.getText().toString());



                return false;
            }
        });
        comment85.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("85").child("comment").setValue(comment85.getText().toString());


                return false;
            }
        });
        driver85.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("85").child("driver").setValue(driver85.getText().toString());


                return false;
            }
        });





        mDatabase.child("85").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael85.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("85").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver85.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("85").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment85.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("85").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date85.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("85").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section85.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("85").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point85.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("85").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location85.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("85").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name85.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("85").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target85.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("85").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team85.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm86.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("86").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("86").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s86.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("86").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("86").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("86").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm86.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("86").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s86.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael86.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("86").child("tmael").setValue(tmael86.getText().toString());



                return false;
            }
        });
        comment86.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("86").child("comment").setValue(comment86.getText().toString());


                return false;
            }
        });
        driver86.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("86").child("driver").setValue(driver86.getText().toString());


                return false;
            }
        });





        mDatabase.child("86").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael86.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("86").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver86.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("86").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment86.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("86").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date86.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("86").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section86.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("86").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point86.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("86").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location86.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("86").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name86.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("86").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target86.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("86").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team86.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm87.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("87").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("87").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s87.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("87").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("87").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("87").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm87.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("87").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s87.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael87.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("87").child("tmael").setValue(tmael87.getText().toString());



                return false;
            }
        });
        comment87.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("87").child("comment").setValue(comment87.getText().toString());


                return false;
            }
        });
        driver87.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("87").child("driver").setValue(driver87.getText().toString());


                return false;
            }
        });





        mDatabase.child("87").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael87.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("87").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver87.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("87").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment87.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("87").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date87.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("87").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section87.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("87").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point87.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("87").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location87.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("87").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name87.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("87").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target87.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("87").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team87.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm88.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("88").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("88").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s88.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("88").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("88").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("88").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm88.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("88").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s88.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael88.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("88").child("tmael").setValue(tmael88.getText().toString());



                return false;
            }
        });
        comment88.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("88").child("comment").setValue(comment88.getText().toString());


                return false;
            }
        });
        driver88.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("88").child("driver").setValue(driver88.getText().toString());


                return false;
            }
        });





        mDatabase.child("88").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael88.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("88").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver88.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("88").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment88.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("88").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date88.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("88").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section88.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("88").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point88.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("88").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location88.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("88").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name88.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("88").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target88.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("88").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team88.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm89.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("89").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("89").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s89.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("89").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("89").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("89").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm89.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("89").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s89.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael89.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("89").child("tmael").setValue(tmael89.getText().toString());



                return false;
            }
        });
        comment89.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("89").child("comment").setValue(comment89.getText().toString());


                return false;
            }
        });
        driver89.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("89").child("driver").setValue(driver89.getText().toString());


                return false;
            }
        });





        mDatabase.child("89").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael89.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("89").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver89.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("89").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment89.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("89").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date89.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("89").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section89.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("89").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point89.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("89").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location89.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("89").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name89.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("89").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target89.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("89").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team89.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm90.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("90").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("90").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s90.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("90").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("90").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("90").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm90.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("90").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s90.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael90.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("90").child("tmael").setValue(tmael90.getText().toString());



                return false;
            }
        });
        comment90.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("90").child("comment").setValue(comment90.getText().toString());


                return false;
            }
        });
        driver90.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("90").child("driver").setValue(driver90.getText().toString());


                return false;
            }
        });





        mDatabase.child("90").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael90.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("90").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver90.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("90").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment90.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("90").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date90.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("90").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section90.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("90").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point90.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("90").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location90.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("90").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name90.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("90").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target90.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("90").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team90.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm91.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("91").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("91").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s91.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("91").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("91").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("91").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm91.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("91").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s91.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael91.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("91").child("tmael").setValue(tmael91.getText().toString());



                return false;
            }
        });
        comment91.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("91").child("comment").setValue(comment91.getText().toString());


                return false;
            }
        });
        driver91.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("91").child("driver").setValue(driver91.getText().toString());


                return false;
            }
        });





        mDatabase.child("91").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael91.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("91").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver91.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("91").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment91.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("91").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date91.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("91").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section91.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("91").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point91.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("91").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location91.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("91").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name91.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("91").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target91.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("91").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team91.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm92.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("92").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("92").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s92.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("92").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("92").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("92").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm92.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("92").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s92.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael92.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("92").child("tmael").setValue(tmael92.getText().toString());



                return false;
            }
        });
        comment92.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("92").child("comment").setValue(comment92.getText().toString());


                return false;
            }
        });
        driver92.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("92").child("driver").setValue(driver92.getText().toString());


                return false;
            }
        });





        mDatabase.child("92").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael92.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("92").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver92.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("92").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment92.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("92").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date92.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("92").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section92.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("92").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point92.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("92").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location92.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("92").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name92.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("92").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target92.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("92").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team92.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm93.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("93").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("93").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s93.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("93").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("93").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("93").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm93.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("93").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s93.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael93.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("93").child("tmael").setValue(tmael93.getText().toString());



                return false;
            }
        });
        comment93.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("93").child("comment").setValue(comment93.getText().toString());


                return false;
            }
        });
        driver93.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("93").child("driver").setValue(driver93.getText().toString());


                return false;
            }
        });





        mDatabase.child("93").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael93.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("93").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver93.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("93").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment93.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("93").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date93.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("93").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section93.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("93").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point93.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("93").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location93.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("93").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name93.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("93").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target93.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("93").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team93.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm94.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("94").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("94").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s94.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("94").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("94").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("94").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm94.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("94").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s94.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael94.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("94").child("tmael").setValue(tmael94.getText().toString());



                return false;
            }
        });
        comment94.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("94").child("comment").setValue(comment94.getText().toString());


                return false;
            }
        });
        driver94.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("94").child("driver").setValue(driver94.getText().toString());


                return false;
            }
        });





        mDatabase.child("94").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael94.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("94").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver94.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("94").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment94.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("94").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date94.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("94").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section94.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("94").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point94.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("94").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location94.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("94").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name94.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("94").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target94.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("94").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team94.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm95.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("95").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("95").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s95.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("95").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("95").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("95").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm95.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("95").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s95.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael95.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("95").child("tmael").setValue(tmael95.getText().toString());



                return false;
            }
        });
        comment95.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("95").child("comment").setValue(comment95.getText().toString());


                return false;
            }
        });
        driver95.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("95").child("driver").setValue(driver95.getText().toString());


                return false;
            }
        });





        mDatabase.child("95").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael95.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("95").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver95.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("95").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment95.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("95").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date95.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("95").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section95.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("95").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point95.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("95").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location95.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("95").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name95.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("95").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target95.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("95").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team95.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm96.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("96").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("96").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s96.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("96").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("96").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("96").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm96.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("96").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s96.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael96.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("96").child("tmael").setValue(tmael96.getText().toString());



                return false;
            }
        });
        comment96.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("96").child("comment").setValue(comment96.getText().toString());


                return false;
            }
        });
        driver96.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("96").child("driver").setValue(driver96.getText().toString());


                return false;
            }
        });





        mDatabase.child("96").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael96.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("96").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver96.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("96").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment96.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("96").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date96.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("96").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section96.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("96").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point96.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("96").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location96.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("96").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name96.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("96").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target96.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("96").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team96.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm97.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("97").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("97").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s97.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("97").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("97").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("97").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm97.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("97").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s97.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael97.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("97").child("tmael").setValue(tmael97.getText().toString());



                return false;
            }
        });
        comment97.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("97").child("comment").setValue(comment97.getText().toString());


                return false;
            }
        });
        driver97.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("97").child("driver").setValue(driver97.getText().toString());


                return false;
            }
        });





        mDatabase.child("97").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael97.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("97").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver97.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("97").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment97.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("97").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date97.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("97").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section97.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("97").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point97.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("97").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location97.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("97").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name97.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("97").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target97.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("97").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team97.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm98.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("98").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("98").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s98.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("98").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("98").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("98").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm98.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("98").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s98.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael98.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("98").child("tmael").setValue(tmael98.getText().toString());



                return false;
            }
        });
        comment98.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("98").child("comment").setValue(comment98.getText().toString());


                return false;
            }
        });
        driver98.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("98").child("driver").setValue(driver98.getText().toString());


                return false;
            }
        });





        mDatabase.child("98").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael98.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("98").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver98.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("98").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment98.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("98").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date98.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("98").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section98.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("98").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point98.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("98").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location98.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("98").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name98.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("98").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target98.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("98").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team98.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm99.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("99").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("99").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s99.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("99").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("99").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("99").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm99.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("99").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s99.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael99.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("99").child("tmael").setValue(tmael99.getText().toString());



                return false;
            }
        });
        comment99.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("99").child("comment").setValue(comment99.getText().toString());


                return false;
            }
        });
        driver99.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("99").child("driver").setValue(driver99.getText().toString());


                return false;
            }
        });





        mDatabase.child("99").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael99.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("99").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver99.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("99").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment99.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("99").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date99.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("99").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section99.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("99").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point99.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("99").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location99.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("99").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name99.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("99").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target99.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("99").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team99.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm100.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("100").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("100").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s100.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("100").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("100").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("100").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm100.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("100").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s100.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael100.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("100").child("tmael").setValue(tmael100.getText().toString());



                return false;
            }
        });
        comment100.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("100").child("comment").setValue(comment100.getText().toString());


                return false;
            }
        });
        driver100.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("100").child("driver").setValue(driver100.getText().toString());


                return false;
            }
        });





        mDatabase.child("100").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael100.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("100").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver100.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("100").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment100.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("100").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date100.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("100").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section100.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("100").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point100.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("100").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location100.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("100").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name100.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("100").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target100.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("100").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team100.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm101.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("101").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("101").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s101.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("101").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("101").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("101").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm101.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("101").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s101.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael101.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("101").child("tmael").setValue(tmael101.getText().toString());



                return false;
            }
        });
        comment101.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("101").child("comment").setValue(comment101.getText().toString());


                return false;
            }
        });
        driver101.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("101").child("driver").setValue(driver101.getText().toString());


                return false;
            }
        });





        mDatabase.child("101").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael101.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("101").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver101.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("101").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment101.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("101").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date101.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("101").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section101.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("101").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point101.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("101").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location101.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("101").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name101.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("101").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target101.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("101").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team101.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm102.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("102").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("102").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s102.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("102").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("102").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("102").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm102.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("102").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s102.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael102.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("102").child("tmael").setValue(tmael102.getText().toString());



                return false;
            }
        });
        comment102.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("102").child("comment").setValue(comment102.getText().toString());


                return false;
            }
        });
        driver102.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("102").child("driver").setValue(driver102.getText().toString());


                return false;
            }
        });





        mDatabase.child("102").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael102.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("102").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver102.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("102").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment102.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("102").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date102.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("102").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section102.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("102").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point102.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("102").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location102.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("102").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name102.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("102").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target102.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("102").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team102.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm103.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("103").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("103").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s103.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("103").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("103").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("103").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm103.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("103").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s103.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael103.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("103").child("tmael").setValue(tmael103.getText().toString());



                return false;
            }
        });
        comment103.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("103").child("comment").setValue(comment103.getText().toString());


                return false;
            }
        });
        driver103.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("103").child("driver").setValue(driver103.getText().toString());


                return false;
            }
        });





        mDatabase.child("103").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael103.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("103").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver103.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("103").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment103.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("103").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date103.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("103").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section103.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("103").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point103.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("103").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location103.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("103").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name103.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("103").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target103.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("103").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team103.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm104.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("104").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("104").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s104.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("104").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("104").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("104").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm104.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("104").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s104.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael104.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("104").child("tmael").setValue(tmael104.getText().toString());



                return false;
            }
        });
        comment104.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("104").child("comment").setValue(comment104.getText().toString());


                return false;
            }
        });
        driver104.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("104").child("driver").setValue(driver104.getText().toString());


                return false;
            }
        });





        mDatabase.child("104").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael104.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("104").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver104.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("104").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment104.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("104").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date104.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("104").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section104.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("104").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point104.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("104").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location104.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("104").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name104.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("104").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target104.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("104").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team104.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm105.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("105").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("105").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s105.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("105").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("105").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("105").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm105.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("105").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s105.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael105.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("105").child("tmael").setValue(tmael105.getText().toString());



                return false;
            }
        });
        comment105.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("105").child("comment").setValue(comment105.getText().toString());


                return false;
            }
        });
        driver105.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("105").child("driver").setValue(driver105.getText().toString());


                return false;
            }
        });





        mDatabase.child("105").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael105.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("105").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver105.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("105").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment105.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("105").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date105.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("105").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section105.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("105").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point105.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("105").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location105.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("105").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name105.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("105").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target105.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("105").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team105.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm106.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("106").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("106").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s106.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("106").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("106").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("106").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm106.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("106").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s106.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael106.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("106").child("tmael").setValue(tmael106.getText().toString());



                return false;
            }
        });
        comment106.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("106").child("comment").setValue(comment106.getText().toString());


                return false;
            }
        });
        driver106.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("106").child("driver").setValue(driver106.getText().toString());


                return false;
            }
        });





        mDatabase.child("106").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael106.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("106").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver106.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("106").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment106.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("106").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date106.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("106").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section106.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("106").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point106.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("106").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location106.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("106").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name106.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("106").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target106.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("106").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team106.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm107.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("107").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("107").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s107.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("107").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("107").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("107").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm107.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("107").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s107.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael107.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("107").child("tmael").setValue(tmael107.getText().toString());



                return false;
            }
        });
        comment107.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("107").child("comment").setValue(comment107.getText().toString());


                return false;
            }
        });
        driver107.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("107").child("driver").setValue(driver107.getText().toString());


                return false;
            }
        });





        mDatabase.child("107").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael107.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("107").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver107.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("107").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment107.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("107").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date107.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("107").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section107.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("107").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point107.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("107").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location107.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("107").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name107.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("107").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target107.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("107").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team107.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm108.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("108").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("108").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s108.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("108").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("108").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("108").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm108.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("108").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s108.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael108.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("108").child("tmael").setValue(tmael108.getText().toString());



                return false;
            }
        });
        comment108.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("108").child("comment").setValue(comment108.getText().toString());


                return false;
            }
        });
        driver108.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("108").child("driver").setValue(driver108.getText().toString());


                return false;
            }
        });





        mDatabase.child("108").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael108.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("108").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver108.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("108").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment108.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("108").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date108.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("108").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section108.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("108").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point108.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("108").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location108.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("108").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name108.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("108").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target108.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("108").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team108.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm109.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("109").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("109").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s109.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("109").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("109").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("109").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm109.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("109").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s109.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael109.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("109").child("tmael").setValue(tmael109.getText().toString());



                return false;
            }
        });
        comment109.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("109").child("comment").setValue(comment109.getText().toString());


                return false;
            }
        });
        driver109.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("109").child("driver").setValue(driver109.getText().toString());


                return false;
            }
        });





        mDatabase.child("109").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael109.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("109").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver109.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("109").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment109.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("109").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date109.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("109").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section109.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("109").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point109.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("109").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location109.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("109").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name109.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("109").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target109.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("109").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team109.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm110.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("110").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("110").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s110.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("110").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("110").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("110").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm110.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("110").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s110.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael110.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("110").child("tmael").setValue(tmael110.getText().toString());



                return false;
            }
        });
        comment110.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("110").child("comment").setValue(comment110.getText().toString());


                return false;
            }
        });
        driver110.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("110").child("driver").setValue(driver110.getText().toString());


                return false;
            }
        });





        mDatabase.child("110").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael110.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("110").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver110.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("110").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment110.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("110").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date110.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("110").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section110.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("110").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point110.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("110").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location110.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("110").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name110.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("110").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target110.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("110").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team110.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm111.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("111").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("111").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s111.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("111").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("111").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("111").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm111.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("111").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s111.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael111.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("111").child("tmael").setValue(tmael111.getText().toString());



                return false;
            }
        });
        comment111.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("111").child("comment").setValue(comment111.getText().toString());


                return false;
            }
        });
        driver111.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("111").child("driver").setValue(driver111.getText().toString());


                return false;
            }
        });





        mDatabase.child("111").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael111.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("111").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver111.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("111").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment111.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("111").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date111.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("111").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section111.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("111").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point111.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("111").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location111.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("111").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name111.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("111").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target111.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("111").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team111.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm112.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("112").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("112").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s112.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("112").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("112").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("112").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm112.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("112").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s112.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael112.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("112").child("tmael").setValue(tmael112.getText().toString());



                return false;
            }
        });
        comment112.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("112").child("comment").setValue(comment112.getText().toString());


                return false;
            }
        });
        driver112.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("112").child("driver").setValue(driver112.getText().toString());


                return false;
            }
        });





        mDatabase.child("112").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael112.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("112").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver112.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("112").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment112.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("112").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date112.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("112").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section112.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("112").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point112.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("112").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location112.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("112").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name112.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("112").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target112.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("112").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team112.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm113.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("113").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("113").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s113.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("113").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("113").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("113").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm113.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("113").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s113.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael113.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("113").child("tmael").setValue(tmael113.getText().toString());



                return false;
            }
        });
        comment113.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("113").child("comment").setValue(comment113.getText().toString());


                return false;
            }
        });
        driver113.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("113").child("driver").setValue(driver113.getText().toString());


                return false;
            }
        });





        mDatabase.child("113").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael113.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("113").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver113.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("113").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment113.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("113").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date113.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("113").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section113.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("113").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point113.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("113").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location113.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("113").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name113.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("113").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target113.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("113").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team113.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm114.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("114").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("114").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s114.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("114").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("114").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("114").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm114.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("114").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s114.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael114.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("114").child("tmael").setValue(tmael114.getText().toString());



                return false;
            }
        });
        comment114.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("114").child("comment").setValue(comment114.getText().toString());


                return false;
            }
        });
        driver114.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("114").child("driver").setValue(driver114.getText().toString());


                return false;
            }
        });





        mDatabase.child("114").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael114.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("114").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver114.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("114").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment114.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("114").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date114.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("114").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section114.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("114").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point114.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("114").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location114.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("114").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name114.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("114").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target114.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("114").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team114.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm115.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("115").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("115").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s115.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("115").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("115").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("115").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm115.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("115").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s115.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael115.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("115").child("tmael").setValue(tmael115.getText().toString());



                return false;
            }
        });
        comment115.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("115").child("comment").setValue(comment115.getText().toString());


                return false;
            }
        });
        driver115.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("115").child("driver").setValue(driver115.getText().toString());


                return false;
            }
        });





        mDatabase.child("115").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael115.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("115").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver115.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("115").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment115.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("115").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date115.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("115").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section115.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("115").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point115.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("115").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location115.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("115").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name115.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("115").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target115.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("115").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team115.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm116.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("116").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("116").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s116.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("116").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("116").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("116").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm116.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("116").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s116.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael116.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("116").child("tmael").setValue(tmael116.getText().toString());



                return false;
            }
        });
        comment116.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("116").child("comment").setValue(comment116.getText().toString());


                return false;
            }
        });
        driver116.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("116").child("driver").setValue(driver116.getText().toString());


                return false;
            }
        });





        mDatabase.child("116").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael116.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("116").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver116.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("116").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment116.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("116").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date116.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("116").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section116.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("116").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point116.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("116").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location116.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("116").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name116.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("116").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target116.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("116").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team116.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm117.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("117").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("117").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s117.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("117").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("117").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("117").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm117.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("117").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s117.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael117.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("117").child("tmael").setValue(tmael117.getText().toString());



                return false;
            }
        });
        comment117.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("117").child("comment").setValue(comment117.getText().toString());


                return false;
            }
        });
        driver117.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("117").child("driver").setValue(driver117.getText().toString());


                return false;
            }
        });





        mDatabase.child("117").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael117.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("117").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver117.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("117").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment117.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("117").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date117.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("117").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section117.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("117").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point117.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("117").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location117.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("117").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name117.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("117").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target117.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("117").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team117.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm118.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("118").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("118").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s118.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("118").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("118").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("118").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm118.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("118").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s118.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael118.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("118").child("tmael").setValue(tmael118.getText().toString());



                return false;
            }
        });
        comment118.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("118").child("comment").setValue(comment118.getText().toString());


                return false;
            }
        });
        driver118.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("118").child("driver").setValue(driver118.getText().toString());


                return false;
            }
        });





        mDatabase.child("118").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael118.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("118").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver118.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("118").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment118.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("118").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date118.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("118").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section118.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("118").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point118.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("118").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location118.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("118").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name118.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("118").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target118.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("118").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team118.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm119.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("119").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("119").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s119.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("119").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("119").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("119").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm119.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("119").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s119.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael119.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("119").child("tmael").setValue(tmael119.getText().toString());



                return false;
            }
        });
        comment119.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("119").child("comment").setValue(comment119.getText().toString());


                return false;
            }
        });
        driver119.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("119").child("driver").setValue(driver119.getText().toString());


                return false;
            }
        });





        mDatabase.child("119").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael119.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("119").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver119.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("119").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment119.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("119").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date119.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("119").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section119.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("119").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point119.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("119").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location119.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("119").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name119.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("119").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target119.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("119").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team119.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm120.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("120").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("120").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s120.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("120").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("120").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("120").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm120.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("120").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s120.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael120.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("120").child("tmael").setValue(tmael120.getText().toString());



                return false;
            }
        });
        comment120.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("120").child("comment").setValue(comment120.getText().toString());


                return false;
            }
        });
        driver120.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("120").child("driver").setValue(driver120.getText().toString());


                return false;
            }
        });





        mDatabase.child("120").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael120.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("120").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver120.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("120").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment120.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("120").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date120.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("120").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section120.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("120").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point120.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("120").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location120.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("120").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name120.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("120").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target120.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("120").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team120.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm121.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("121").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("121").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s121.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("121").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("121").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("121").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm121.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("121").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s121.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael121.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("121").child("tmael").setValue(tmael121.getText().toString());



                return false;
            }
        });
        comment121.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("121").child("comment").setValue(comment121.getText().toString());


                return false;
            }
        });
        driver121.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("121").child("driver").setValue(driver121.getText().toString());


                return false;
            }
        });





        mDatabase.child("121").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael121.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("121").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver121.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("121").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment121.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("121").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date121.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("121").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section121.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("121").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point121.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("121").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location121.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("121").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name121.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("121").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target121.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("121").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team121.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm122.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("122").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("122").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s122.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("122").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("122").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("122").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm122.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("122").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s122.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael122.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("122").child("tmael").setValue(tmael122.getText().toString());



                return false;
            }
        });
        comment122.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("122").child("comment").setValue(comment122.getText().toString());


                return false;
            }
        });
        driver122.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("122").child("driver").setValue(driver122.getText().toString());


                return false;
            }
        });





        mDatabase.child("122").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael122.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("122").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver122.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("122").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment122.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("122").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date122.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("122").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section122.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("122").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point122.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("122").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location122.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("122").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name122.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("122").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target122.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("122").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team122.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm123.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("123").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("123").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s123.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("123").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("123").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("123").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm123.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("123").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s123.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael123.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("123").child("tmael").setValue(tmael123.getText().toString());



                return false;
            }
        });
        comment123.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("123").child("comment").setValue(comment123.getText().toString());


                return false;
            }
        });
        driver123.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("123").child("driver").setValue(driver123.getText().toString());


                return false;
            }
        });





        mDatabase.child("123").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael123.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("123").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver123.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("123").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment123.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("123").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date123.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("123").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section123.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("123").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point123.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("123").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location123.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("123").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name123.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("123").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target123.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("123").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team123.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm124.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("124").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("124").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s124.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("124").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("124").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("124").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm124.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("124").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s124.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael124.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("124").child("tmael").setValue(tmael124.getText().toString());



                return false;
            }
        });
        comment124.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("124").child("comment").setValue(comment124.getText().toString());


                return false;
            }
        });
        driver124.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("124").child("driver").setValue(driver124.getText().toString());


                return false;
            }
        });





        mDatabase.child("124").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael124.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("124").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver124.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("124").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment124.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("124").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date124.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("124").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section124.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("124").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point124.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("124").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location124.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("124").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name124.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("124").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target124.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("124").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team124.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm125.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("125").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("125").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s125.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("125").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("125").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("125").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm125.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("125").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s125.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael125.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("125").child("tmael").setValue(tmael125.getText().toString());



                return false;
            }
        });
        comment125.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("125").child("comment").setValue(comment125.getText().toString());


                return false;
            }
        });
        driver125.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("125").child("driver").setValue(driver125.getText().toString());


                return false;
            }
        });





        mDatabase.child("125").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael125.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("125").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver125.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("125").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment125.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("125").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date125.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("125").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section125.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("125").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point125.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("125").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location125.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("125").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name125.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("125").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target125.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("125").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team125.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm126.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("126").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("126").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s126.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("126").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("126").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("126").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm126.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("126").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s126.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael126.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("126").child("tmael").setValue(tmael126.getText().toString());



                return false;
            }
        });
        comment126.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("126").child("comment").setValue(comment126.getText().toString());


                return false;
            }
        });
        driver126.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("126").child("driver").setValue(driver126.getText().toString());


                return false;
            }
        });





        mDatabase.child("126").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael126.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("126").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver126.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("126").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment126.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("126").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date126.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("126").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section126.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("126").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point126.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("126").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location126.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("126").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name126.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("126").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target126.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("126").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team126.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm127.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("127").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("127").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s127.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("127").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("127").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("127").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm127.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("127").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s127.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael127.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("127").child("tmael").setValue(tmael127.getText().toString());



                return false;
            }
        });
        comment127.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("127").child("comment").setValue(comment127.getText().toString());


                return false;
            }
        });
        driver127.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("127").child("driver").setValue(driver127.getText().toString());


                return false;
            }
        });





        mDatabase.child("127").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael127.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("127").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver127.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("127").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment127.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("127").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date127.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("127").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section127.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("127").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point127.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("127").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location127.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("127").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name127.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("127").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target127.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("127").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team127.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm128.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("128").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("128").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s128.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("128").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("128").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("128").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm128.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("128").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s128.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael128.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("128").child("tmael").setValue(tmael128.getText().toString());



                return false;
            }
        });
        comment128.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("128").child("comment").setValue(comment128.getText().toString());


                return false;
            }
        });
        driver128.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("128").child("driver").setValue(driver128.getText().toString());


                return false;
            }
        });





        mDatabase.child("128").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael128.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("128").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver128.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("128").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment128.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("128").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date128.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("128").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section128.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("128").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point128.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("128").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location128.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("128").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name128.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("128").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target128.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("128").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team128.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm129.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("129").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("129").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s129.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("129").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("129").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("129").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm129.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("129").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s129.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael129.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("129").child("tmael").setValue(tmael129.getText().toString());



                return false;
            }
        });
        comment129.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("129").child("comment").setValue(comment129.getText().toString());


                return false;
            }
        });
        driver129.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("129").child("driver").setValue(driver129.getText().toString());


                return false;
            }
        });





        mDatabase.child("129").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael129.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("129").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver129.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("129").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment129.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("129").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date129.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("129").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section129.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("129").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point129.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("129").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location129.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("129").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name129.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("129").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target129.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("129").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team129.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm130.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("130").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("130").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s130.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("130").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("130").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("130").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm130.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("130").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s130.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael130.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("130").child("tmael").setValue(tmael130.getText().toString());



                return false;
            }
        });
        comment130.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("130").child("comment").setValue(comment130.getText().toString());


                return false;
            }
        });
        driver130.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("130").child("driver").setValue(driver130.getText().toString());


                return false;
            }
        });





        mDatabase.child("130").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael130.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("130").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver130.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("130").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment130.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("130").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date130.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("130").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section130.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("130").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point130.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("130").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location130.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("130").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name130.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("130").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target130.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("130").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team130.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm131.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("131").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("131").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s131.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("131").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("131").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("131").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm131.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("131").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s131.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael131.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("131").child("tmael").setValue(tmael131.getText().toString());



                return false;
            }
        });
        comment131.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("131").child("comment").setValue(comment131.getText().toString());


                return false;
            }
        });
        driver131.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("131").child("driver").setValue(driver131.getText().toString());


                return false;
            }
        });





        mDatabase.child("131").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael131.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("131").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver131.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("131").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment131.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("131").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date131.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("131").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section131.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("131").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point131.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("131").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location131.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("131").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name131.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("131").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target131.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("131").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team131.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm132.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("132").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("132").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s132.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("132").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("132").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("132").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm132.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("132").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s132.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael132.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("132").child("tmael").setValue(tmael132.getText().toString());



                return false;
            }
        });
        comment132.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("132").child("comment").setValue(comment132.getText().toString());


                return false;
            }
        });
        driver132.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("132").child("driver").setValue(driver132.getText().toString());


                return false;
            }
        });





        mDatabase.child("132").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael132.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("132").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver132.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("132").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment132.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("132").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date132.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("132").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section132.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("132").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point132.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("132").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location132.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("132").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name132.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("132").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target132.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("132").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team132.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm133.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("133").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("133").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s133.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("133").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("133").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("133").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm133.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("133").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s133.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael133.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("133").child("tmael").setValue(tmael133.getText().toString());



                return false;
            }
        });
        comment133.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("133").child("comment").setValue(comment133.getText().toString());


                return false;
            }
        });
        driver133.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("133").child("driver").setValue(driver133.getText().toString());


                return false;
            }
        });





        mDatabase.child("133").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael133.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("133").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver133.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("133").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment133.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("133").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date133.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("133").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section133.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("133").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point133.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("133").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location133.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("133").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name133.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("133").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target133.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("133").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team133.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm134.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("134").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("134").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s134.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("134").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("134").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("134").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm134.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("134").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s134.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael134.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("134").child("tmael").setValue(tmael134.getText().toString());



                return false;
            }
        });
        comment134.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("134").child("comment").setValue(comment134.getText().toString());


                return false;
            }
        });
        driver134.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("134").child("driver").setValue(driver134.getText().toString());


                return false;
            }
        });





        mDatabase.child("134").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael134.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("134").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver134.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("134").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment134.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("134").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date134.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("134").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section134.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("134").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point134.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("134").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location134.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("134").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name134.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("134").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target134.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("134").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team134.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm135.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("135").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("135").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s135.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("135").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("135").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("135").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm135.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("135").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s135.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael135.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("135").child("tmael").setValue(tmael135.getText().toString());



                return false;
            }
        });
        comment135.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("135").child("comment").setValue(comment135.getText().toString());


                return false;
            }
        });
        driver135.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("135").child("driver").setValue(driver135.getText().toString());


                return false;
            }
        });





        mDatabase.child("135").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael135.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("135").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver135.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("135").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment135.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("135").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date135.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("135").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section135.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("135").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point135.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("135").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location135.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("135").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name135.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("135").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target135.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("135").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team135.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm136.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("136").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("136").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s136.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("136").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("136").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("136").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm136.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("136").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s136.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael136.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("136").child("tmael").setValue(tmael136.getText().toString());



                return false;
            }
        });
        comment136.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("136").child("comment").setValue(comment136.getText().toString());


                return false;
            }
        });
        driver136.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("136").child("driver").setValue(driver136.getText().toString());


                return false;
            }
        });





        mDatabase.child("136").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael136.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("136").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver136.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("136").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment136.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("136").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date136.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("136").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section136.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("136").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point136.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("136").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location136.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("136").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name136.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("136").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target136.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("136").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team136.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm137.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("137").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("137").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s137.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("137").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("137").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("137").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm137.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("137").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s137.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael137.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("137").child("tmael").setValue(tmael137.getText().toString());



                return false;
            }
        });
        comment137.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("137").child("comment").setValue(comment137.getText().toString());


                return false;
            }
        });
        driver137.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("137").child("driver").setValue(driver137.getText().toString());


                return false;
            }
        });





        mDatabase.child("137").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael137.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("137").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver137.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("137").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment137.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("137").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date137.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("137").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section137.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("137").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point137.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("137").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location137.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("137").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name137.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("137").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target137.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("137").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team137.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm138.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("138").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("138").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s138.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("138").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("138").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("138").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm138.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("138").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s138.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael138.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("138").child("tmael").setValue(tmael138.getText().toString());



                return false;
            }
        });
        comment138.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("138").child("comment").setValue(comment138.getText().toString());


                return false;
            }
        });
        driver138.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("138").child("driver").setValue(driver138.getText().toString());


                return false;
            }
        });





        mDatabase.child("138").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael138.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("138").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver138.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("138").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment138.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("138").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date138.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("138").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section138.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("138").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point138.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("138").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location138.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("138").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name138.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("138").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target138.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("138").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team138.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm139.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("139").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("139").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s139.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("139").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("139").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("139").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm139.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("139").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s139.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael139.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("139").child("tmael").setValue(tmael139.getText().toString());



                return false;
            }
        });
        comment139.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("139").child("comment").setValue(comment139.getText().toString());


                return false;
            }
        });
        driver139.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("139").child("driver").setValue(driver139.getText().toString());


                return false;
            }
        });





        mDatabase.child("139").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael139.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("139").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver139.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("139").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment139.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("139").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date139.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("139").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section139.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("139").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point139.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("139").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location139.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("139").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name139.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("139").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target139.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("139").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team139.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm140.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("140").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("140").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s140.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("140").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("140").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("140").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm140.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("140").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s140.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael140.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("140").child("tmael").setValue(tmael140.getText().toString());



                return false;
            }
        });
        comment140.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("140").child("comment").setValue(comment140.getText().toString());


                return false;
            }
        });
        driver140.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("140").child("driver").setValue(driver140.getText().toString());


                return false;
            }
        });





        mDatabase.child("140").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael140.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("140").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver140.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("140").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment140.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("140").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date140.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("140").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section140.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("140").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point140.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("140").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location140.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("140").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name140.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("140").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target140.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("140").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team140.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm141.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("141").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("141").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s141.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("141").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("141").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("141").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm141.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("141").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s141.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael141.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("141").child("tmael").setValue(tmael141.getText().toString());



                return false;
            }
        });
        comment141.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("141").child("comment").setValue(comment141.getText().toString());


                return false;
            }
        });
        driver141.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("141").child("driver").setValue(driver141.getText().toString());


                return false;
            }
        });





        mDatabase.child("141").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael141.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("141").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver141.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("141").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment141.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("141").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date141.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("141").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section141.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("141").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point141.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("141").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location141.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("141").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name141.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("141").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target141.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("141").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team141.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm142.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("142").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("142").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s142.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("142").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("142").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("142").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm142.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("142").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s142.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael142.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("142").child("tmael").setValue(tmael142.getText().toString());



                return false;
            }
        });
        comment142.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("142").child("comment").setValue(comment142.getText().toString());


                return false;
            }
        });
        driver142.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("142").child("driver").setValue(driver142.getText().toString());


                return false;
            }
        });





        mDatabase.child("142").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael142.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("142").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver142.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("142").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment142.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("142").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date142.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("142").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section142.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("142").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point142.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("142").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location142.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("142").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name142.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("142").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target142.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("142").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team142.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm143.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("143").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("143").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s143.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("143").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("143").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("143").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm143.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("143").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s143.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael143.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("143").child("tmael").setValue(tmael143.getText().toString());



                return false;
            }
        });
        comment143.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("143").child("comment").setValue(comment143.getText().toString());


                return false;
            }
        });
        driver143.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("143").child("driver").setValue(driver143.getText().toString());


                return false;
            }
        });





        mDatabase.child("143").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael143.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("143").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver143.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("143").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment143.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("143").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date143.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("143").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section143.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("143").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point143.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("143").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location143.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("143").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name143.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("143").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target143.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("143").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team143.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm144.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("144").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("144").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s144.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("144").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("144").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("144").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm144.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("144").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s144.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael144.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("144").child("tmael").setValue(tmael144.getText().toString());



                return false;
            }
        });
        comment144.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("144").child("comment").setValue(comment144.getText().toString());


                return false;
            }
        });
        driver144.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("144").child("driver").setValue(driver144.getText().toString());


                return false;
            }
        });





        mDatabase.child("144").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael144.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("144").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver144.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("144").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment144.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("144").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date144.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("144").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section144.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("144").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point144.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("144").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location144.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("144").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name144.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("144").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target144.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("144").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team144.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm145.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("145").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("145").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s145.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("145").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("145").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("145").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm145.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("145").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s145.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael145.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("145").child("tmael").setValue(tmael145.getText().toString());



                return false;
            }
        });
        comment145.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("145").child("comment").setValue(comment145.getText().toString());


                return false;
            }
        });
        driver145.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("145").child("driver").setValue(driver145.getText().toString());


                return false;
            }
        });





        mDatabase.child("145").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael145.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("145").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver145.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("145").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment145.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("145").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date145.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("145").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section145.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("145").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point145.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("145").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location145.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("145").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name145.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("145").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target145.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("145").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team145.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        sm147.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("147").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("147").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s147.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("147").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("147").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("147").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm147.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("147").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s147.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael147.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("147").child("tmael").setValue(tmael147.getText().toString());



                return false;
            }
        });
        comment147.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("147").child("comment").setValue(comment147.getText().toString());


                return false;
            }
        });
        driver147.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("147").child("driver").setValue(driver147.getText().toString());


                return false;
            }
        });





        mDatabase.child("147").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael147.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("147").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver147.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("147").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment147.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("147").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date147.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("147").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section147.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("147").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point147.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("147").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location147.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("147").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name147.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("147").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target147.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("147").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team147.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm148.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("148").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("148").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s148.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("148").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("148").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("148").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm148.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("148").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s148.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael148.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("148").child("tmael").setValue(tmael148.getText().toString());



                return false;
            }
        });
        comment148.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("148").child("comment").setValue(comment148.getText().toString());


                return false;
            }
        });
        driver148.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("148").child("driver").setValue(driver148.getText().toString());


                return false;
            }
        });





        mDatabase.child("148").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael148.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("148").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver148.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("148").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment148.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("148").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date148.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("148").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section148.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("148").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point148.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("148").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location148.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("148").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name148.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("148").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target148.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("148").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team148.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm149.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("149").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("149").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s149.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("149").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("149").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("149").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm149.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("149").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s149.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael149.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("149").child("tmael").setValue(tmael149.getText().toString());



                return false;
            }
        });
        comment149.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("149").child("comment").setValue(comment149.getText().toString());


                return false;
            }
        });
        driver149.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("149").child("driver").setValue(driver149.getText().toString());


                return false;
            }
        });





        mDatabase.child("149").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael149.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("149").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver149.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("149").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment149.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("149").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date149.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("149").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section149.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("149").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point149.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("149").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location149.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("149").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name149.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("149").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target149.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("149").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team149.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm150.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("150").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("150").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s150.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("150").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("150").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("150").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm150.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("150").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s150.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael150.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("150").child("tmael").setValue(tmael150.getText().toString());



                return false;
            }
        });
        comment150.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("150").child("comment").setValue(comment150.getText().toString());


                return false;
            }
        });
        driver150.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("150").child("driver").setValue(driver150.getText().toString());


                return false;
            }
        });





        mDatabase.child("150").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael150.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("150").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver150.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("150").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment150.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("150").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date150.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("150").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section150.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("150").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point150.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("150").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location150.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("150").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name150.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("150").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target150.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("150").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team150.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        sm151.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("151").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("151").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s151.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("151").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("151").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("151").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm151.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("151").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s151.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael151.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("151").child("tmael").setValue(tmael151.getText().toString());



                return false;
            }
        });
        comment151.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("151").child("comment").setValue(comment151.getText().toString());


                return false;
            }
        });
        driver151.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("151").child("driver").setValue(driver151.getText().toString());


                return false;
            }
        });





        mDatabase.child("151").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael151.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("151").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver151.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("151").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment151.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("151").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date151.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("151").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section151.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("151").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point151.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("151").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location151.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("151").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name151.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("151").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target151.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("151").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team151.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm152.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("152").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("152").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s152.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("152").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("152").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("152").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm152.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("152").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s152.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael152.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("152").child("tmael").setValue(tmael152.getText().toString());



                return false;
            }
        });
        comment152.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("152").child("comment").setValue(comment152.getText().toString());


                return false;
            }
        });
        driver152.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("152").child("driver").setValue(driver152.getText().toString());


                return false;
            }
        });





        mDatabase.child("152").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael152.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("152").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver152.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("152").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment152.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("152").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date152.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("152").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section152.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("152").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point152.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("152").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location152.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("152").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name152.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("152").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target152.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("152").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team152.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm153.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("153").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("153").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s153.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("153").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("153").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("153").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm153.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("153").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s153.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael153.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("153").child("tmael").setValue(tmael153.getText().toString());



                return false;
            }
        });
        comment153.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("153").child("comment").setValue(comment153.getText().toString());


                return false;
            }
        });
        driver153.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("153").child("driver").setValue(driver153.getText().toString());


                return false;
            }
        });





        mDatabase.child("153").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael153.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("153").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver153.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("153").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment153.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("153").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date153.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("153").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section153.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("153").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point153.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("153").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location153.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("153").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name153.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("153").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target153.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("153").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team153.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm154.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("154").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("154").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s154.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("154").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("154").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("154").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm154.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("154").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s154.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael154.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("154").child("tmael").setValue(tmael154.getText().toString());



                return false;
            }
        });
        comment154.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("154").child("comment").setValue(comment154.getText().toString());


                return false;
            }
        });
        driver154.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("154").child("driver").setValue(driver154.getText().toString());


                return false;
            }
        });





        mDatabase.child("154").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael154.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("154").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver154.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("154").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment154.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("154").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date154.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("154").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section154.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("154").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point154.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("154").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location154.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("154").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name154.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("154").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target154.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("154").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team154.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm155.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("155").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("155").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s155.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("155").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("155").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("155").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm155.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("155").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s155.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael155.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("155").child("tmael").setValue(tmael155.getText().toString());



                return false;
            }
        });
        comment155.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("155").child("comment").setValue(comment155.getText().toString());


                return false;
            }
        });
        driver155.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("155").child("driver").setValue(driver155.getText().toString());


                return false;
            }
        });





        mDatabase.child("155").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael155.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("155").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver155.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("155").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment155.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("155").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date155.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("155").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section155.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("155").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point155.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("155").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location155.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("155").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name155.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("155").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target155.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("155").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team155.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm156.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("156").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("156").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s156.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("156").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("156").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("156").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm156.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("156").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s156.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael156.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("156").child("tmael").setValue(tmael156.getText().toString());



                return false;
            }
        });
        comment156.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("156").child("comment").setValue(comment156.getText().toString());


                return false;
            }
        });
        driver156.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("156").child("driver").setValue(driver156.getText().toString());


                return false;
            }
        });





        mDatabase.child("156").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael156.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("156").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver156.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("156").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment156.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("156").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date156.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("156").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section156.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("156").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point156.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("156").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location156.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("156").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name156.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("156").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target156.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("156").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team156.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        sm157.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("157").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("157").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s157.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("157").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("157").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("157").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm157.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("157").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s157.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael157.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("157").child("tmael").setValue(tmael157.getText().toString());



                return false;
            }
        });
        comment157.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("157").child("comment").setValue(comment157.getText().toString());


                return false;
            }
        });
        driver157.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("157").child("driver").setValue(driver157.getText().toString());


                return false;
            }
        });





        mDatabase.child("157").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael157.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("157").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver157.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("157").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment157.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("157").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date157.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("157").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section157.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("157").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point157.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("157").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location157.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("157").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name157.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("157").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target157.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("157").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team157.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm158.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("158").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("158").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s158.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("158").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("158").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("158").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm158.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("158").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s158.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael158.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("158").child("tmael").setValue(tmael158.getText().toString());



                return false;
            }
        });
        comment158.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("158").child("comment").setValue(comment158.getText().toString());


                return false;
            }
        });
        driver158.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("158").child("driver").setValue(driver158.getText().toString());


                return false;
            }
        });





        mDatabase.child("158").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael158.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("158").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver158.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("158").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment158.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("158").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date158.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("158").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section158.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("158").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point158.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("158").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location158.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("158").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name158.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("158").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target158.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("158").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team158.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm159.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("159").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("159").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s159.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("159").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("159").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("159").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm159.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("159").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s159.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael159.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("159").child("tmael").setValue(tmael159.getText().toString());



                return false;
            }
        });
        comment159.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("159").child("comment").setValue(comment159.getText().toString());


                return false;
            }
        });
        driver159.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("159").child("driver").setValue(driver159.getText().toString());


                return false;
            }
        });





        mDatabase.child("159").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael159.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("159").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver159.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("159").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment159.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("159").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date159.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("159").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section159.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("159").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point159.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("159").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location159.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("159").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name159.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("159").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target159.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("159").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team159.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm160.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("160").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("160").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s160.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("160").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("160").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("160").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm160.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("160").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s160.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael160.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("160").child("tmael").setValue(tmael160.getText().toString());



                return false;
            }
        });
        comment160.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("160").child("comment").setValue(comment160.getText().toString());


                return false;
            }
        });
        driver160.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("160").child("driver").setValue(driver160.getText().toString());


                return false;
            }
        });





        mDatabase.child("160").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael160.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("160").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver160.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("160").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment160.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("160").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date160.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("160").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section160.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("160").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point160.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("160").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location160.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("160").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name160.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("160").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target160.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("160").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team160.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm161.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("161").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("161").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s161.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("161").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("161").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("161").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm161.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("161").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s161.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael161.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("161").child("tmael").setValue(tmael161.getText().toString());



                return false;
            }
        });
        comment161.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("161").child("comment").setValue(comment161.getText().toString());


                return false;
            }
        });
        driver161.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("161").child("driver").setValue(driver161.getText().toString());


                return false;
            }
        });





        mDatabase.child("161").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael161.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("161").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver161.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("161").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment161.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("161").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date161.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("161").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section161.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("161").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point161.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("161").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location161.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("161").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name161.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("161").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target161.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("161").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team161.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm162.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("162").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("162").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s162.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("162").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("162").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("162").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm162.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("162").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s162.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael162.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("162").child("tmael").setValue(tmael162.getText().toString());



                return false;
            }
        });
        comment162.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("162").child("comment").setValue(comment162.getText().toString());


                return false;
            }
        });
        driver162.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("162").child("driver").setValue(driver162.getText().toString());


                return false;
            }
        });





        mDatabase.child("162").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael162.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("162").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver162.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("162").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment162.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("162").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date162.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("162").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section162.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("162").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point162.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("162").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location162.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("162").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name162.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("162").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target162.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("162").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team162.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm163.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("163").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("163").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s163.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("163").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("163").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("163").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm163.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("163").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s163.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael163.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("163").child("tmael").setValue(tmael163.getText().toString());



                return false;
            }
        });
        comment163.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("163").child("comment").setValue(comment163.getText().toString());


                return false;
            }
        });
        driver163.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("163").child("driver").setValue(driver163.getText().toString());


                return false;
            }
        });





        mDatabase.child("163").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael163.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("163").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver163.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("163").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment163.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("163").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date163.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("163").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section163.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("163").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point163.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("163").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location163.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("163").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name163.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("163").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target163.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("163").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team163.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm164.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("164").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("164").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s164.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("164").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("164").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("164").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm164.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("164").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s164.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael164.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("164").child("tmael").setValue(tmael164.getText().toString());



                return false;
            }
        });
        comment164.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("164").child("comment").setValue(comment164.getText().toString());


                return false;
            }
        });
        driver164.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("164").child("driver").setValue(driver164.getText().toString());


                return false;
            }
        });





        mDatabase.child("164").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael164.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("164").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver164.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("164").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment164.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("164").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date164.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("164").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section164.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("164").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point164.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("164").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location164.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("164").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name164.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("164").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target164.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("164").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team164.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm165.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("165").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("165").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s165.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("165").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("165").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("165").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm165.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("165").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s165.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael165.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("165").child("tmael").setValue(tmael165.getText().toString());



                return false;
            }
        });
        comment165.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("165").child("comment").setValue(comment165.getText().toString());


                return false;
            }
        });
        driver165.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("165").child("driver").setValue(driver165.getText().toString());


                return false;
            }
        });





        mDatabase.child("165").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael165.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("165").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver165.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("165").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment165.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("165").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date165.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("165").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section165.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("165").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point165.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("165").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location165.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("165").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name165.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("165").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target165.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("165").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team165.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm166.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("166").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("166").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s166.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("166").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("166").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("166").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm166.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("166").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s166.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael166.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("166").child("tmael").setValue(tmael166.getText().toString());



                return false;
            }
        });
        comment166.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("166").child("comment").setValue(comment166.getText().toString());


                return false;
            }
        });
        driver166.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("166").child("driver").setValue(driver166.getText().toString());


                return false;
            }
        });





        mDatabase.child("166").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael166.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("166").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver166.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("166").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment166.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("166").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date166.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("166").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section166.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("166").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point166.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("166").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location166.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("166").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name166.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("166").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target166.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("166").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team166.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm167.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("167").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("167").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s167.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("167").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("167").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("167").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm167.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("167").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s167.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael167.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("167").child("tmael").setValue(tmael167.getText().toString());



                return false;
            }
        });
        comment167.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("167").child("comment").setValue(comment167.getText().toString());


                return false;
            }
        });
        driver167.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("167").child("driver").setValue(driver167.getText().toString());


                return false;
            }
        });





        mDatabase.child("167").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael167.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("167").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver167.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("167").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment167.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("167").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date167.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("167").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section167.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("167").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point167.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("167").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location167.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("167").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name167.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("167").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target167.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("167").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team167.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm168.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("168").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("168").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s168.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("168").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("168").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("168").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm168.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("168").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s168.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael168.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("168").child("tmael").setValue(tmael168.getText().toString());



                return false;
            }
        });
        comment168.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("168").child("comment").setValue(comment168.getText().toString());


                return false;
            }
        });
        driver168.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("168").child("driver").setValue(driver168.getText().toString());


                return false;
            }
        });





        mDatabase.child("168").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael168.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("168").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver168.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("168").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment168.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("168").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date168.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("168").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section168.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("168").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point168.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("168").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location168.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("168").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name168.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("168").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target168.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("168").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team168.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm169.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("169").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("169").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s169.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("169").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("169").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("169").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm169.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("169").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s169.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael169.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("169").child("tmael").setValue(tmael169.getText().toString());



                return false;
            }
        });
        comment169.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("169").child("comment").setValue(comment169.getText().toString());


                return false;
            }
        });
        driver169.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("169").child("driver").setValue(driver169.getText().toString());


                return false;
            }
        });





        mDatabase.child("169").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael169.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("169").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver169.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("169").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment169.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("169").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date169.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("169").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section169.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("169").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point169.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("169").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location169.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("169").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name169.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("169").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target169.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("169").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team169.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm170.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("170").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("170").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s170.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("170").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("170").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("170").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm170.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("170").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s170.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael170.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("170").child("tmael").setValue(tmael170.getText().toString());



                return false;
            }
        });
        comment170.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("170").child("comment").setValue(comment170.getText().toString());


                return false;
            }
        });
        driver170.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("170").child("driver").setValue(driver170.getText().toString());


                return false;
            }
        });





        mDatabase.child("170").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael170.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("170").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver170.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("170").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment170.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("170").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date170.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("170").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section170.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("170").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point170.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("170").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location170.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("170").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name170.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("170").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target170.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("170").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team170.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm171.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("171").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("171").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s171.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("171").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("171").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("171").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm171.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("171").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s171.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael171.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("171").child("tmael").setValue(tmael171.getText().toString());



                return false;
            }
        });
        comment171.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("171").child("comment").setValue(comment171.getText().toString());


                return false;
            }
        });
        driver171.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("171").child("driver").setValue(driver171.getText().toString());


                return false;
            }
        });





        mDatabase.child("171").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael171.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("171").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver171.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("171").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment171.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("171").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date171.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("171").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section171.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("171").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point171.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("171").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location171.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("171").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name171.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("171").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target171.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("171").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team171.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm172.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("172").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("172").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s172.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("172").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("172").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("172").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm172.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("172").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s172.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael172.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("172").child("tmael").setValue(tmael172.getText().toString());



                return false;
            }
        });
        comment172.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("172").child("comment").setValue(comment172.getText().toString());


                return false;
            }
        });
        driver172.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("172").child("driver").setValue(driver172.getText().toString());


                return false;
            }
        });





        mDatabase.child("172").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael172.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("172").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver172.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("172").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment172.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("172").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date172.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("172").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section172.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("172").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point172.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("172").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location172.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("172").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name172.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("172").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target172.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("172").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team172.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm173.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("173").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("173").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s173.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("173").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("173").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("173").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm173.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("173").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s173.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael173.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("173").child("tmael").setValue(tmael173.getText().toString());



                return false;
            }
        });
        comment173.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("173").child("comment").setValue(comment173.getText().toString());


                return false;
            }
        });
        driver173.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("173").child("driver").setValue(driver173.getText().toString());


                return false;
            }
        });





        mDatabase.child("173").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael173.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("173").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver173.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("173").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment173.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("173").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date173.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("173").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section173.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("173").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point173.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("173").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location173.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("173").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name173.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("173").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target173.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("173").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team173.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm174.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("174").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("174").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s174.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("174").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("174").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("174").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm174.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("174").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s174.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael174.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("174").child("tmael").setValue(tmael174.getText().toString());



                return false;
            }
        });
        comment174.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("174").child("comment").setValue(comment174.getText().toString());


                return false;
            }
        });
        driver174.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("174").child("driver").setValue(driver174.getText().toString());


                return false;
            }
        });





        mDatabase.child("174").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael174.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("174").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver174.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("174").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment174.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("174").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date174.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("174").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section174.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("174").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point174.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("174").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location174.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("174").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name174.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("174").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target174.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("174").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team174.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm175.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("175").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("175").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s175.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("175").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("175").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("175").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm175.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("175").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s175.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael175.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("175").child("tmael").setValue(tmael175.getText().toString());



                return false;
            }
        });
        comment175.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("175").child("comment").setValue(comment175.getText().toString());


                return false;
            }
        });
        driver175.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("175").child("driver").setValue(driver175.getText().toString());


                return false;
            }
        });





        mDatabase.child("175").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael175.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("175").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver175.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("175").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment175.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("175").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date175.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("175").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section175.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("175").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point175.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("175").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location175.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("175").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name175.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("175").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target175.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("175").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team175.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        sm176.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("176").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("176").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s176.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("176").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("176").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("176").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm176.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("176").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s176.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael176.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("176").child("tmael").setValue(tmael176.getText().toString());



                return false;
            }
        });
        comment176.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("176").child("comment").setValue(comment176.getText().toString());


                return false;
            }
        });
        driver176.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("176").child("driver").setValue(driver176.getText().toString());


                return false;
            }
        });





        mDatabase.child("176").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael176.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("176").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver176.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("176").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment176.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("176").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date176.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("176").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section176.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("176").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point176.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("176").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location176.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("176").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name176.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("176").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target176.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("176").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team176.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm177.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("177").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("177").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s177.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("177").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("177").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("177").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm177.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("177").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s177.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael177.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("177").child("tmael").setValue(tmael177.getText().toString());



                return false;
            }
        });
        comment177.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("177").child("comment").setValue(comment177.getText().toString());


                return false;
            }
        });
        driver177.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("177").child("driver").setValue(driver177.getText().toString());


                return false;
            }
        });





        mDatabase.child("177").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael177.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("177").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver177.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("177").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment177.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("177").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date177.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("177").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section177.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("177").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point177.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("177").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location177.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("177").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name177.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("177").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target177.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("177").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team177.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm178.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("178").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("178").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s178.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("178").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("178").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("178").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm178.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("178").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s178.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael178.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("178").child("tmael").setValue(tmael178.getText().toString());



                return false;
            }
        });
        comment178.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("178").child("comment").setValue(comment178.getText().toString());


                return false;
            }
        });
        driver178.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("178").child("driver").setValue(driver178.getText().toString());


                return false;
            }
        });





        mDatabase.child("178").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael178.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("178").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver178.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("178").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment178.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("178").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date178.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("178").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section178.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("178").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point178.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("178").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location178.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("178").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name178.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("178").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target178.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("178").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team178.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm179.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("179").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("179").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s179.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("179").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("179").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("179").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm179.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("179").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s179.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael179.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("179").child("tmael").setValue(tmael179.getText().toString());



                return false;
            }
        });
        comment179.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("179").child("comment").setValue(comment179.getText().toString());


                return false;
            }
        });
        driver179.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("179").child("driver").setValue(driver179.getText().toString());


                return false;
            }
        });





        mDatabase.child("179").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael179.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("179").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver179.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("179").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment179.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("179").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date179.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("179").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section179.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("179").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point179.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("179").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location179.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("179").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name179.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("179").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target179.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("179").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team179.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm180.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("180").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("180").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s180.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("180").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("180").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("180").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm180.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("180").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s180.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael180.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("180").child("tmael").setValue(tmael180.getText().toString());



                return false;
            }
        });
        comment180.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("180").child("comment").setValue(comment180.getText().toString());


                return false;
            }
        });
        driver180.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("180").child("driver").setValue(driver180.getText().toString());


                return false;
            }
        });





        mDatabase.child("180").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael180.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("180").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver180.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("180").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment180.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("180").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date180.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("180").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section180.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("180").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point180.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("180").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location180.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("180").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name180.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("180").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target180.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("180").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team180.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm181.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("181").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("181").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s181.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("181").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("181").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("181").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm181.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("181").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s181.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael181.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("181").child("tmael").setValue(tmael181.getText().toString());



                return false;
            }
        });
        comment181.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("181").child("comment").setValue(comment181.getText().toString());


                return false;
            }
        });
        driver181.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("181").child("driver").setValue(driver181.getText().toString());


                return false;
            }
        });





        mDatabase.child("181").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael181.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("181").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver181.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("181").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment181.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("181").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date181.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("181").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section181.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("181").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point181.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("181").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location181.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("181").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name181.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("181").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target181.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("181").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team181.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm182.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("182").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("182").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s182.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("182").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("182").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("182").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm182.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("182").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s182.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael182.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("182").child("tmael").setValue(tmael182.getText().toString());



                return false;
            }
        });
        comment182.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("182").child("comment").setValue(comment182.getText().toString());


                return false;
            }
        });
        driver182.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("182").child("driver").setValue(driver182.getText().toString());


                return false;
            }
        });





        mDatabase.child("182").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael182.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("182").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver182.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("182").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment182.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("182").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date182.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("182").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section182.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("182").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point182.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("182").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location182.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("182").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name182.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("182").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target182.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("182").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team182.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm183.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("183").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("183").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s183.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("183").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("183").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("183").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm183.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("183").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s183.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael183.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("183").child("tmael").setValue(tmael183.getText().toString());



                return false;
            }
        });
        comment183.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("183").child("comment").setValue(comment183.getText().toString());


                return false;
            }
        });
        driver183.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("183").child("driver").setValue(driver183.getText().toString());


                return false;
            }
        });





        mDatabase.child("183").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael183.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("183").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver183.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("183").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment183.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("183").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date183.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("183").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section183.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("183").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point183.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("183").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location183.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("183").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name183.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("183").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target183.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("183").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team183.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm184.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("184").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("184").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s184.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("184").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("184").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("184").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm184.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("184").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s184.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael184.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("184").child("tmael").setValue(tmael184.getText().toString());



                return false;
            }
        });
        comment184.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("184").child("comment").setValue(comment184.getText().toString());


                return false;
            }
        });
        driver184.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("184").child("driver").setValue(driver184.getText().toString());


                return false;
            }
        });





        mDatabase.child("184").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael184.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("184").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver184.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("184").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment184.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("184").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date184.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("184").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section184.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("184").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point184.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("184").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location184.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("184").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name184.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("184").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target184.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("184").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team184.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm185.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("185").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("185").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s185.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("185").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("185").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("185").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm185.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("185").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s185.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael185.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("185").child("tmael").setValue(tmael185.getText().toString());



                return false;
            }
        });
        comment185.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("185").child("comment").setValue(comment185.getText().toString());


                return false;
            }
        });
        driver185.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("185").child("driver").setValue(driver185.getText().toString());


                return false;
            }
        });





        mDatabase.child("185").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael185.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("185").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver185.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("185").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment185.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("185").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date185.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("185").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section185.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("185").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point185.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("185").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location185.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("185").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name185.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("185").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target185.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("185").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team185.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        sm186.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("186").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("186").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s186.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("186").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("186").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("186").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm186.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("186").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s186.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael186.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("186").child("tmael").setValue(tmael186.getText().toString());



                return false;
            }
        });
        comment186.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("186").child("comment").setValue(comment186.getText().toString());


                return false;
            }
        });
        driver186.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("186").child("driver").setValue(driver186.getText().toString());


                return false;
            }
        });





        mDatabase.child("186").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael186.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("186").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver186.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("186").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment186.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("186").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date186.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("186").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section186.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("186").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point186.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("186").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location186.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("186").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name186.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("186").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target186.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("186").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team186.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm187.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("187").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("187").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s187.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("187").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("187").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("187").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm187.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("187").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s187.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael187.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("187").child("tmael").setValue(tmael187.getText().toString());



                return false;
            }
        });
        comment187.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("187").child("comment").setValue(comment187.getText().toString());


                return false;
            }
        });
        driver187.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("187").child("driver").setValue(driver187.getText().toString());


                return false;
            }
        });





        mDatabase.child("187").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael187.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("187").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver187.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("187").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment187.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("187").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date187.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("187").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section187.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("187").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point187.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("187").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location187.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("187").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name187.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("187").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target187.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("187").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team187.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm188.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("188").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("188").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s188.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("188").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("188").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("188").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm188.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("188").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s188.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael188.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("188").child("tmael").setValue(tmael188.getText().toString());



                return false;
            }
        });
        comment188.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("188").child("comment").setValue(comment188.getText().toString());


                return false;
            }
        });
        driver188.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("188").child("driver").setValue(driver188.getText().toString());


                return false;
            }
        });





        mDatabase.child("188").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael188.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("188").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver188.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("188").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment188.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("188").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date188.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("188").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section188.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("188").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point188.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("188").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location188.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("188").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name188.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("188").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target188.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("188").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team188.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm189.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("189").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("189").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s189.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("189").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("189").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("189").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm189.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("189").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s189.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael189.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("189").child("tmael").setValue(tmael189.getText().toString());



                return false;
            }
        });
        comment189.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("189").child("comment").setValue(comment189.getText().toString());


                return false;
            }
        });
        driver189.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("189").child("driver").setValue(driver189.getText().toString());


                return false;
            }
        });





        mDatabase.child("189").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael189.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("189").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver189.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("189").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment189.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("189").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date189.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("189").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section189.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("189").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point189.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("189").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location189.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("189").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name189.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("189").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target189.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("189").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team189.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm190.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("190").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("190").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s190.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("190").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("190").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("190").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm190.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("190").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s190.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael190.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("190").child("tmael").setValue(tmael190.getText().toString());



                return false;
            }
        });
        comment190.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("190").child("comment").setValue(comment190.getText().toString());


                return false;
            }
        });
        driver190.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("190").child("driver").setValue(driver190.getText().toString());


                return false;
            }
        });





        mDatabase.child("190").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael190.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("190").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver190.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("190").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment190.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("190").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date190.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("190").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section190.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("190").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point190.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("190").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location190.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("190").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name190.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("190").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target190.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("190").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team190.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm191.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("191").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("191").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s191.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("191").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("191").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("191").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm191.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("191").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s191.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael191.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("191").child("tmael").setValue(tmael191.getText().toString());



                return false;
            }
        });
        comment191.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("191").child("comment").setValue(comment191.getText().toString());


                return false;
            }
        });
        driver191.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("191").child("driver").setValue(driver191.getText().toString());


                return false;
            }
        });





        mDatabase.child("191").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael191.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("191").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver191.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("191").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment191.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("191").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date191.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("191").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section191.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("191").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point191.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("191").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location191.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("191").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name191.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("191").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target191.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("191").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team191.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        sm192.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("192").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("192").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s192.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("192").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("192").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("192").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm192.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("192").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s192.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael192.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("192").child("tmael").setValue(tmael192.getText().toString());



                return false;
            }
        });
        comment192.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("192").child("comment").setValue(comment192.getText().toString());


                return false;
            }
        });
        driver192.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("192").child("driver").setValue(driver192.getText().toString());


                return false;
            }
        });





        mDatabase.child("192").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael192.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("192").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver192.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("192").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment192.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("192").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date192.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("192").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section192.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("192").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point192.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("192").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location192.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("192").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name192.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("192").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target192.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("192").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team192.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm193.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("193").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("193").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s193.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("193").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("193").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("193").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm193.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("193").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s193.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael193.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("193").child("tmael").setValue(tmael193.getText().toString());



                return false;
            }
        });
        comment193.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("193").child("comment").setValue(comment193.getText().toString());


                return false;
            }
        });
        driver193.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("193").child("driver").setValue(driver193.getText().toString());


                return false;
            }
        });





        mDatabase.child("193").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael193.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("193").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver193.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("193").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment193.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("193").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date193.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("193").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section193.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("193").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point193.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("193").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location193.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("193").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name193.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("193").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target193.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("193").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team193.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm194.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("194").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("194").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s194.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("194").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("194").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("194").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm194.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("194").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s194.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael194.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("194").child("tmael").setValue(tmael194.getText().toString());



                return false;
            }
        });
        comment194.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("194").child("comment").setValue(comment194.getText().toString());


                return false;
            }
        });
        driver194.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("194").child("driver").setValue(driver194.getText().toString());


                return false;
            }
        });





        mDatabase.child("194").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael194.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("194").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver194.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("194").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment194.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("194").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date194.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("194").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section194.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("194").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point194.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("194").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location194.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("194").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name194.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("194").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target194.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("194").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team194.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm195.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("195").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("195").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s195.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("195").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("195").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("195").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm195.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("195").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s195.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael195.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("195").child("tmael").setValue(tmael195.getText().toString());



                return false;
            }
        });
        comment195.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("195").child("comment").setValue(comment195.getText().toString());


                return false;
            }
        });
        driver195.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("195").child("driver").setValue(driver195.getText().toString());


                return false;
            }
        });





        mDatabase.child("195").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael195.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("195").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver195.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("195").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment195.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("195").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date195.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("195").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section195.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("195").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point195.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("195").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location195.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("195").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name195.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("195").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target195.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("195").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team195.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm196.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("196").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("196").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s196.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("196").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("196").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("196").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm196.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("196").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s196.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael196.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("196").child("tmael").setValue(tmael196.getText().toString());



                return false;
            }
        });
        comment196.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("196").child("comment").setValue(comment196.getText().toString());


                return false;
            }
        });
        driver196.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("196").child("driver").setValue(driver196.getText().toString());


                return false;
            }
        });





        mDatabase.child("196").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael196.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("196").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver196.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("196").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment196.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("196").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date196.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("196").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section196.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("196").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point196.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("196").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location196.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("196").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name196.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("196").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target196.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("196").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team196.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm197.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("197").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("197").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s197.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("197").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("197").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("197").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm197.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("197").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s197.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael197.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("197").child("tmael").setValue(tmael197.getText().toString());



                return false;
            }
        });
        comment197.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("197").child("comment").setValue(comment197.getText().toString());


                return false;
            }
        });
        driver197.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("197").child("driver").setValue(driver197.getText().toString());


                return false;
            }
        });





        mDatabase.child("197").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael197.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("197").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver197.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("197").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment197.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("197").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date197.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("197").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section197.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("197").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point197.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("197").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location197.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("197").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name197.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("197").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target197.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("197").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team197.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm198.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("198").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("198").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s198.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("198").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("198").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("198").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm198.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("198").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s198.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael198.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("198").child("tmael").setValue(tmael198.getText().toString());



                return false;
            }
        });
        comment198.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("198").child("comment").setValue(comment198.getText().toString());


                return false;
            }
        });
        driver198.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("198").child("driver").setValue(driver198.getText().toString());


                return false;
            }
        });





        mDatabase.child("198").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael198.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("198").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver198.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("198").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment198.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("198").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date198.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("198").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section198.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("198").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point198.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("198").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location198.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("198").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name198.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("198").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target198.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("198").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team198.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm199.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("199").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("199").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s199.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("199").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("199").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("199").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm199.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("199").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s199.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael199.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("199").child("tmael").setValue(tmael199.getText().toString());



                return false;
            }
        });
        comment199.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("199").child("comment").setValue(comment199.getText().toString());


                return false;
            }
        });
        driver199.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("199").child("driver").setValue(driver199.getText().toString());


                return false;
            }
        });





        mDatabase.child("199").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael199.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("199").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver199.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("199").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment199.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("199").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date199.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("199").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section199.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("199").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point199.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("199").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location199.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("199").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name199.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("199").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target199.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("199").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team199.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm200.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("200").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("200").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s200.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("200").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("200").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("200").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm200.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("200").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s200.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael200.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("200").child("tmael").setValue(tmael200.getText().toString());



                return false;
            }
        });
        comment200.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("200").child("comment").setValue(comment200.getText().toString());


                return false;
            }
        });
        driver200.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("200").child("driver").setValue(driver200.getText().toString());


                return false;
            }
        });





        mDatabase.child("200").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael200.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("200").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver200.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("200").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment200.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("200").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date200.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("200").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section200.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("200").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point200.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("200").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location200.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("200").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name200.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("200").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target200.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("200").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team200.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm201.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("201").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("201").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s201.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("201").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("201").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("201").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm201.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("201").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s201.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael201.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("201").child("tmael").setValue(tmael201.getText().toString());



                return false;
            }
        });
        comment201.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("201").child("comment").setValue(comment201.getText().toString());


                return false;
            }
        });
        driver201.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("201").child("driver").setValue(driver201.getText().toString());


                return false;
            }
        });





        mDatabase.child("201").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael201.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("201").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver201.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("201").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment201.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("201").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date201.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("201").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section201.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("201").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point201.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("201").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location201.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("201").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name201.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("201").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target201.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("201").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team201.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm202.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("202").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("202").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s202.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("202").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("202").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("202").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm202.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("202").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s202.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael202.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("202").child("tmael").setValue(tmael202.getText().toString());



                return false;
            }
        });
        comment202.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("202").child("comment").setValue(comment202.getText().toString());


                return false;
            }
        });
        driver202.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("202").child("driver").setValue(driver202.getText().toString());


                return false;
            }
        });





        mDatabase.child("202").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael202.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("202").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver202.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("202").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment202.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("202").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date202.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("202").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section202.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("202").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point202.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("202").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location202.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("202").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name202.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("202").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target202.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("202").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team202.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm203.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("203").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("203").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s203.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("203").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("203").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("203").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm203.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("203").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s203.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael203.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("203").child("tmael").setValue(tmael203.getText().toString());



                return false;
            }
        });
        comment203.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("203").child("comment").setValue(comment203.getText().toString());


                return false;
            }
        });
        driver203.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("203").child("driver").setValue(driver203.getText().toString());


                return false;
            }
        });





        mDatabase.child("203").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael203.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("203").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver203.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("203").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment203.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("203").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date203.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("203").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section203.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("203").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point203.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("203").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location203.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("203").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name203.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("203").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target203.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("203").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team203.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm204.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("204").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("204").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s204.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("204").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("204").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("204").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm204.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("204").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s204.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael204.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("204").child("tmael").setValue(tmael204.getText().toString());



                return false;
            }
        });
        comment204.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("204").child("comment").setValue(comment204.getText().toString());


                return false;
            }
        });
        driver204.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("204").child("driver").setValue(driver204.getText().toString());


                return false;
            }
        });





        mDatabase.child("204").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael204.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("204").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver204.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("204").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment204.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("204").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date204.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("204").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section204.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("204").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point204.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("204").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location204.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("204").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name204.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("204").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target204.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("204").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team204.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm205.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("205").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("205").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s205.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("205").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("205").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("205").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm205.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("205").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s205.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael205.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("205").child("tmael").setValue(tmael205.getText().toString());



                return false;
            }
        });
        comment205.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("205").child("comment").setValue(comment205.getText().toString());


                return false;
            }
        });
        driver205.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("205").child("driver").setValue(driver205.getText().toString());


                return false;
            }
        });





        mDatabase.child("205").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael205.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("205").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver205.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("205").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment205.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("205").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date205.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("205").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section205.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("205").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point205.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("205").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location205.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("205").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name205.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("205").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target205.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("205").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team205.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm206.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("206").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("206").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s206.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("206").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("206").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("206").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm206.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("206").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s206.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael206.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("206").child("tmael").setValue(tmael206.getText().toString());



                return false;
            }
        });
        comment206.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("206").child("comment").setValue(comment206.getText().toString());


                return false;
            }
        });
        driver206.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("206").child("driver").setValue(driver206.getText().toString());


                return false;
            }
        });





        mDatabase.child("206").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael206.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("206").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver206.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("206").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment206.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("206").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date206.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("206").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section206.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("206").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point206.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("206").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location206.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("206").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name206.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("206").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target206.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("206").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team206.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm207.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("207").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("207").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s207.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("207").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("207").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("207").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm207.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("207").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s207.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael207.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("207").child("tmael").setValue(tmael207.getText().toString());



                return false;
            }
        });
        comment207.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("207").child("comment").setValue(comment207.getText().toString());


                return false;
            }
        });
        driver207.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("207").child("driver").setValue(driver207.getText().toString());


                return false;
            }
        });





        mDatabase.child("207").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael207.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("207").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver207.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("207").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment207.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("207").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date207.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("207").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section207.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("207").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point207.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("207").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location207.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("207").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name207.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("207").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target207.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("207").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team207.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm208.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("208").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("208").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s208.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("208").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("208").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("208").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm208.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("208").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s208.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael208.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("208").child("tmael").setValue(tmael208.getText().toString());



                return false;
            }
        });
        comment208.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("208").child("comment").setValue(comment208.getText().toString());


                return false;
            }
        });
        driver208.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("208").child("driver").setValue(driver208.getText().toString());


                return false;
            }
        });





        mDatabase.child("208").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael208.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("208").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver208.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("208").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment208.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("208").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date208.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("208").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section208.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("208").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point208.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("208").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location208.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("208").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name208.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("208").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target208.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("208").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team208.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm209.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("209").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("209").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s209.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("209").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("209").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("209").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm209.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("209").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s209.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael209.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("209").child("tmael").setValue(tmael209.getText().toString());



                return false;
            }
        });
        comment209.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("209").child("comment").setValue(comment209.getText().toString());


                return false;
            }
        });
        driver209.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("209").child("driver").setValue(driver209.getText().toString());


                return false;
            }
        });





        mDatabase.child("209").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael209.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("209").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver209.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("209").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment209.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("209").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date209.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("209").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section209.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("209").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point209.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("209").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location209.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("209").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name209.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("209").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target209.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("209").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team209.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm210.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("210").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("210").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s210.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("210").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("210").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("210").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm210.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("210").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s210.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael210.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("210").child("tmael").setValue(tmael210.getText().toString());



                return false;
            }
        });
        comment210.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("210").child("comment").setValue(comment210.getText().toString());


                return false;
            }
        });
        driver210.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("210").child("driver").setValue(driver210.getText().toString());


                return false;
            }
        });





        mDatabase.child("210").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael210.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("210").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver210.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("210").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment210.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("210").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date210.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("210").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section210.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("210").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point210.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("210").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location210.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("210").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name210.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("210").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target210.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("210").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team210.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm211.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("211").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("211").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s211.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("211").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("211").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("211").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm211.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("211").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s211.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael211.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("211").child("tmael").setValue(tmael211.getText().toString());



                return false;
            }
        });
        comment211.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("211").child("comment").setValue(comment211.getText().toString());


                return false;
            }
        });
        driver211.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("211").child("driver").setValue(driver211.getText().toString());


                return false;
            }
        });





        mDatabase.child("211").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael211.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("211").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver211.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("211").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment211.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("211").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date211.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("211").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section211.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("211").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point211.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("211").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location211.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("211").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name211.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("211").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target211.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("211").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team211.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm212.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("212").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("212").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s212.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("212").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("212").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("212").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm212.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("212").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s212.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael212.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("212").child("tmael").setValue(tmael212.getText().toString());



                return false;
            }
        });
        comment212.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("212").child("comment").setValue(comment212.getText().toString());


                return false;
            }
        });
        driver212.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("212").child("driver").setValue(driver212.getText().toString());


                return false;
            }
        });





        mDatabase.child("212").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael212.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("212").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver212.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("212").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment212.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("212").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date212.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("212").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section212.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("212").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point212.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("212").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location212.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("212").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name212.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("212").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target212.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("212").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team212.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm213.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("213").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("213").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s213.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("213").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("213").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("213").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm213.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("213").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s213.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael213.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("213").child("tmael").setValue(tmael213.getText().toString());



                return false;
            }
        });
        comment213.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("213").child("comment").setValue(comment213.getText().toString());


                return false;
            }
        });
        driver213.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("213").child("driver").setValue(driver213.getText().toString());


                return false;
            }
        });





        mDatabase.child("213").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael213.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("213").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver213.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("213").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment213.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("213").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date213.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("213").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section213.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("213").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point213.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("213").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location213.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("213").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name213.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("213").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target213.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("213").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team213.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm214.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("214").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("214").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s214.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("214").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("214").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("214").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm214.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("214").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s214.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael214.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("214").child("tmael").setValue(tmael214.getText().toString());



                return false;
            }
        });
        comment214.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("214").child("comment").setValue(comment214.getText().toString());


                return false;
            }
        });
        driver214.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("214").child("driver").setValue(driver214.getText().toString());


                return false;
            }
        });





        mDatabase.child("214").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael214.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("214").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver214.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("214").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment214.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("214").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date214.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("214").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section214.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("214").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point214.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("214").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location214.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("214").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name214.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("214").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target214.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("214").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team214.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm215.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("215").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("215").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s215.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("215").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("215").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("215").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm215.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("215").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s215.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael215.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("215").child("tmael").setValue(tmael215.getText().toString());



                return false;
            }
        });
        comment215.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("215").child("comment").setValue(comment215.getText().toString());


                return false;
            }
        });
        driver215.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("215").child("driver").setValue(driver215.getText().toString());


                return false;
            }
        });





        mDatabase.child("215").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael215.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("215").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver215.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("215").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment215.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("215").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date215.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("215").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section215.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("215").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point215.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("215").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location215.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("215").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name215.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("215").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target215.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("215").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team215.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm216.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("216").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("216").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s216.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("216").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("216").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("216").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm216.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("216").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s216.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael216.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("216").child("tmael").setValue(tmael216.getText().toString());



                return false;
            }
        });
        comment216.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("216").child("comment").setValue(comment216.getText().toString());


                return false;
            }
        });
        driver216.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("216").child("driver").setValue(driver216.getText().toString());


                return false;
            }
        });





        mDatabase.child("216").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael216.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("216").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver216.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("216").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment216.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("216").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date216.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("216").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section216.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("216").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point216.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("216").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location216.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("216").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name216.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("216").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target216.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("216").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team216.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm217.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("217").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("217").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s217.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("217").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("217").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("217").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm217.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("217").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s217.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael217.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("217").child("tmael").setValue(tmael217.getText().toString());



                return false;
            }
        });
        comment217.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("217").child("comment").setValue(comment217.getText().toString());


                return false;
            }
        });
        driver217.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("217").child("driver").setValue(driver217.getText().toString());


                return false;
            }
        });





        mDatabase.child("217").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael217.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("217").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver217.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("217").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment217.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("217").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date217.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("217").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section217.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("217").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point217.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("217").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location217.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("217").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name217.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("217").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target217.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("217").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team217.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm218.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("218").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("218").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s218.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("218").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("218").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("218").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm218.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("218").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s218.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael218.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("218").child("tmael").setValue(tmael218.getText().toString());



                return false;
            }
        });
        comment218.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("218").child("comment").setValue(comment218.getText().toString());


                return false;
            }
        });
        driver218.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("218").child("driver").setValue(driver218.getText().toString());


                return false;
            }
        });





        mDatabase.child("218").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael218.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("218").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver218.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("218").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment218.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("218").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date218.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("218").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section218.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("218").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point218.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("218").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location218.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("218").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name218.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("218").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target218.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("218").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team218.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm219.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("219").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("219").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s219.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("219").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("219").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("219").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm219.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("219").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s219.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael219.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("219").child("tmael").setValue(tmael219.getText().toString());



                return false;
            }
        });
        comment219.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("219").child("comment").setValue(comment219.getText().toString());


                return false;
            }
        });
        driver219.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("219").child("driver").setValue(driver219.getText().toString());


                return false;
            }
        });





        mDatabase.child("219").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael219.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("219").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver219.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("219").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment219.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("219").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date219.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("219").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section219.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("219").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point219.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("219").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location219.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("219").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name219.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("219").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target219.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("219").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team219.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm220.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("220").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("220").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s220.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("220").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("220").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("220").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm220.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("220").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s220.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael220.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("220").child("tmael").setValue(tmael220.getText().toString());



                return false;
            }
        });
        comment220.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("220").child("comment").setValue(comment220.getText().toString());


                return false;
            }
        });
        driver220.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("220").child("driver").setValue(driver220.getText().toString());


                return false;
            }
        });





        mDatabase.child("220").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael220.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("220").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver220.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("220").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment220.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("220").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date220.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("220").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section220.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("220").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point220.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("220").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location220.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("220").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name220.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("220").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target220.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("220").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team220.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm221.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("221").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("221").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s221.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("221").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("221").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("221").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm221.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("221").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s221.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael221.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("221").child("tmael").setValue(tmael221.getText().toString());



                return false;
            }
        });
        comment221.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("221").child("comment").setValue(comment221.getText().toString());


                return false;
            }
        });
        driver221.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("221").child("driver").setValue(driver221.getText().toString());


                return false;
            }
        });





        mDatabase.child("221").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael221.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("221").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver221.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("221").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment221.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("221").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date221.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("221").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section221.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("221").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point221.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("221").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location221.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("221").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name221.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("221").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target221.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("221").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team221.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm222.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("222").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("222").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s222.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("222").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("222").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("222").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm222.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("222").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s222.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael222.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("222").child("tmael").setValue(tmael222.getText().toString());



                return false;
            }
        });
        comment222.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("222").child("comment").setValue(comment222.getText().toString());


                return false;
            }
        });
        driver222.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("222").child("driver").setValue(driver222.getText().toString());


                return false;
            }
        });





        mDatabase.child("222").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael222.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("222").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver222.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("222").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment222.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("222").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date222.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("222").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section222.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("222").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point222.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("222").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location222.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("222").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name222.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("222").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target222.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("222").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team222.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm223.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("223").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("223").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s223.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("223").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("223").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("223").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm223.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("223").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s223.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael223.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("223").child("tmael").setValue(tmael223.getText().toString());



                return false;
            }
        });
        comment223.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("223").child("comment").setValue(comment223.getText().toString());


                return false;
            }
        });
        driver223.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("223").child("driver").setValue(driver223.getText().toString());


                return false;
            }
        });





        mDatabase.child("223").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael223.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("223").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver223.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("223").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment223.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("223").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date223.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("223").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section223.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("223").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point223.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("223").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location223.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("223").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name223.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("223").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target223.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("223").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team223.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm224.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("224").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("224").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s224.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("224").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("224").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("224").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm224.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("224").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s224.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael224.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("224").child("tmael").setValue(tmael224.getText().toString());



                return false;
            }
        });
        comment224.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("224").child("comment").setValue(comment224.getText().toString());


                return false;
            }
        });
        driver224.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("224").child("driver").setValue(driver224.getText().toString());


                return false;
            }
        });





        mDatabase.child("224").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael224.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("224").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver224.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("224").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment224.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("224").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date224.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("224").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section224.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("224").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point224.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("224").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location224.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("224").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name224.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("224").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target224.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("224").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team224.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm225.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("225").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("225").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s225.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("225").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("225").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("225").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm225.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("225").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s225.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael225.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("225").child("tmael").setValue(tmael225.getText().toString());



                return false;
            }
        });
        comment225.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("225").child("comment").setValue(comment225.getText().toString());


                return false;
            }
        });
        driver225.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("225").child("driver").setValue(driver225.getText().toString());


                return false;
            }
        });





        mDatabase.child("225").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael225.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("225").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver225.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("225").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment225.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("225").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date225.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("225").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section225.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("225").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point225.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("225").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location225.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("225").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name225.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("225").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target225.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("225").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team225.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm226.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("226").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("226").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s226.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("226").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("226").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("226").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm226.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("226").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s226.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael226.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("226").child("tmael").setValue(tmael226.getText().toString());



                return false;
            }
        });
        comment226.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("226").child("comment").setValue(comment226.getText().toString());


                return false;
            }
        });
        driver226.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("226").child("driver").setValue(driver226.getText().toString());


                return false;
            }
        });





        mDatabase.child("226").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael226.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("226").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver226.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("226").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment226.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("226").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date226.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("226").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section226.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("226").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point226.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("226").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location226.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("226").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name226.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("226").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target226.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("226").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team226.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm227.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("227").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("227").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s227.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("227").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("227").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("227").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm227.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("227").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s227.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael227.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("227").child("tmael").setValue(tmael227.getText().toString());



                return false;
            }
        });
        comment227.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("227").child("comment").setValue(comment227.getText().toString());


                return false;
            }
        });
        driver227.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("227").child("driver").setValue(driver227.getText().toString());


                return false;
            }
        });





        mDatabase.child("227").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael227.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("227").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver227.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("227").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment227.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("227").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date227.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("227").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section227.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("227").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point227.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("227").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location227.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("227").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name227.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("227").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target227.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("227").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team227.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm228.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("228").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("228").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s228.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("228").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("228").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("228").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm228.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("228").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s228.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael228.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("228").child("tmael").setValue(tmael228.getText().toString());



                return false;
            }
        });
        comment228.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("228").child("comment").setValue(comment228.getText().toString());


                return false;
            }
        });
        driver228.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("228").child("driver").setValue(driver228.getText().toString());


                return false;
            }
        });





        mDatabase.child("228").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael228.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("228").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver228.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("228").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment228.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("228").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date228.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("228").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section228.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("228").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point228.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("228").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location228.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("228").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name228.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("228").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target228.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("228").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team228.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm229.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("229").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("229").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s229.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("229").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("229").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("229").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm229.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("229").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s229.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael229.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("229").child("tmael").setValue(tmael229.getText().toString());



                return false;
            }
        });
        comment229.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("229").child("comment").setValue(comment229.getText().toString());


                return false;
            }
        });
        driver229.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("229").child("driver").setValue(driver229.getText().toString());


                return false;
            }
        });





        mDatabase.child("229").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael229.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("229").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver229.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("229").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment229.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("229").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date229.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("229").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section229.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("229").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point229.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("229").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location229.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("229").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name229.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("229").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target229.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("229").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team229.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm230.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("230").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("230").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s230.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("230").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("230").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("230").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm230.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("230").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s230.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael230.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("230").child("tmael").setValue(tmael230.getText().toString());



                return false;
            }
        });
        comment230.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("230").child("comment").setValue(comment230.getText().toString());


                return false;
            }
        });
        driver230.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("230").child("driver").setValue(driver230.getText().toString());


                return false;
            }
        });





        mDatabase.child("230").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael230.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("230").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver230.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("230").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment230.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("230").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date230.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("230").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section230.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("230").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point230.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("230").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location230.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("230").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name230.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("230").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target230.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("230").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team230.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm231.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("231").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("231").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s231.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("231").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("231").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("231").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm231.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("231").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s231.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael231.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("231").child("tmael").setValue(tmael231.getText().toString());



                return false;
            }
        });
        comment231.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("231").child("comment").setValue(comment231.getText().toString());


                return false;
            }
        });
        driver231.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("231").child("driver").setValue(driver231.getText().toString());


                return false;
            }
        });





        mDatabase.child("231").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael231.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("231").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver231.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("231").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment231.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("231").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date231.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("231").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section231.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("231").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point231.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("231").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location231.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("231").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name231.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("231").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target231.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("231").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team231.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm232.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("232").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("232").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s232.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("232").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("232").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("232").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm232.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("232").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s232.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael232.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("232").child("tmael").setValue(tmael232.getText().toString());



                return false;
            }
        });
        comment232.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("232").child("comment").setValue(comment232.getText().toString());


                return false;
            }
        });
        driver232.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("232").child("driver").setValue(driver232.getText().toString());


                return false;
            }
        });





        mDatabase.child("232").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael232.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("232").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver232.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("232").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment232.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("232").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date232.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("232").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section232.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("232").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point232.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("232").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location232.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("232").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name232.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("232").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target232.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("232").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team232.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm233.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("233").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("233").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s233.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("233").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("233").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("233").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm233.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("233").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s233.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael233.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("233").child("tmael").setValue(tmael233.getText().toString());



                return false;
            }
        });
        comment233.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("233").child("comment").setValue(comment233.getText().toString());


                return false;
            }
        });
        driver233.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("233").child("driver").setValue(driver233.getText().toString());


                return false;
            }
        });





        mDatabase.child("233").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael233.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("233").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver233.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("233").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment233.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("233").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date233.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("233").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section233.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("233").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point233.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("233").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location233.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("233").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name233.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("233").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target233.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("233").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team233.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        sm234.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("234").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("234").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s234.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("234").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("234").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("234").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm234.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("234").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s234.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael234.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("234").child("tmael").setValue(tmael234.getText().toString());



                return false;
            }
        });
        comment234.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("234").child("comment").setValue(comment234.getText().toString());


                return false;
            }
        });
        driver234.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("234").child("driver").setValue(driver234.getText().toString());


                return false;
            }
        });





        mDatabase.child("234").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael234.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("234").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver234.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("234").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment234.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("234").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date234.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("234").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section234.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("234").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point234.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("234").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location234.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("234").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name234.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("234").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target234.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("234").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team234.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm235.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("235").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("235").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s235.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("235").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("235").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("235").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm235.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("235").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s235.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael235.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("235").child("tmael").setValue(tmael235.getText().toString());



                return false;
            }
        });
        comment235.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("235").child("comment").setValue(comment235.getText().toString());


                return false;
            }
        });
        driver235.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("235").child("driver").setValue(driver235.getText().toString());


                return false;
            }
        });





        mDatabase.child("235").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael235.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("235").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver235.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("235").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment235.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("235").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date235.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("235").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section235.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("235").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point235.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("235").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location235.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("235").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name235.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("235").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target235.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("235").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team235.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm236.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("236").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("236").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s236.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("236").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("236").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("236").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm236.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("236").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s236.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael236.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("236").child("tmael").setValue(tmael236.getText().toString());



                return false;
            }
        });
        comment236.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("236").child("comment").setValue(comment236.getText().toString());


                return false;
            }
        });
        driver236.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("236").child("driver").setValue(driver236.getText().toString());


                return false;
            }
        });





        mDatabase.child("236").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael236.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("236").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver236.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("236").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment236.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("236").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date236.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("236").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section236.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("236").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point236.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("236").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location236.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("236").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name236.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("236").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target236.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("236").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team236.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm237.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("237").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("237").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s237.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("237").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("237").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("237").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm237.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("237").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s237.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael237.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("237").child("tmael").setValue(tmael237.getText().toString());



                return false;
            }
        });
        comment237.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("237").child("comment").setValue(comment237.getText().toString());


                return false;
            }
        });
        driver237.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("237").child("driver").setValue(driver237.getText().toString());


                return false;
            }
        });





        mDatabase.child("237").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael237.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("237").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver237.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("237").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment237.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("237").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date237.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("237").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section237.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("237").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point237.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("237").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location237.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("237").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name237.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("237").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target237.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("237").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team237.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm238.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("238").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("238").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s238.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("238").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("238").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("238").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm238.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("238").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s238.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael238.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("238").child("tmael").setValue(tmael238.getText().toString());



                return false;
            }
        });
        comment238.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("238").child("comment").setValue(comment238.getText().toString());


                return false;
            }
        });
        driver238.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("238").child("driver").setValue(driver238.getText().toString());


                return false;
            }
        });





        mDatabase.child("238").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael238.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("238").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver238.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("238").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment238.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("238").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date238.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("238").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section238.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("238").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point238.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("238").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location238.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("238").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name238.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("238").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target238.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("238").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team238.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm239.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("239").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("239").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s239.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("239").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("239").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("239").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm239.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("239").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s239.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael239.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("239").child("tmael").setValue(tmael239.getText().toString());



                return false;
            }
        });
        comment239.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("239").child("comment").setValue(comment239.getText().toString());


                return false;
            }
        });
        driver239.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("239").child("driver").setValue(driver239.getText().toString());


                return false;
            }
        });





        mDatabase.child("239").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael239.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("239").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver239.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("239").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment239.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("239").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date239.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("239").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section239.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("239").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point239.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("239").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location239.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("239").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name239.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("239").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target239.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("239").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team239.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm240.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("240").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("240").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s240.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("240").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("240").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("240").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm240.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("240").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s240.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael240.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("240").child("tmael").setValue(tmael240.getText().toString());



                return false;
            }
        });
        comment240.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("240").child("comment").setValue(comment240.getText().toString());


                return false;
            }
        });
        driver240.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("240").child("driver").setValue(driver240.getText().toString());


                return false;
            }
        });





        mDatabase.child("240").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael240.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("240").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver240.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("240").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment240.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("240").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date240.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("240").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section240.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("240").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point240.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("240").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location240.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("240").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name240.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("240").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target240.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("240").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team240.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm241.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("241").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("241").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s241.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("241").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("241").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("241").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm241.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("241").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s241.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael241.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("241").child("tmael").setValue(tmael241.getText().toString());



                return false;
            }
        });
        comment241.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("241").child("comment").setValue(comment241.getText().toString());


                return false;
            }
        });
        driver241.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("241").child("driver").setValue(driver241.getText().toString());


                return false;
            }
        });





        mDatabase.child("241").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael241.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("241").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver241.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("241").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment241.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("241").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date241.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("241").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section241.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("241").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point241.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("241").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location241.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("241").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name241.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("241").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target241.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("241").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team241.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm242.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("242").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("242").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s242.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("242").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("242").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("242").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm242.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("242").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s242.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael242.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("242").child("tmael").setValue(tmael242.getText().toString());



                return false;
            }
        });
        comment242.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("242").child("comment").setValue(comment242.getText().toString());


                return false;
            }
        });
        driver242.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("242").child("driver").setValue(driver242.getText().toString());


                return false;
            }
        });





        mDatabase.child("242").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael242.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("242").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver242.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("242").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment242.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("242").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date242.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("242").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section242.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("242").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point242.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("242").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location242.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("242").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name242.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("242").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target242.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("242").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team242.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm243.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("243").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("243").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s243.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("243").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("243").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("243").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm243.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("243").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s243.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael243.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("243").child("tmael").setValue(tmael243.getText().toString());



                return false;
            }
        });
        comment243.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("243").child("comment").setValue(comment243.getText().toString());


                return false;
            }
        });
        driver243.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("243").child("driver").setValue(driver243.getText().toString());


                return false;
            }
        });





        mDatabase.child("243").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael243.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("243").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver243.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("243").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment243.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("243").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date243.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("243").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section243.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("243").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point243.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("243").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location243.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("243").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name243.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("243").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target243.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("243").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team243.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm244.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("244").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("244").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s244.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("244").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("244").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("244").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm244.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("244").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s244.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael244.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("244").child("tmael").setValue(tmael244.getText().toString());



                return false;
            }
        });
        comment244.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("244").child("comment").setValue(comment244.getText().toString());


                return false;
            }
        });
        driver244.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("244").child("driver").setValue(driver244.getText().toString());


                return false;
            }
        });





        mDatabase.child("244").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael244.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("244").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver244.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("244").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment244.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("244").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date244.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("244").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section244.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("244").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point244.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("244").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location244.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("244").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name244.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("244").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target244.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("244").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team244.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm245.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("245").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("245").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s245.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("245").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("245").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("245").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm245.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("245").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s245.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael245.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("245").child("tmael").setValue(tmael245.getText().toString());



                return false;
            }
        });
        comment245.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("245").child("comment").setValue(comment245.getText().toString());


                return false;
            }
        });
        driver245.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("245").child("driver").setValue(driver245.getText().toString());


                return false;
            }
        });





        mDatabase.child("245").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael245.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("245").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver245.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("245").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment245.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("245").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date245.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("245").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section245.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("245").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point245.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("245").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location245.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("245").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name245.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("245").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target245.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("245").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team245.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm246.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("246").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("246").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s246.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("246").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("246").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("246").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm246.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("246").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s246.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael246.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("246").child("tmael").setValue(tmael246.getText().toString());



                return false;
            }
        });
        comment246.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("246").child("comment").setValue(comment246.getText().toString());


                return false;
            }
        });
        driver246.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("246").child("driver").setValue(driver246.getText().toString());


                return false;
            }
        });





        mDatabase.child("246").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael246.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("246").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver246.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("246").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment246.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("246").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date246.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("246").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section246.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("246").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point246.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("246").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location246.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("246").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name246.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("246").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target246.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("246").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team246.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm247.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("247").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("247").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s247.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("247").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("247").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("247").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm247.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("247").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s247.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael247.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("247").child("tmael").setValue(tmael247.getText().toString());



                return false;
            }
        });
        comment247.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("247").child("comment").setValue(comment247.getText().toString());


                return false;
            }
        });
        driver247.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("247").child("driver").setValue(driver247.getText().toString());


                return false;
            }
        });





        mDatabase.child("247").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael247.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("247").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver247.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("247").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment247.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("247").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date247.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("247").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section247.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("247").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point247.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("247").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location247.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("247").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name247.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("247").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target247.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("247").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team247.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm248.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("248").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("248").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s248.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("248").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("248").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("248").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm248.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("248").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s248.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael248.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("248").child("tmael").setValue(tmael248.getText().toString());



                return false;
            }
        });
        comment248.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("248").child("comment").setValue(comment248.getText().toString());


                return false;
            }
        });
        driver248.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("248").child("driver").setValue(driver248.getText().toString());


                return false;
            }
        });





        mDatabase.child("248").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael248.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("248").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver248.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("248").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment248.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("248").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date248.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("248").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section248.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("248").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point248.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("248").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location248.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("248").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name248.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("248").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target248.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("248").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team248.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm249.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("249").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("249").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s249.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("249").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("249").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("249").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm249.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("249").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s249.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael249.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("249").child("tmael").setValue(tmael249.getText().toString());



                return false;
            }
        });
        comment249.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("249").child("comment").setValue(comment249.getText().toString());


                return false;
            }
        });
        driver249.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("249").child("driver").setValue(driver249.getText().toString());


                return false;
            }
        });





        mDatabase.child("249").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael249.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("249").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver249.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("249").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment249.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("249").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date249.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("249").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section249.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("249").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point249.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("249").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location249.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("249").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name249.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("249").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target249.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("249").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team249.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm250.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("250").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("250").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s250.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("250").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("250").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("250").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm250.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("250").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s250.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael250.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("250").child("tmael").setValue(tmael250.getText().toString());



                return false;
            }
        });
        comment250.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("250").child("comment").setValue(comment250.getText().toString());


                return false;
            }
        });
        driver250.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("250").child("driver").setValue(driver250.getText().toString());


                return false;
            }
        });





        mDatabase.child("250").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael250.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("250").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver250.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("250").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment250.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("250").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date250.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("250").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section250.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("250").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point250.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("250").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location250.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("250").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name250.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("250").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target250.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("250").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team250.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm251.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("251").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("251").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s251.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("251").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("251").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("251").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm251.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("251").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s251.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael251.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("251").child("tmael").setValue(tmael251.getText().toString());



                return false;
            }
        });
        comment251.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("251").child("comment").setValue(comment251.getText().toString());


                return false;
            }
        });
        driver251.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("251").child("driver").setValue(driver251.getText().toString());


                return false;
            }
        });





        mDatabase.child("251").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael251.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("251").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver251.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("251").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment251.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("251").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date251.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("251").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section251.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("251").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point251.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("251").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location251.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("251").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name251.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("251").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target251.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("251").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team251.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm252.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("252").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("252").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s252.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("252").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("252").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("252").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm252.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("252").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s252.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael252.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("252").child("tmael").setValue(tmael252.getText().toString());



                return false;
            }
        });
        comment252.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("252").child("comment").setValue(comment252.getText().toString());


                return false;
            }
        });
        driver252.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("252").child("driver").setValue(driver252.getText().toString());


                return false;
            }
        });





        mDatabase.child("252").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael252.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("252").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver252.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("252").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment252.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("252").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date252.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("252").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section252.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("252").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point252.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("252").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location252.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("252").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name252.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("252").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target252.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("252").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team252.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm253.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("253").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("253").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s253.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("253").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("253").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("253").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm253.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("253").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s253.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael253.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("253").child("tmael").setValue(tmael253.getText().toString());



                return false;
            }
        });
        comment253.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("253").child("comment").setValue(comment253.getText().toString());


                return false;
            }
        });
        driver253.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("253").child("driver").setValue(driver253.getText().toString());


                return false;
            }
        });





        mDatabase.child("253").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael253.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("253").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver253.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("253").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment253.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("253").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date253.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("253").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section253.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("253").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point253.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("253").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location253.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("253").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name253.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("253").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target253.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("253").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team253.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm254.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("254").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("254").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s254.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("254").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("254").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("254").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm254.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("254").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s254.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael254.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("254").child("tmael").setValue(tmael254.getText().toString());



                return false;
            }
        });
        comment254.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("254").child("comment").setValue(comment254.getText().toString());


                return false;
            }
        });
        driver254.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("254").child("driver").setValue(driver254.getText().toString());


                return false;
            }
        });





        mDatabase.child("254").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael254.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("254").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver254.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("254").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment254.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("254").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date254.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("254").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section254.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("254").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point254.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("254").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location254.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("254").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name254.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("254").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target254.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("254").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team254.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm255.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("255").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("255").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s255.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("255").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("255").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("255").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm255.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("255").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s255.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael255.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("255").child("tmael").setValue(tmael255.getText().toString());



                return false;
            }
        });
        comment255.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("255").child("comment").setValue(comment255.getText().toString());


                return false;
            }
        });
        driver255.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("255").child("driver").setValue(driver255.getText().toString());


                return false;
            }
        });





        mDatabase.child("255").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael255.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("255").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver255.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("255").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment255.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("255").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date255.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("255").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section255.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("255").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point255.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("255").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location255.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("255").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name255.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("255").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target255.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("255").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team255.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm256.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("256").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("256").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s256.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("256").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("256").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("256").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm256.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("256").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s256.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael256.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("256").child("tmael").setValue(tmael256.getText().toString());



                return false;
            }
        });
        comment256.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("256").child("comment").setValue(comment256.getText().toString());


                return false;
            }
        });
        driver256.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("256").child("driver").setValue(driver256.getText().toString());


                return false;
            }
        });





        mDatabase.child("256").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael256.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("256").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver256.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("256").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment256.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("256").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date256.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("256").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section256.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("256").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point256.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("256").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location256.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("256").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name256.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("256").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target256.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("256").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team256.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm257.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("257").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("257").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s257.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("257").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("257").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("257").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm257.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("257").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s257.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael257.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("257").child("tmael").setValue(tmael257.getText().toString());



                return false;
            }
        });
        comment257.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("257").child("comment").setValue(comment257.getText().toString());


                return false;
            }
        });
        driver257.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("257").child("driver").setValue(driver257.getText().toString());


                return false;
            }
        });





        mDatabase.child("257").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael257.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("257").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver257.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("257").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment257.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("257").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date257.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("257").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section257.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("257").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point257.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("257").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location257.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("257").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name257.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("257").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target257.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("257").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team257.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm258.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("258").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("258").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s258.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("258").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("258").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("258").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm258.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("258").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s258.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael258.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("258").child("tmael").setValue(tmael258.getText().toString());



                return false;
            }
        });
        comment258.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("258").child("comment").setValue(comment258.getText().toString());


                return false;
            }
        });
        driver258.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("258").child("driver").setValue(driver258.getText().toString());


                return false;
            }
        });





        mDatabase.child("258").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael258.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("258").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver258.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("258").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment258.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("258").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date258.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("258").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section258.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("258").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point258.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("258").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location258.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("258").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name258.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("258").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target258.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("258").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team258.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm259.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("259").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("259").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s259.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("259").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("259").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("259").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm259.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("259").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s259.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael259.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("259").child("tmael").setValue(tmael259.getText().toString());



                return false;
            }
        });
        comment259.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("259").child("comment").setValue(comment259.getText().toString());


                return false;
            }
        });
        driver259.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("259").child("driver").setValue(driver259.getText().toString());


                return false;
            }
        });





        mDatabase.child("259").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael259.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("259").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver259.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("259").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment259.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("259").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date259.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("259").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section259.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("259").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point259.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("259").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location259.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("259").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name259.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("259").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target259.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("259").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team259.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm260.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("260").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("260").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s260.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("260").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("260").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("260").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm260.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("260").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s260.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael260.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("260").child("tmael").setValue(tmael260.getText().toString());



                return false;
            }
        });
        comment260.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("260").child("comment").setValue(comment260.getText().toString());


                return false;
            }
        });
        driver260.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("260").child("driver").setValue(driver260.getText().toString());


                return false;
            }
        });





        mDatabase.child("260").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael260.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("260").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver260.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("260").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment260.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("260").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date260.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("260").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section260.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("260").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point260.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("260").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location260.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("260").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name260.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("260").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target260.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("260").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team260.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm261.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("261").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("261").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s261.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("261").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("261").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("261").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm261.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("261").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s261.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael261.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("261").child("tmael").setValue(tmael261.getText().toString());



                return false;
            }
        });
        comment261.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("261").child("comment").setValue(comment261.getText().toString());


                return false;
            }
        });
        driver261.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("261").child("driver").setValue(driver261.getText().toString());


                return false;
            }
        });





        mDatabase.child("261").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael261.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("261").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver261.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("261").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment261.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("261").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date261.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("261").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section261.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("261").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point261.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("261").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location261.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("261").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name261.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("261").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target261.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("261").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team261.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm262.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("262").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("262").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s262.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("262").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("262").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("262").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm262.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("262").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s262.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael262.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("262").child("tmael").setValue(tmael262.getText().toString());



                return false;
            }
        });
        comment262.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("262").child("comment").setValue(comment262.getText().toString());


                return false;
            }
        });
        driver262.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("262").child("driver").setValue(driver262.getText().toString());


                return false;
            }
        });





        mDatabase.child("262").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael262.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("262").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver262.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("262").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment262.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("262").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date262.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("262").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section262.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("262").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point262.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("262").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location262.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("262").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name262.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("262").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target262.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("262").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team262.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm263.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("263").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("263").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s263.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("263").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("263").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("263").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm263.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("263").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s263.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael263.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("263").child("tmael").setValue(tmael263.getText().toString());



                return false;
            }
        });
        comment263.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("263").child("comment").setValue(comment263.getText().toString());


                return false;
            }
        });
        driver263.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("263").child("driver").setValue(driver263.getText().toString());


                return false;
            }
        });





        mDatabase.child("263").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael263.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("263").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver263.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("263").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment263.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("263").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date263.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("263").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section263.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("263").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point263.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("263").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location263.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("263").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name263.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("263").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target263.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("263").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team263.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm264.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("264").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("264").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s264.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("264").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("264").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("264").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm264.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("264").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s264.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael264.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("264").child("tmael").setValue(tmael264.getText().toString());



                return false;
            }
        });
        comment264.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("264").child("comment").setValue(comment264.getText().toString());


                return false;
            }
        });
        driver264.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("264").child("driver").setValue(driver264.getText().toString());


                return false;
            }
        });





        mDatabase.child("264").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael264.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("264").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver264.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("264").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment264.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("264").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date264.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("264").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section264.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("264").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point264.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("264").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location264.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("264").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name264.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("264").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target264.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("264").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team264.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm265.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("265").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("265").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s265.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("265").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("265").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("265").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm265.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("265").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s265.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael265.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("265").child("tmael").setValue(tmael265.getText().toString());



                return false;
            }
        });
        comment265.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("265").child("comment").setValue(comment265.getText().toString());


                return false;
            }
        });
        driver265.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("265").child("driver").setValue(driver265.getText().toString());


                return false;
            }
        });





        mDatabase.child("265").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael265.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("265").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver265.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("265").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment265.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("265").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date265.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("265").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section265.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("265").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point265.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("265").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location265.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("265").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name265.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("265").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target265.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("265").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team265.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm266.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("266").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("266").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s266.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("266").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("266").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("266").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm266.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("266").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s266.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael266.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("266").child("tmael").setValue(tmael266.getText().toString());



                return false;
            }
        });
        comment266.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("266").child("comment").setValue(comment266.getText().toString());


                return false;
            }
        });
        driver266.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("266").child("driver").setValue(driver266.getText().toString());


                return false;
            }
        });





        mDatabase.child("266").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael266.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("266").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver266.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("266").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment266.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("266").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date266.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("266").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section266.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("266").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point266.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("266").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location266.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("266").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name266.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("266").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target266.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("266").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team266.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm267.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("267").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("267").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s267.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("267").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("267").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("267").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm267.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("267").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s267.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael267.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("267").child("tmael").setValue(tmael267.getText().toString());



                return false;
            }
        });
        comment267.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("267").child("comment").setValue(comment267.getText().toString());


                return false;
            }
        });
        driver267.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("267").child("driver").setValue(driver267.getText().toString());


                return false;
            }
        });





        mDatabase.child("267").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael267.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("267").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver267.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("267").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment267.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("267").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date267.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("267").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section267.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("267").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point267.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("267").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location267.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("267").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name267.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("267").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target267.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("267").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team267.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm268.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("268").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("268").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s268.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("268").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("268").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("268").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm268.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("268").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s268.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael268.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("268").child("tmael").setValue(tmael268.getText().toString());



                return false;
            }
        });
        comment268.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("268").child("comment").setValue(comment268.getText().toString());


                return false;
            }
        });
        driver268.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("268").child("driver").setValue(driver268.getText().toString());


                return false;
            }
        });





        mDatabase.child("268").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael268.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("268").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver268.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("268").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment268.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("268").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date268.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("268").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section268.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("268").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point268.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("268").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location268.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("268").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name268.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("268").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target268.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("268").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team268.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm269.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("269").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("269").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s269.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("269").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("269").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("269").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm269.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("269").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s269.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael269.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("269").child("tmael").setValue(tmael269.getText().toString());



                return false;
            }
        });
        comment269.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("269").child("comment").setValue(comment269.getText().toString());


                return false;
            }
        });
        driver269.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("269").child("driver").setValue(driver269.getText().toString());


                return false;
            }
        });





        mDatabase.child("269").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael269.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("269").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver269.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("269").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment269.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("269").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date269.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("269").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section269.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("269").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point269.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("269").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location269.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("269").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name269.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("269").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target269.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("269").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team269.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm270.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("270").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("270").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s270.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("270").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("270").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("270").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm270.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("270").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s270.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael270.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("270").child("tmael").setValue(tmael270.getText().toString());



                return false;
            }
        });
        comment270.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("270").child("comment").setValue(comment270.getText().toString());


                return false;
            }
        });
        driver270.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("270").child("driver").setValue(driver270.getText().toString());


                return false;
            }
        });





        mDatabase.child("270").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael270.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("270").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver270.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("270").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment270.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("270").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date270.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("270").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section270.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("270").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point270.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("270").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location270.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("270").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name270.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("270").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target270.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("270").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team270.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm271.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("271").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("271").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s271.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("271").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("271").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("271").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm271.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("271").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s271.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael271.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("271").child("tmael").setValue(tmael271.getText().toString());



                return false;
            }
        });
        comment271.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("271").child("comment").setValue(comment271.getText().toString());


                return false;
            }
        });
        driver271.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("271").child("driver").setValue(driver271.getText().toString());


                return false;
            }
        });





        mDatabase.child("271").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael271.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("271").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver271.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("271").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment271.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("271").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date271.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("271").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section271.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("271").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point271.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("271").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location271.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("271").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name271.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("271").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target271.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("271").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team271.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm272.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("272").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("272").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s272.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("272").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("272").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("272").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm272.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("272").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s272.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael272.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("272").child("tmael").setValue(tmael272.getText().toString());



                return false;
            }
        });
        comment272.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("272").child("comment").setValue(comment272.getText().toString());


                return false;
            }
        });
        driver272.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("272").child("driver").setValue(driver272.getText().toString());


                return false;
            }
        });





        mDatabase.child("272").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael272.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("272").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver272.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("272").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment272.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("272").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date272.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("272").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section272.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("272").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point272.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("272").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location272.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("272").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name272.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("272").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target272.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("272").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team272.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm273.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("273").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("273").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s273.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("273").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("273").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("273").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm273.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("273").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s273.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael273.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("273").child("tmael").setValue(tmael273.getText().toString());



                return false;
            }
        });
        comment273.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("273").child("comment").setValue(comment273.getText().toString());


                return false;
            }
        });
        driver273.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("273").child("driver").setValue(driver273.getText().toString());


                return false;
            }
        });





        mDatabase.child("273").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael273.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("273").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver273.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("273").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment273.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("273").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date273.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("273").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section273.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("273").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point273.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("273").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location273.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("273").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name273.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("273").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target273.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("273").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team273.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm274.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("274").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("274").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s274.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("274").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("274").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("274").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm274.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("274").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s274.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael274.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("274").child("tmael").setValue(tmael274.getText().toString());



                return false;
            }
        });
        comment274.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("274").child("comment").setValue(comment274.getText().toString());


                return false;
            }
        });
        driver274.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("274").child("driver").setValue(driver274.getText().toString());


                return false;
            }
        });





        mDatabase.child("274").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael274.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("274").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver274.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("274").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment274.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("274").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date274.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("274").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section274.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("274").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point274.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("274").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location274.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("274").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name274.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("274").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target274.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("274").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team274.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm275.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("275").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("275").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s275.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("275").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("275").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("275").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm275.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("275").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s275.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael275.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("275").child("tmael").setValue(tmael275.getText().toString());



                return false;
            }
        });
        comment275.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("275").child("comment").setValue(comment275.getText().toString());


                return false;
            }
        });
        driver275.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("275").child("driver").setValue(driver275.getText().toString());


                return false;
            }
        });





        mDatabase.child("275").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael275.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("275").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver275.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("275").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment275.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("275").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date275.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("275").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section275.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("275").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point275.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("275").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location275.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("275").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name275.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("275").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target275.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("275").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team275.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm276.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("276").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("276").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s276.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("276").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("276").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("276").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm276.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("276").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s276.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael276.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("276").child("tmael").setValue(tmael276.getText().toString());



                return false;
            }
        });
        comment276.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("276").child("comment").setValue(comment276.getText().toString());


                return false;
            }
        });
        driver276.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("276").child("driver").setValue(driver276.getText().toString());


                return false;
            }
        });





        mDatabase.child("276").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael276.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("276").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver276.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("276").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment276.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("276").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date276.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("276").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section276.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("276").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point276.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("276").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location276.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("276").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name276.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("276").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target276.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("276").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team276.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm277.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("277").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("277").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s277.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("277").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("277").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("277").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm277.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("277").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s277.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael277.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("277").child("tmael").setValue(tmael277.getText().toString());



                return false;
            }
        });
        comment277.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("277").child("comment").setValue(comment277.getText().toString());


                return false;
            }
        });
        driver277.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("277").child("driver").setValue(driver277.getText().toString());


                return false;
            }
        });





        mDatabase.child("277").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael277.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("277").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver277.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("277").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment277.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("277").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date277.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("277").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section277.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("277").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point277.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("277").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location277.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("277").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name277.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("277").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target277.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("277").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team277.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm278.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("278").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("278").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s278.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("278").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("278").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("278").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm278.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("278").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s278.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael278.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("278").child("tmael").setValue(tmael278.getText().toString());



                return false;
            }
        });
        comment278.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("278").child("comment").setValue(comment278.getText().toString());


                return false;
            }
        });
        driver278.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("278").child("driver").setValue(driver278.getText().toString());


                return false;
            }
        });





        mDatabase.child("278").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael278.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("278").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver278.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("278").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment278.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("278").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date278.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("278").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section278.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("278").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point278.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("278").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location278.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("278").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name278.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("278").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target278.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("278").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team278.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm279.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("279").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("279").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s279.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("279").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("279").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("279").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm279.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("279").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s279.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael279.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("279").child("tmael").setValue(tmael279.getText().toString());



                return false;
            }
        });
        comment279.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("279").child("comment").setValue(comment279.getText().toString());


                return false;
            }
        });
        driver279.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("279").child("driver").setValue(driver279.getText().toString());


                return false;
            }
        });





        mDatabase.child("279").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael279.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("279").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver279.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("279").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment279.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("279").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date279.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("279").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section279.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("279").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point279.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("279").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location279.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("279").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name279.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("279").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target279.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("279").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team279.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm280.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("280").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("280").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s280.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("280").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("280").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("280").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm280.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("280").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s280.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael280.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("280").child("tmael").setValue(tmael280.getText().toString());



                return false;
            }
        });
        comment280.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("280").child("comment").setValue(comment280.getText().toString());


                return false;
            }
        });
        driver280.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("280").child("driver").setValue(driver280.getText().toString());


                return false;
            }
        });





        mDatabase.child("280").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael280.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("280").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver280.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("280").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment280.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("280").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date280.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("280").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section280.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("280").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point280.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("280").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location280.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("280").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name280.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("280").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target280.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("280").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team280.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm281.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("281").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("281").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s281.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("281").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("281").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("281").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm281.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("281").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s281.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael281.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("281").child("tmael").setValue(tmael281.getText().toString());



                return false;
            }
        });
        comment281.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("281").child("comment").setValue(comment281.getText().toString());


                return false;
            }
        });
        driver281.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("281").child("driver").setValue(driver281.getText().toString());


                return false;
            }
        });





        mDatabase.child("281").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael281.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("281").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver281.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("281").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment281.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("281").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date281.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("281").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section281.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("281").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point281.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("281").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location281.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("281").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name281.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("281").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target281.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("281").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team281.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm282.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("282").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("282").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s282.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("282").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("282").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("282").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm282.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("282").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s282.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael282.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("282").child("tmael").setValue(tmael282.getText().toString());



                return false;
            }
        });
        comment282.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("282").child("comment").setValue(comment282.getText().toString());


                return false;
            }
        });
        driver282.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("282").child("driver").setValue(driver282.getText().toString());


                return false;
            }
        });





        mDatabase.child("282").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael282.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("282").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver282.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("282").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment282.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("282").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date282.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("282").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section282.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("282").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point282.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("282").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location282.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("282").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name282.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("282").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target282.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("282").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team282.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm283.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("283").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("283").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s283.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("283").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("283").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("283").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm283.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("283").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s283.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael283.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("283").child("tmael").setValue(tmael283.getText().toString());



                return false;
            }
        });
        comment283.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("283").child("comment").setValue(comment283.getText().toString());


                return false;
            }
        });
        driver283.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("283").child("driver").setValue(driver283.getText().toString());


                return false;
            }
        });





        mDatabase.child("283").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael283.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("283").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver283.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("283").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment283.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("283").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date283.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("283").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section283.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("283").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point283.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("283").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location283.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("283").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name283.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("283").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target283.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("283").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team283.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm284.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("284").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("284").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s284.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("284").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("284").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("284").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm284.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("284").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s284.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael284.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("284").child("tmael").setValue(tmael284.getText().toString());



                return false;
            }
        });
        comment284.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("284").child("comment").setValue(comment284.getText().toString());


                return false;
            }
        });
        driver284.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("284").child("driver").setValue(driver284.getText().toString());


                return false;
            }
        });





        mDatabase.child("284").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael284.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("284").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver284.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("284").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment284.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("284").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date284.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("284").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section284.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("284").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point284.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("284").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location284.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("284").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name284.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("284").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target284.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("284").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team284.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm285.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("285").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("285").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s285.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("285").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("285").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("285").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm285.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("285").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s285.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael285.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("285").child("tmael").setValue(tmael285.getText().toString());



                return false;
            }
        });
        comment285.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("285").child("comment").setValue(comment285.getText().toString());


                return false;
            }
        });
        driver285.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("285").child("driver").setValue(driver285.getText().toString());


                return false;
            }
        });





        mDatabase.child("285").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael285.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("285").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver285.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("285").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment285.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("285").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date285.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("285").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section285.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("285").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point285.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("285").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location285.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("285").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name285.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("285").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target285.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("285").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team285.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm286.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("286").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("286").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s286.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("286").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("286").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("286").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm286.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("286").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s286.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael286.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("286").child("tmael").setValue(tmael286.getText().toString());



                return false;
            }
        });
        comment286.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("286").child("comment").setValue(comment286.getText().toString());


                return false;
            }
        });
        driver286.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("286").child("driver").setValue(driver286.getText().toString());


                return false;
            }
        });





        mDatabase.child("286").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael286.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("286").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver286.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("286").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment286.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("286").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date286.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("286").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section286.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("286").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point286.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("286").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location286.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("286").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name286.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("286").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target286.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("286").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team286.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm287.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("287").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("287").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s287.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("287").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("287").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("287").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm287.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("287").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s287.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael287.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("287").child("tmael").setValue(tmael287.getText().toString());



                return false;
            }
        });
        comment287.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("287").child("comment").setValue(comment287.getText().toString());


                return false;
            }
        });
        driver287.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("287").child("driver").setValue(driver287.getText().toString());


                return false;
            }
        });





        mDatabase.child("287").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael287.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("287").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver287.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("287").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment287.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("287").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date287.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("287").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section287.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("287").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point287.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("287").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location287.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("287").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name287.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("287").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target287.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("287").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team287.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm288.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("288").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("288").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s288.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("288").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("288").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("288").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm288.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("288").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s288.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael288.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("288").child("tmael").setValue(tmael288.getText().toString());



                return false;
            }
        });
        comment288.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("288").child("comment").setValue(comment288.getText().toString());


                return false;
            }
        });
        driver288.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("288").child("driver").setValue(driver288.getText().toString());


                return false;
            }
        });





        mDatabase.child("288").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael288.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("288").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver288.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("288").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment288.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("288").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date288.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("288").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section288.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("288").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point288.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("288").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location288.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("288").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name288.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("288").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target288.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("288").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team288.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm289.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("289").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("289").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s289.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("289").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("289").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("289").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm289.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("289").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s289.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael289.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("289").child("tmael").setValue(tmael289.getText().toString());



                return false;
            }
        });
        comment289.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("289").child("comment").setValue(comment289.getText().toString());


                return false;
            }
        });
        driver289.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("289").child("driver").setValue(driver289.getText().toString());


                return false;
            }
        });





        mDatabase.child("289").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael289.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("289").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver289.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("289").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment289.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("289").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date289.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("289").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section289.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("289").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point289.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("289").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location289.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("289").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name289.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("289").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target289.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("289").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team289.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm290.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("290").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("290").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s290.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("290").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("290").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("290").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm290.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("290").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s290.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael290.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("290").child("tmael").setValue(tmael290.getText().toString());



                return false;
            }
        });
        comment290.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("290").child("comment").setValue(comment290.getText().toString());


                return false;
            }
        });
        driver290.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("290").child("driver").setValue(driver290.getText().toString());


                return false;
            }
        });





        mDatabase.child("290").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael290.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("290").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver290.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("290").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment290.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("290").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date290.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("290").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section290.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("290").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point290.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("290").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location290.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("290").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name290.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("290").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target290.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("290").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team290.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm291.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("291").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("291").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s291.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("291").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("291").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("291").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm291.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("291").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s291.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael291.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("291").child("tmael").setValue(tmael291.getText().toString());



                return false;
            }
        });
        comment291.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("291").child("comment").setValue(comment291.getText().toString());


                return false;
            }
        });
        driver291.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("291").child("driver").setValue(driver291.getText().toString());


                return false;
            }
        });





        mDatabase.child("291").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael291.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("291").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver291.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("291").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment291.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("291").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date291.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("291").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section291.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("291").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point291.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("291").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location291.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("291").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name291.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("291").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target291.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("291").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team291.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        sm292.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("292").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("292").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s292.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("292").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("292").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("292").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm292.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("292").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s292.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael292.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("292").child("tmael").setValue(tmael292.getText().toString());



                return false;
            }
        });
        comment292.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("292").child("comment").setValue(comment292.getText().toString());


                return false;
            }
        });
        driver292.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("292").child("driver").setValue(driver292.getText().toString());


                return false;
            }
        });





        mDatabase.child("292").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael292.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("292").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver292.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("292").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment292.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("292").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date292.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("292").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section292.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("292").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point292.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("292").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location292.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("292").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name292.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("292").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target292.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("292").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team292.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm293.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("293").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("293").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s293.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("293").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("293").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("293").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm293.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("293").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s293.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael293.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("293").child("tmael").setValue(tmael293.getText().toString());



                return false;
            }
        });
        comment293.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("293").child("comment").setValue(comment293.getText().toString());


                return false;
            }
        });
        driver293.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("293").child("driver").setValue(driver293.getText().toString());


                return false;
            }
        });





        mDatabase.child("293").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael293.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("293").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver293.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("293").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment293.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("293").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date293.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("293").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section293.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("293").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point293.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("293").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location293.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("293").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name293.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("293").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target293.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("293").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team293.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm294.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("294").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("294").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s294.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("294").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("294").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("294").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm294.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("294").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s294.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael294.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("294").child("tmael").setValue(tmael294.getText().toString());



                return false;
            }
        });
        comment294.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("294").child("comment").setValue(comment294.getText().toString());


                return false;
            }
        });
        driver294.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("294").child("driver").setValue(driver294.getText().toString());


                return false;
            }
        });





        mDatabase.child("294").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael294.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("294").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver294.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("294").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment294.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("294").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date294.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("294").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section294.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("294").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point294.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("294").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location294.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("294").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name294.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("294").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target294.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("294").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team294.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm295.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("295").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("295").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s295.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("295").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("295").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("295").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm295.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("295").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s295.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael295.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("295").child("tmael").setValue(tmael295.getText().toString());



                return false;
            }
        });
        comment295.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("295").child("comment").setValue(comment295.getText().toString());


                return false;
            }
        });
        driver295.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("295").child("driver").setValue(driver295.getText().toString());


                return false;
            }
        });





        mDatabase.child("295").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael295.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("295").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver295.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("295").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment295.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("295").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date295.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("295").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section295.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("295").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point295.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("295").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location295.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("295").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name295.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("295").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target295.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("295").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team295.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm296.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("296").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("296").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s296.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("296").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("296").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("296").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm296.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("296").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s296.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael296.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("296").child("tmael").setValue(tmael296.getText().toString());



                return false;
            }
        });
        comment296.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("296").child("comment").setValue(comment296.getText().toString());


                return false;
            }
        });
        driver296.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("296").child("driver").setValue(driver296.getText().toString());


                return false;
            }
        });





        mDatabase.child("296").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael296.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("296").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver296.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("296").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment296.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("296").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date296.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("296").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section296.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("296").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point296.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("296").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location296.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("296").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name296.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("296").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target296.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("296").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team296.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm297.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("297").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("297").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s297.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("297").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("297").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("297").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm297.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("297").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s297.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael297.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("297").child("tmael").setValue(tmael297.getText().toString());



                return false;
            }
        });
        comment297.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("297").child("comment").setValue(comment297.getText().toString());


                return false;
            }
        });
        driver297.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("297").child("driver").setValue(driver297.getText().toString());


                return false;
            }
        });





        mDatabase.child("297").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael297.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("297").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver297.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("297").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment297.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("297").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date297.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("297").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section297.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("297").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point297.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("297").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location297.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("297").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name297.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("297").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target297.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("297").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team297.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm298.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("298").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("298").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s298.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("298").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("298").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("298").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm298.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("298").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s298.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael298.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("298").child("tmael").setValue(tmael298.getText().toString());



                return false;
            }
        });
        comment298.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("298").child("comment").setValue(comment298.getText().toString());


                return false;
            }
        });
        driver298.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("298").child("driver").setValue(driver298.getText().toString());


                return false;
            }
        });





        mDatabase.child("298").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael298.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("298").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver298.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("298").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment298.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("298").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date298.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("298").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section298.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("298").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point298.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("298").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location298.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("298").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name298.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("298").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target298.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("298").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team298.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm299.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("299").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("299").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s299.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("299").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("299").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("299").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm299.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("299").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s299.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael299.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("299").child("tmael").setValue(tmael299.getText().toString());



                return false;
            }
        });
        comment299.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("299").child("comment").setValue(comment299.getText().toString());


                return false;
            }
        });
        driver299.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("299").child("driver").setValue(driver299.getText().toString());


                return false;
            }
        });





        mDatabase.child("299").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael299.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("299").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver299.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("299").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment299.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("299").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date299.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("299").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section299.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("299").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point299.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("299").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location299.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("299").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name299.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("299").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target299.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("299").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team299.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        sm300.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("300").child("safety_and_security_approval").setValue("true");
                } else {
                    mDatabase.child("300").child("safety_and_security_approval").setValue("false");
                }
            }
        });
        s300.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if (b) {
                    mDatabase.child("300").child("field_manager_approval").setValue("true");
                } else {
                    mDatabase.child("300").child("field_manager_approval").setValue("false");
                }
            }
        });
        mDatabase.child("300").child("safety_and_security_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                sm300.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("300").child("field_manager_approval").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                s300.setChecked(Boolean.parseBoolean(dataSnapshot.getValue(String.class)));


            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        tmael300.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("300").child("tmael").setValue(tmael300.getText().toString());



                return false;
            }
        });
        comment300.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("300").child("comment").setValue(comment300.getText().toString());


                return false;
            }
        });
        driver300.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {

                mDatabase.child("300").child("driver").setValue(driver300.getText().toString());


                return false;
            }
        });





        mDatabase.child("300").child("tmael").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                tmael300.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("300").child("driver").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                driver300.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        mDatabase.child("300").child("comment").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                comment300.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("300").child("date").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                date300.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("300").child("depart").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Section300.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("300").child("point").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                point300.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("300").child("location").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                location300.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("300").child("name").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                name300.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("300").child("target").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                target300.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        mDatabase.child("300").child("team").addValueEventListener(new ValueEventListener() {


            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                team300.setText(dataSnapshot.getValue(String.class));

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });


        edit_task.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                if (isConnected()) {
                    Toast.makeText(getApplicationContext(), "تم التحديث بنجاح", Toast.LENGTH_SHORT).show();
                } else {
                    Toast.makeText(getApplicationContext(), "لا يوجد اتصال بالأنترنت", Toast.LENGTH_SHORT).show();
                }
            }
        });
    }
    public boolean isConnected() {
        boolean connected = false;
        try {
            ConnectivityManager cm = (ConnectivityManager)getApplicationContext().getSystemService(Context.CONNECTIVITY_SERVICE);
            NetworkInfo nInfo = cm.getActiveNetworkInfo();
            connected = nInfo != null && nInfo.isAvailable() && nInfo.isConnected();
            return connected;
        } catch (Exception e) {
            Log.e("Connectivity Exception", e.getMessage());
        }
        return connected;




    }

}